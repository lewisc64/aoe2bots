;Translated by https://github.com/lewisc64/aoe2ai
(defconst do-taunt-target 143)
(defconst do-taunt 144)
(defconst select-random-a48c11a0-12d8-41d6-88cc-73b23fa3dc4a 3)
(defconst select-random-fecc7ec3-065f-4cc1-a2f7-4700ef556d7f 3)
(defconst select-random-d816cfd9-b3d2-4333-a5b6-fc162f6c07e0 3)
(defconst select-random-092f1fb2-8e28-40ad-be5b-163b5f56e08c 3)
(defconst select-random-5d330acd-7ece-4f13-99d7-4be618e2cba6 3)
(defconst select-random-2adf1f11-5aea-4268-8d71-e5c45c1d6d00 7)
(defconst select-random-b2f4c276-b8c2-4440-bf66-dcb9e736f435 3)
(defconst select-random-aa778d6f-e874-4da1-bc79-7c1ae4440f9c 3)
(defconst select-random-f8569159-2446-4273-b0ea-a7df91d3d1d7 5)
(defconst select-random-aac7ae56-f760-49cf-b914-7bd1377357f0 2)
(defconst select-random-6bb1c5a3-0fee-4a5d-b19a-828e50083773 6)
(defconst select-random-14982451-0da1-40fc-b823-45e501d1c32a 8)
(defconst select-random-983e9733-4203-442e-aadd-ef31316e87e3 5)
(defconst select-random-caba4969-aab8-492a-ae89-f66ad25d19d1 4)
(defconst max-wood 1600)
(defconst max-food 1600)
(defconst max-gold 1600)
(defconst minimum-wood-gatherer-percentage 30)
(defconst minimum-food-gatherer-percentage 30)
(defconst minimum-gold-gatherer-percentage 30)
(defconst wood-threshold 300)
(defconst food-threshold 300)
(defconst gold-threshold 300)
(defconst good-wood-price 50)
(defconst good-food-price 50)
(defconst good-wood-sell-price 200)
(defconst good-food-sell-price 200)
(defconst can-buy-wood 139)
(defconst can-buy-food 140)
(defconst can-sell-wood 141)
(defconst can-sell-food 142)
(defconst attack-ready 71)
(defconst attacking 72)
(defconst monastery-count 105)
(defconst castle-count 102)
(defconst old-desired-military-buildings-per-type 103)
(defconst siege-workshop-count 96)
(defconst stable-count 91)
(defconst barracks-count 87)
(defconst archery-range-count 82)
(defconst enough-gold 81)
(defconst enough-food 80)
(defconst enough-wood 79)
(defconst old-produce-units 78)
(defconst next-unit 77)
(defconst desired-villagers-with-cart-potential 73)
(defconst trained-unit 75)
(defconst select-random-d62d1716-3f36-485b-9fd8-57ae99ed70e0 2)
(defconst select-random-42148e52-98ac-45ff-96a8-c7da9ebf10e8 2)
(defconst select-random-5e358c96-eceb-4bd9-b027-2224b06a4cef 15)
(defconst total-units-selected 130)
(defconst desired-units 129)
(defconst select-random-861d5f69-fb28-4c7e-8b38-af676941c0bc 5)
(defconst good-hand-cannoneer 127)
(defconst good-miltia 126)
(defconst good-speamen 125)
(defconst good-unique-units 124)
(defconst good-monks 123)
(defconst good-scorpions 122)
(defconst good-mangonels 121)
(defconst good-battering-rams 120)
(defconst good-battle-elephants 119)
(defconst good-camels 118)
(defconst good-knights 117)
(defconst good-scouts 116)
(defconst good-eagles 115)
(defconst good-spearmen 114)
(defconst good-militia 113)
(defconst good-cavalry-archers 112)
(defconst good-skirmishers 111)
(defconst good-hand-cannoneers 110)
(defconst good-archers 109)
(defconst select-random-8420cb56-fbe3-439d-806f-eaeb5f7075cb 4)
(defconst select-random-34a57c78-8a86-44a0-9a70-3b94df2329d9 3)
(defconst select-random-016bfd42-5c42-45c6-b49f-baa237e9781c 2)
(defconst balanced-aggressive 135)
(defconst select-random-152dc0a2-ef03-4f73-9ce2-22424e310341 3)
(defconst select-random-7e3e948e-d47c-4469-b654-08f3ec4f1630 2)
(defconst select-random-896ba3e8-329d-41a0-80ea-bc4511138ef2 2)
(defconst select-random-7257b2a9-c0ff-43e0-ab69-3afb225dc918 2)
(defconst select-random-270cbed2-017c-48a7-9657-9f9b4e03a378 3)
(defconst attempted-researches 60)
(defconst escrowed-wood 32)
(defconst escrowed-food 33)
(defconst escrowed-gold 34)
(defconst non-escrowed-wood 35)
(defconst non-escrowed-food 36)
(defconst non-escrowed-gold 37)
(defconst population-space-remaining 38)
(defconst current-population-goal 39)
(defconst total-villagers 40)
(defconst total-trade-carts 41)
(defconst town-center-count 42)
(defconst my-score 43)
(defconst highest-enemy-score 44)
(defconst lowest-enemy-score 45)
(defconst score-percentage 46)
(defconst previous-target-player-score 47)
(defconst target-player-score 48)
(defconst target-player-score-delta 50)
(defconst my-military-population 51)
(defconst target-military-population 52)
(defconst target-military-percentage 53)
(defconst largest-enemy-military-population 54)
(defconst largest-enemy-military-percentage 55)
(defconst threat-time 56)
(defconst threat-player 57)
(defconst threat-source 58)
(defconst threat-target 59)
(defconst produce-unique-units 31)
(defconst produce-monks 30)
(defconst produce-trebuchets 29)
(defconst produce-bombard-cannons 28)
(defconst produce-scorpions 27)
(defconst produce-mangonels 26)
(defconst produce-battering-rams 25)
(defconst produce-battle-elephants 24)
(defconst produce-camels 23)
(defconst produce-knights 22)
(defconst produce-scouts 21)
(defconst produce-eagles 20)
(defconst produce-spearmen 19)
(defconst produce-militia 18)
(defconst produce-cavalry-archers 17)
(defconst produce-skirmishers 16)
(defconst produce-hand-cannoneers 15)
(defconst produce-archers 14)
(defconst produce-trade-carts 13)
(defconst produce-villagers 12)
(defconst do-research 11)
(defconst produce-units 10)
(defconst pop-cap-goal 9)
(defconst desired-trade-carts 8)
(defconst desired-villagers 7)
(defconst desired-town-centers 6)
(defconst select-random-4feee701-7e4a-4fc4-8a61-d146c77e0c30 6)
(defconst desired-military-buildings-per-type 4)
(defconst free-for-all 3)
(defconst team-game 2)
(defconst resign 1)
(defconst gold-unit-threshold 0)
(defconst food-unit-threshold 0)
(defconst wood-unit-threshold 275)
(defconst expensive-tech-villagers 70)
(defconst extortionate-tech-villagers 100)
(defconst max-trebs 3)
(defconst max-rams 10)
(defconst imperial-age-town-size 30)
(defconst castle-age-town-size 24)
(defconst feudal-age-town-size 14)
(defconst dark-age-town-size 12)
(defconst castle-arrow-chemistry 747)
(defconst castle-arrow 746)
(defconst watch-tower-arrow 786)
(defconst tc-arrow 54)
(defconst ri-logistica 61)
(defconst ri-perfusion 457)
(defconst ri-beserkergang 49)
(defconst ri-garland-wars 24)
(defconst ri-el-dorado 4)
(defconst ri-yeomen 3)
(defrule
    (true)
=>
    (set-strategic-number sn-enable-new-building-system 1)
    (set-strategic-number sn-percent-building-cancellation 20)
    (set-strategic-number sn-cap-civilian-builders 200)
    (set-strategic-number sn-percent-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
    (set-strategic-number sn-total-number-explorers 1)
    (set-strategic-number sn-number-explore-groups 1)
    (set-strategic-number sn-initial-exploration-required 0)
    (set-difficulty-parameter ability-to-maintain-distance 0)
    (set-difficulty-parameter ability-to-dodge-missiles 0)
    (set-strategic-number sn-percent-attack-soldiers 100)
    (set-strategic-number sn-percent-attack-boats 100)
    (set-strategic-number sn-attack-intelligence 1)
    (set-strategic-number sn-livestock-to-town-center 1)
    (set-strategic-number sn-enable-patrol-attack 1)
    (set-strategic-number sn-intelligent-gathering 1)
    (set-strategic-number sn-local-targeting-mode 1)
    (set-strategic-number sn-retask-gather-amount 0)
    (set-strategic-number sn-target-evaluation-siege-weapon 500)
    (set-strategic-number sn-ttkfactor-scalar 500)
    (set-strategic-number sn-percent-enemy-sighted-response 100)
    (set-strategic-number sn-task-ungrouped-soldiers 0)
    (set-strategic-number sn-gather-defense-units 1)
    (set-strategic-number sn-defer-dropsite-update 1)
    (set-strategic-number sn-do-not-scale-for-difficulty-level 1)
    (set-strategic-number sn-number-build-attempts-before-skip 5)
    (set-strategic-number sn-max-skips-per-attempt 5)
    (disable-self)
)
(defrule
    (true)
=>
    (set-strategic-number sn-enable-boar-hunting 2)
    (set-strategic-number sn-minimum-number-hunters 3)
    (set-strategic-number sn-minimum-boar-lure-group-size 3)
    (set-strategic-number sn-minimum-boar-hunt-group-size 3)
    (disable-self)
    (set-strategic-number sn-wall-targeting-mode 1)
    (set-goal resign 0)
    (set-strategic-number sn-maximum-gold-drop-distance 8)
    (set-strategic-number sn-maximum-stone-drop-distance 8)
    (set-strategic-number sn-maximum-hunt-drop-distance 48)
    (set-strategic-number sn-maximum-attack-group-size 1)
    (set-strategic-number sn-minimum-attack-group-size 1)
    (set-strategic-number sn-special-attack-type2 villager)
)
(defrule
    (cc-players-unit-type-count any-ally villager > 0)
=>
    (set-goal team-game 1)
    (disable-self)
)
(defrule
    (not (cc-players-unit-type-count any-ally villager > 0))
=>
    (set-goal team-game 0)
    (disable-self)
)
(defrule
    (and (goal team-game 0) (and (player-valid 1) (and (player-valid 2) (player-valid 3))))
=>
    (set-goal free-for-all 1)
    (disable-self)
)
(defrule
    (not (and (goal team-game 0) (and (player-valid 1) (and (player-valid 2) (player-valid 3)))))
=>
    (set-goal free-for-all 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal desired-military-buildings-per-type 2)
    (disable-self)
    (generate-random-number select-random-4feee701-7e4a-4fc4-8a61-d146c77e0c30)
    (set-goal 5 0)
)
(defrule
    (random-number == 1)
    (goal 5 0)
=>
    (set-goal 5 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 5 0)
=>
    (set-goal 5 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 5 0)
=>
    (set-goal 5 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 5 0)
=>
    (set-goal 5 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 5 0)
=>
    (set-goal 5 5)
    (disable-self)
)
(defrule
    (random-number == 6)
    (goal 5 0)
=>
    (set-goal 5 6)
    (disable-self)
)
(defrule
    (goal 5 1)
=>
    (set-goal desired-town-centers 1)
    (disable-self)
)
(defrule
    (goal 5 2)
=>
    (set-goal desired-town-centers 2)
    (disable-self)
)
(defrule
    (goal 5 3)
=>
    (set-goal desired-town-centers 3)
    (disable-self)
)
(defrule
    (goal 5 4)
=>
    (set-goal desired-town-centers 3)
    (disable-self)
)
(defrule
    (goal 5 5)
=>
    (set-goal desired-town-centers 3)
    (disable-self)
)
(defrule
    (goal 5 6)
=>
    (set-goal desired-town-centers 4)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal desired-villagers 120)
    (disable-self)
)
(defrule
    (goal team-game 1)
=>
    (set-goal desired-trade-carts 20)
    (disable-self)
)
(defrule
    (not (goal team-game 1))
=>
    (set-goal desired-trade-carts 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal pop-cap-goal 0)
    (disable-self)
    (up-get-fact population-cap 0 pop-cap-goal)
    (up-modify-goal desired-villagers g:* pop-cap-goal)
    (up-modify-goal desired-villagers c:/ 200)
    (up-modify-goal desired-trade-carts g:* pop-cap-goal)
    (up-modify-goal desired-trade-carts c:/ 200)
    (set-goal produce-units 1)
    (set-goal do-research 1)
    (up-assign-builders c: castle c: 8)
    (up-assign-builders c: town-center-foundation c: 4)
    (set-goal produce-villagers 1)
    (set-goal produce-trade-carts 0)
    (set-goal produce-archers 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-skirmishers 0)
)
(defrule
    (true)
=>
    (set-goal produce-cavalry-archers 0)
    (disable-self)
    (set-goal produce-militia 0)
    (set-goal produce-spearmen 0)
    (set-goal produce-eagles 0)
    (set-goal produce-scouts 0)
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-battering-rams 0)
    (set-goal produce-mangonels 0)
    (set-goal produce-scorpions 0)
    (set-goal produce-bombard-cannons 0)
    (set-goal produce-trebuchets 0)
    (set-goal produce-monks 0)
    (set-goal produce-unique-units 0)
)
(defrule
    (true)
=>
    (set-goal escrowed-wood 0)
    (disable-self)
    (set-goal escrowed-food 0)
    (set-goal escrowed-gold 0)
    (set-goal non-escrowed-wood 0)
    (set-goal non-escrowed-food 0)
    (set-goal non-escrowed-gold 0)
)
(defrule
    (true)
=>
    (up-get-fact escrow-amount wood escrowed-wood)
    (up-get-fact escrow-amount food escrowed-food)
    (up-get-fact escrow-amount gold escrowed-gold)
    (up-get-fact resource-amount wood non-escrowed-wood)
    (up-get-fact resource-amount food non-escrowed-food)
    (up-get-fact resource-amount gold non-escrowed-gold)
    (up-modify-goal non-escrowed-wood g:- escrowed-wood)
    (up-modify-goal non-escrowed-food g:- escrowed-food)
    (up-modify-goal non-escrowed-gold g:- escrowed-gold)
)
(defrule
    (true)
=>
    (set-goal population-space-remaining 0)
    (disable-self)
    (set-goal current-population-goal 0)
)
(defrule
    (true)
=>
    (up-get-fact population-cap 0 population-space-remaining)
    (up-modify-goal population-space-remaining g:- current-population-goal)
)
(defrule
    (true)
=>
    (set-goal total-villagers 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact unit-type-count villager total-villagers)
)
(defrule
    (true)
=>
    (set-goal total-trade-carts 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact unit-type-count trade-cart total-trade-carts)
)
(defrule
    (true)
=>
    (set-goal town-center-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total town-center town-center-count)
)
(defrule
    (true)
=>
    (set-goal my-score 0)
    (disable-self)
    (set-goal highest-enemy-score 0)
    (set-goal lowest-enemy-score 0)
)
(defrule
    (true)
=>
    (up-get-fact current-score 0 my-score)
    (up-get-fact-max any-enemy current-score 0 highest-enemy-score)
    (up-get-fact-min any-enemy current-score 0 lowest-enemy-score)
)
(defrule
    (true)
=>
    (set-goal score-percentage 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-modify-goal score-percentage g:= my-score)
    (up-modify-goal score-percentage c:* 100)
    (up-modify-goal score-percentage g:/ highest-enemy-score)
)
(defrule
    (true)
=>
    (set-goal previous-target-player-score 0)
    (disable-self)
    (set-goal target-player-score 0)
)
(defrule
    (true)
=>
    (up-find-player enemy find-closest 49)
    (up-modify-sn sn-target-player-number g:= 49)
    (up-modify-sn sn-focus-player-number g:= 49)
    (up-get-target-fact current-score 0 target-player-score)
    (set-goal target-player-score-delta 0)
    (up-modify-goal target-player-score-delta g:= target-player-score)
    (up-modify-goal target-player-score-delta g:- previous-target-player-score)
    (up-modify-goal previous-target-player-score g:= target-player-score)
)
(defrule
    (true)
=>
    (set-goal my-military-population 0)
    (disable-self)
    (set-goal target-military-population 0)
    (set-goal target-military-percentage 0)
    (set-goal largest-enemy-military-population 0)
    (set-goal largest-enemy-military-percentage 0)
)
(defrule
    (true)
=>
    (up-get-fact military-population 0 my-military-population)
    (up-get-target-fact military-population 0 target-military-population)
    (up-get-fact-max any-enemy military-population 0 largest-enemy-military-population)
    (up-modify-goal target-military-percentage g:= my-military-population)
    (up-modify-goal target-military-percentage c:* 100)
    (up-modify-goal largest-enemy-military-percentage g:= target-military-percentage)
    (up-modify-goal target-military-percentage g:/ target-military-population)
    (up-modify-goal largest-enemy-military-percentage g:/ largest-enemy-military-population)
)
(defrule
    (true)
=>
    (set-goal threat-time 0)
    (disable-self)
    (set-goal threat-player 0)
    (set-goal threat-source 0)
    (set-goal threat-target 0)
)
(defrule
    (true)
=>
    (up-get-threat-data threat-time threat-player threat-source threat-target)
    (set-goal attempted-researches 0)
)
(defrule
    (up-research-status c: imperial-age >= research-pending)
=>
    (set-strategic-number sn-maximum-town-size imperial-age-town-size)
    (disable-self)
    (set-strategic-number sn-minimum-town-size imperial-age-town-size)
    (set-strategic-number sn-safe-town-size imperial-age-town-size)
    (set-strategic-number sn-maximum-food-drop-distance imperial-age-town-size)
    (set-strategic-number sn-maximum-gold-drop-distance 16)
    (set-strategic-number sn-maximum-stone-drop-distance 16)
)
(defrule
    (not (up-research-status c: imperial-age >= research-pending))
    (up-research-status c: castle-age >= research-pending)
=>
    (set-strategic-number sn-maximum-town-size castle-age-town-size)
    (disable-self)
    (set-strategic-number sn-minimum-town-size castle-age-town-size)
    (set-strategic-number sn-safe-town-size castle-age-town-size)
    (set-strategic-number sn-maximum-food-drop-distance castle-age-town-size)
    (set-strategic-number sn-maximum-gold-drop-distance 8)
    (set-strategic-number sn-maximum-stone-drop-distance 8)
)
(defrule
    (not (up-research-status c: imperial-age >= research-pending))
    (not (up-research-status c: castle-age >= research-pending))
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-strategic-number sn-maximum-town-size feudal-age-town-size)
    (disable-self)
    (set-strategic-number sn-minimum-town-size feudal-age-town-size)
    (set-strategic-number sn-safe-town-size feudal-age-town-size)
    (set-strategic-number sn-maximum-food-drop-distance feudal-age-town-size)
    (set-strategic-number sn-maximum-gold-drop-distance 8)
    (set-strategic-number sn-maximum-stone-drop-distance 8)
)
(defrule
    (strategic-number sn-task-ungrouped-soldiers == 1)
=>
    (set-strategic-number sn-task-ungrouped-soldiers 0)
)
(defrule
    (true)
=>
    (enable-timer 1 30)
    (disable-self)
)
(defrule
    (timer-triggered 1)
    (goal attacking 0)
=>
    (set-strategic-number sn-task-ungrouped-soldiers 1)
)
(defrule
    (timer-triggered 1)
=>
    (disable-timer 1)
    (enable-timer 1 30)
)
(defrule
    (can-build market)
    (building-type-count-total market < 1)
    (and (goal team-game 1) (current-age >= castle-age))
=>
    (build market)
)
(defrule
    (and (goal team-game 1) (current-age >= castle-age))
    (players-building-type-count any-ally market >= 1)
=>
    (generate-random-number select-random-7e3e948e-d47c-4469-b654-08f3ec4f1630)
    (set-goal 61 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 61 0)
    (and (goal team-game 1) (current-age >= castle-age))
    (players-building-type-count any-ally market >= 1)
=>
    (set-goal 61 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 61 0)
    (and (goal team-game 1) (current-age >= castle-age))
    (players-building-type-count any-ally market >= 1)
=>
    (set-goal 61 2)
    (disable-self)
)
(defrule
    (and (goal team-game 1) (current-age >= castle-age))
    (players-building-type-count any-ally market >= 1)
    (goal 61 1)
=>
    (set-goal produce-trade-carts 1)
)
(defrule
    (and (goal team-game 1) (current-age >= castle-age))
    (players-building-type-count any-ally market >= 1)
    (goal 61 2)
=>
    (set-goal produce-trade-carts 0)
)
(defrule
    (true)
=>
    (generate-random-number select-random-896ba3e8-329d-41a0-80ea-bc4511138ef2)
    (set-goal 62 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 62 0)
=>
    (set-goal 62 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 62 0)
=>
    (set-goal 62 2)
    (disable-self)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (goal 62 1)
=>
    (build monastery)
)
(defrule
    (can-train monk)
    (unit-type-count-total monk-set < 1)
    (goal 62 1)
=>
    (train monk)
)
(defrule
    (building-type-count house == 0)
=>
    (up-assign-builders c: house c: 2)
    (disable-self)
)
(defrule
    (not (building-type-count house == 0))
=>
    (up-assign-builders c: house c: 1)
    (disable-self)
)
(defrule
    (population-headroom != 0)
    (up-pending-objects c: house == 0)
    (can-build house)
    (housing-headroom < 5)
=>
    (build house)
)
(defrule
    (true)
=>
    (set-goal 63 0)
    (disable-self)
)
(defrule
    (dropsite-min-distance wood > 2)
    (dropsite-min-distance wood != -1)
    (resource-found wood)
    (up-pending-objects c: lumber-camp == 0)
    (can-build lumber-camp)
=>
    (build lumber-camp)
    (set-goal 63 1)
)
(defrule
    (goal 63 1)
=>
    (up-modify-sn sn-camp-max-distance c:+ 1)
)
(defrule
    (true)
=>
    (set-goal 63 0)
)
(defrule
    (can-build market)
    (building-type-count-total market < 1)
    (up-compare-goal town-center-count g:< desired-town-centers)
    (current-age >= castle-age)
=>
    (build market)
)
(defrule
    (stone-amount < 100)
    (can-buy-commodity stone)
    (up-compare-goal town-center-count g:< desired-town-centers)
    (current-age >= castle-age)
    (strategic-number sn-stone-gatherer-percentage == 0)
=>
    (buy-commodity stone)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 100)
    (up-compare-goal town-center-count g:< desired-town-centers)
=>
    (build town-center)
)
(defrule
    (true)
=>
    (generate-random-number select-random-7257b2a9-c0ff-43e0-ab69-3afb225dc918)
    (set-goal 64 0)
)
(defrule
    (random-number == 1)
    (goal 64 0)
=>
    (set-goal 64 1)
)
(defrule
    (random-number == 2)
    (goal 64 0)
=>
    (set-goal 64 2)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 100)
    (goal 64 1)
=>
    (build castle)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 100)
    (goal 64 2)
    (goal attacking 1)
=>
    (build-forward castle)
)
(defrule
    (true)
=>
    (set-goal 65 0)
    (disable-self)
)
(defrule
    (or (dropsite-min-distance gold > 3) (and (unit-type-count 579 == 0) (and (unit-type-count 581 == 0) (strategic-number sn-gold-gatherer-percentage > 0))))
    (dropsite-min-distance gold != -1)
    (resource-found gold)
    (up-pending-objects c: mining-camp == 0)
    (can-build mining-camp)
    (strategic-number sn-gold-gatherer-percentage > 0)
=>
    (build mining-camp)
    (set-goal 65 1)
)
(defrule
    (dropsite-min-distance stone > 3)
    (dropsite-min-distance stone != -1)
    (resource-found stone)
    (up-pending-objects c: mining-camp == 0)
    (can-build mining-camp)
    (strategic-number sn-stone-gatherer-percentage > 0)
=>
    (build mining-camp)
    (set-goal 65 1)
)
(defrule
    (goal 65 1)
=>
    (up-modify-sn sn-camp-max-distance c:+ 4)
)
(defrule
    (true)
=>
    (set-goal 65 0)
)
(defrule
    (current-age == dark-age)
=>
    (set-strategic-number sn-wood-gatherer-percentage 25)
    (set-strategic-number sn-food-gatherer-percentage 75)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (current-age == dark-age)
=>
    (set-strategic-number sn-enable-boar-hunting 2)
    (set-strategic-number sn-minimum-number-hunters 1)
    (set-strategic-number sn-minimum-boar-lure-group-size 1)
    (set-strategic-number sn-minimum-boar-hunt-group-size 1)
)
(defrule
    (or (dropsite-min-distance live-boar < 4) (dropsite-min-distance boar-food < 4))
    (current-age == dark-age)
=>
    (up-request-hunters c: 8)
    (set-strategic-number sn-minimum-number-hunters 8)
)
(defrule
    (dropsite-min-distance food > 3)
    (dropsite-min-distance food != -1)
    (resource-found food)
    (up-pending-objects c: mill == 0)
    (can-build mill)
    (current-age == dark-age)
=>
    (build mill)
)
(defrule
    (can-build mill)
    (building-type-count-total mill == 0)
    (game-time >= 360)
    (current-age == dark-age)
=>
    (build mill)
)
(defrule
    (current-age == dark-age)
    (and (wood-amount >= 100) (up-pending-objects c: farm == 0))
=>
    (up-get-fact unit-type-count villager 66)
    (up-modify-goal 66 s:* sn-food-gatherer-percentage)
    (up-modify-goal 66 c:/ 100)
    (up-get-fact building-type-count-total farm 67)
)
(defrule
    (up-compare-goal 67 g:< 66)
    (can-build farm)
    (current-age == dark-age)
    (and (wood-amount >= 100) (up-pending-objects c: farm == 0))
=>
    (build farm)
)
(defrule
    (current-age == dark-age)
    (food-amount < 50)
=>
    (up-drop-resources sheep-food c: 5)
    (up-drop-resources farm-food c: 5)
    (up-drop-resources forage-food c: 5)
    (up-drop-resources deer-food c: 20)
    (up-drop-resources boar-food c: 10)
)
(defrule
    (up-research-status c: feudal-age >= research-pending)
    (goal produce-unique-units 1)
=>
    (set-strategic-number sn-wood-gatherer-percentage 37)
    (set-strategic-number sn-food-gatherer-percentage 37)
    (set-strategic-number sn-gold-gatherer-percentage 18)
    (set-strategic-number sn-stone-gatherer-percentage 8)
    (disable-self)
)
(defrule
    (up-research-status c: feudal-age >= research-pending)
    (not (goal produce-unique-units 1))
=>
    (generate-random-number select-random-270cbed2-017c-48a7-9657-9f9b4e03a378)
    (set-goal 68 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 68 0)
    (up-research-status c: feudal-age >= research-pending)
    (not (goal produce-unique-units 1))
=>
    (set-goal 68 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 68 0)
    (up-research-status c: feudal-age >= research-pending)
    (not (goal produce-unique-units 1))
=>
    (set-goal 68 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 68 0)
    (up-research-status c: feudal-age >= research-pending)
    (not (goal produce-unique-units 1))
=>
    (set-goal 68 3)
    (disable-self)
)
(defrule
    (up-research-status c: feudal-age >= research-pending)
    (not (goal produce-unique-units 1))
    (goal 68 1)
=>
    (set-strategic-number sn-wood-gatherer-percentage 37)
    (set-strategic-number sn-food-gatherer-percentage 37)
    (set-strategic-number sn-gold-gatherer-percentage 18)
    (set-strategic-number sn-stone-gatherer-percentage 8)
    (disable-self)
)
(defrule
    (up-research-status c: feudal-age >= research-pending)
    (not (goal produce-unique-units 1))
    (goal 68 2)
=>
    (set-strategic-number sn-wood-gatherer-percentage 38)
    (set-strategic-number sn-food-gatherer-percentage 38)
    (set-strategic-number sn-gold-gatherer-percentage 20)
    (set-strategic-number sn-stone-gatherer-percentage 4)
    (disable-self)
)
(defrule
    (up-research-status c: feudal-age >= research-pending)
    (not (goal produce-unique-units 1))
    (goal 68 3)
=>
    (set-strategic-number sn-wood-gatherer-percentage 40)
    (set-strategic-number sn-food-gatherer-percentage 40)
    (set-strategic-number sn-gold-gatherer-percentage 20)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (population-headroom != 0)
    (up-pending-objects c: house == 0)
    (can-build house)
    (housing-headroom < 20)
    (up-research-status c: feudal-age >= research-pending)
=>
    (build house)
)
(defrule
    (up-research-status c: feudal-age >= research-pending)
    (wood-amount >= 200)
=>
    (up-get-fact unit-type-count villager 69)
    (up-modify-goal 69 s:* sn-food-gatherer-percentage)
    (up-modify-goal 69 c:/ 100)
    (up-get-fact building-type-count-total farm 70)
)
(defrule
    (up-compare-goal 70 g:< 69)
    (can-build farm)
    (up-research-status c: feudal-age >= research-pending)
    (wood-amount >= 200)
=>
    (build farm)
)
(defrule
    (current-age == castle-age)
=>
    (delete-building stone-wall-line)
    (delete-building palisade-wall)
    (delete-building gate)
)
(defrule
    (not (game-time >= 8))
=>
    (up-jump-rule 2383)
)
(defrule
    (true)
=>
    (set-goal attack-ready 0)
    (disable-self)
    (set-goal attacking 0)
)
(defrule
    (not (or (civilian-population >= 25) (or (death-match-game) (population-cap < 200))))
=>
    (up-jump-rule 8)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (research-completed feudal-age))
    (research-available feudal-age)
    (up-research-status c: feudal-age < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research feudal-age)
    (not (research-completed feudal-age))
    (research-available feudal-age)
    (goal do-research 1)
=>
    (research feudal-age)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 20)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 8)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (research-completed feudal-age))
    (research-available feudal-age)
    (up-research-status c: feudal-age < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research feudal-age)
    (not (research-completed feudal-age))
    (research-available feudal-age)
    (goal do-research 1)
=>
    (research feudal-age)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (and (not (research-completed castle-age)) (and (building-type-count archery-range == 0) (building-type-count stable == 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (building-type-count-total market < 1)
    (building-type-count-total market == 0)
    (wood-amount >= 200)
=>
    (build market)
)
(defrule
    (gold-amount > 400)
    (can-buy-commodity food)
    (not (research-completed castle-age))
    (food-amount < 800)
=>
    (buy-commodity food)
)
(defrule
    (food-amount > 900)
    (can-sell-commodity food)
    (not (research-completed castle-age))
    (gold-amount < 200)
=>
    (sell-commodity food)
)
(defrule
    (wood-amount > 400)
    (can-sell-commodity wood)
    (not (research-completed castle-age))
    (gold-amount < 200)
=>
    (sell-commodity wood)
)
(defrule
    (not (research-completed castle-age))
    (research-available castle-age)
    (up-research-status c: castle-age < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research castle-age)
    (not (research-completed castle-age))
    (research-available castle-age)
    (goal do-research 1)
=>
    (research castle-age)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (current-age == castle-age) (or (civilian-population >= expensive-tech-villagers) (population-cap < 200)))))
=>
    (up-jump-rule 31)
)
(defrule
    (not (not (research-completed imperial-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed imperial-age)))
=>
    (up-jump-rule 20)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 8)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (research-completed feudal-age))
    (research-available feudal-age)
    (up-research-status c: feudal-age < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research feudal-age)
    (not (research-completed feudal-age))
    (research-available feudal-age)
    (goal do-research 1)
=>
    (research feudal-age)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (and (not (research-completed castle-age)) (and (building-type-count archery-range == 0) (building-type-count stable == 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (building-type-count-total market < 1)
    (building-type-count-total market == 0)
    (wood-amount >= 200)
=>
    (build market)
)
(defrule
    (gold-amount > 400)
    (can-buy-commodity food)
    (not (research-completed castle-age))
    (food-amount < 800)
=>
    (buy-commodity food)
)
(defrule
    (food-amount > 900)
    (can-sell-commodity food)
    (not (research-completed castle-age))
    (gold-amount < 200)
=>
    (sell-commodity food)
)
(defrule
    (wood-amount > 400)
    (can-sell-commodity wood)
    (not (research-completed castle-age))
    (gold-amount < 200)
=>
    (sell-commodity wood)
)
(defrule
    (not (research-completed castle-age))
    (research-available castle-age)
    (up-research-status c: castle-age < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research castle-age)
    (not (research-completed castle-age))
    (research-available castle-age)
    (goal do-research 1)
=>
    (research castle-age)
)
(defrule
    (not (and (not (research-completed imperial-age)) (and (strategic-number sn-stone-gatherer-percentage > 0) (or (building-type-count monastery == 0) (building-type-count university == 0)))))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (and (not (research-completed imperial-age)) (not (strategic-number sn-stone-gatherer-percentage > 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (and (not (research-completed imperial-age)) (not (strategic-number sn-stone-gatherer-percentage > 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed imperial-age))
    (research-available imperial-age)
    (up-research-status c: imperial-age < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research imperial-age)
    (not (research-completed imperial-age))
    (research-available imperial-age)
    (goal do-research 1)
=>
    (research imperial-age)
)
(defrule
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-goal attack-ready 1)
)
(defrule
    (not (and (current-age >= imperial-age) (building-type-count castle >= 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-conscription)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-conscription))
    (research-available ri-conscription)
    (up-research-status c: ri-conscription < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-conscription)
    (not (research-completed ri-conscription))
    (research-available ri-conscription)
    (goal do-research 1)
=>
    (research ri-conscription)
)
(defrule
    (not (players-unit-type-count any-enemy monk-set >= 10))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-heresy)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (research-completed ri-heresy))
    (research-available ri-heresy)
    (up-research-status c: ri-heresy < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heresy)
    (not (research-completed ri-heresy))
    (research-available ri-heresy)
    (goal do-research 1)
=>
    (research ri-heresy)
)
(defrule
    (not (goal produce-villagers 1))
=>
    (up-jump-rule 94)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (and (unit-available villager) (current-age >= feudal-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-loom)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (research-completed ri-loom))
    (research-available ri-loom)
    (up-research-status c: ri-loom < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-loom)
    (not (research-completed ri-loom))
    (research-available ri-loom)
    (goal do-research 1)
=>
    (research ri-loom)
)
(defrule
    (not (and (unit-available villager) (current-age == feudal-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-wheel-barrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (research-completed ri-wheel-barrow))
    (research-available ri-wheel-barrow)
    (up-research-status c: ri-wheel-barrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-wheel-barrow)
    (not (research-completed ri-wheel-barrow))
    (research-available ri-wheel-barrow)
    (goal do-research 1)
=>
    (research ri-wheel-barrow)
)
(defrule
    (not (and (unit-available villager) (current-age == feudal-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-double-bit-axe)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (research-completed ri-double-bit-axe))
    (research-available ri-double-bit-axe)
    (up-research-status c: ri-double-bit-axe < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-bit-axe)
    (not (research-completed ri-double-bit-axe))
    (research-available ri-double-bit-axe)
    (goal do-research 1)
=>
    (research ri-double-bit-axe)
)
(defrule
    (not (and (unit-available villager) (current-age == feudal-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-horse-collar)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (research-completed ri-horse-collar))
    (research-available ri-horse-collar)
    (up-research-status c: ri-horse-collar < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-horse-collar)
    (not (research-completed ri-horse-collar))
    (research-available ri-horse-collar)
    (goal do-research 1)
=>
    (research ri-horse-collar)
)
(defrule
    (not (and (unit-available villager) (and (not (current-age == feudal-age)) (current-age == castle-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bow-saw)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed ri-bow-saw)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-double-bit-axe)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (research-completed ri-double-bit-axe))
    (research-available ri-double-bit-axe)
    (up-research-status c: ri-double-bit-axe < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-bit-axe)
    (not (research-completed ri-double-bit-axe))
    (research-available ri-double-bit-axe)
    (goal do-research 1)
=>
    (research ri-double-bit-axe)
)
(defrule
    (not (research-completed ri-bow-saw))
    (research-available ri-bow-saw)
    (up-research-status c: ri-bow-saw < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bow-saw)
    (not (research-completed ri-bow-saw))
    (research-available ri-bow-saw)
    (goal do-research 1)
=>
    (research ri-bow-saw)
)
(defrule
    (not (and (unit-available villager) (and (not (current-age == feudal-age)) (current-age == castle-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-heavy-plow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (not (research-completed ri-heavy-plow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-horse-collar)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (research-completed ri-horse-collar))
    (research-available ri-horse-collar)
    (up-research-status c: ri-horse-collar < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-horse-collar)
    (not (research-completed ri-horse-collar))
    (research-available ri-horse-collar)
    (goal do-research 1)
=>
    (research ri-horse-collar)
)
(defrule
    (not (research-completed ri-heavy-plow))
    (research-available ri-heavy-plow)
    (up-research-status c: ri-heavy-plow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-plow)
    (not (research-completed ri-heavy-plow))
    (research-available ri-heavy-plow)
    (goal do-research 1)
=>
    (research ri-heavy-plow)
)
(defrule
    (not (and (unit-available villager) (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age)))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-hand-cart)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed ri-hand-cart)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-wheel-barrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (research-completed ri-wheel-barrow))
    (research-available ri-wheel-barrow)
    (up-research-status c: ri-wheel-barrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-wheel-barrow)
    (not (research-completed ri-wheel-barrow))
    (research-available ri-wheel-barrow)
    (goal do-research 1)
=>
    (research ri-wheel-barrow)
)
(defrule
    (not (research-completed ri-hand-cart))
    (research-available ri-hand-cart)
    (up-research-status c: ri-hand-cart < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-hand-cart)
    (not (research-completed ri-hand-cart))
    (research-available ri-hand-cart)
    (goal do-research 1)
=>
    (research ri-hand-cart)
)
(defrule
    (not (and (unit-available villager) (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-two-man-saw)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed ri-two-man-saw)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bow-saw)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed ri-bow-saw)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-double-bit-axe)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (research-completed ri-double-bit-axe))
    (research-available ri-double-bit-axe)
    (up-research-status c: ri-double-bit-axe < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-bit-axe)
    (not (research-completed ri-double-bit-axe))
    (research-available ri-double-bit-axe)
    (goal do-research 1)
=>
    (research ri-double-bit-axe)
)
(defrule
    (not (research-completed ri-bow-saw))
    (research-available ri-bow-saw)
    (up-research-status c: ri-bow-saw < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bow-saw)
    (not (research-completed ri-bow-saw))
    (research-available ri-bow-saw)
    (goal do-research 1)
=>
    (research ri-bow-saw)
)
(defrule
    (not (research-completed ri-two-man-saw))
    (research-available ri-two-man-saw)
    (up-research-status c: ri-two-man-saw < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-two-man-saw)
    (not (research-completed ri-two-man-saw))
    (research-available ri-two-man-saw)
    (goal do-research 1)
=>
    (research ri-two-man-saw)
)
(defrule
    (not (and (unit-available villager) (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-crop-rotation)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (not (research-completed ri-crop-rotation)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-heavy-plow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (not (research-completed ri-heavy-plow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-horse-collar)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (research-completed ri-horse-collar))
    (research-available ri-horse-collar)
    (up-research-status c: ri-horse-collar < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-horse-collar)
    (not (research-completed ri-horse-collar))
    (research-available ri-horse-collar)
    (goal do-research 1)
=>
    (research ri-horse-collar)
)
(defrule
    (not (research-completed ri-heavy-plow))
    (research-available ri-heavy-plow)
    (up-research-status c: ri-heavy-plow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-plow)
    (not (research-completed ri-heavy-plow))
    (research-available ri-heavy-plow)
    (goal do-research 1)
=>
    (research ri-heavy-plow)
)
(defrule
    (not (research-completed ri-crop-rotation))
    (research-available ri-crop-rotation)
    (up-research-status c: ri-crop-rotation < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-crop-rotation)
    (not (research-completed ri-crop-rotation))
    (research-available ri-crop-rotation)
    (goal do-research 1)
=>
    (research ri-crop-rotation)
)
(defrule
    (unit-available villager)
=>
    (set-goal desired-villagers-with-cart-potential 0)
    (disable-self)
)
(defrule
    (unit-available villager)
=>
    (up-modify-goal desired-villagers-with-cart-potential g:= desired-villagers)
)
(defrule
    (unit-available villager)
    (goal produce-trade-carts 1)
=>
    (up-modify-goal desired-villagers-with-cart-potential g:- desired-trade-carts)
)
(defrule
    (true)
=>
    (set-goal 74 0)
    (disable-self)
)
(defrule
    (can-train villager)
    (unit-available villager)
    (up-compare-goal total-villagers g:< desired-villagers-with-cart-potential)
=>
    (train villager)
    (set-goal 74 1)
)
(defrule
    (unit-available villager)
    (up-compare-goal total-villagers g:< desired-villagers-with-cart-potential)
    (goal 74 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 74 0)
)
(defrule
    (unit-available villager)
    (not (up-compare-goal total-villagers g:< desired-villagers-with-cart-potential))
    (up-compare-goal total-villagers g:> desired-villagers-with-cart-potential)
=>
    (delete-unit villager)
)
(defrule
    (not (and (unit-available villager) (game-time >= 60)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-loom)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (research-completed ri-loom))
    (research-available ri-loom)
    (up-research-status c: ri-loom < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-loom)
    (not (research-completed ri-loom))
    (research-available ri-loom)
    (goal do-research 1)
=>
    (research ri-loom)
)
(defrule
    (not (goal produce-trade-carts 1))
=>
    (up-jump-rule 10)
)
(defrule
    (can-build market)
    (building-type-count-total market < 1)
    (building-type-count-total market == 0)
    (wood-amount >= 200)
=>
    (build market)
)
(defrule
    (not (unit-available trade-cart))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-caravan)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (building-type-count-total market < 1)
    (building-type-count-total market == 0)
    (wood-amount >= 200)
=>
    (build market)
)
(defrule
    (not (research-completed ri-caravan))
    (research-available ri-caravan)
    (up-research-status c: ri-caravan < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-caravan)
    (not (research-completed ri-caravan))
    (research-available ri-caravan)
    (goal do-research 1)
=>
    (research ri-caravan)
)
(defrule
    (true)
=>
    (set-goal 76 0)
    (disable-self)
)
(defrule
    (can-train trade-cart)
    (unit-available trade-cart)
    (up-compare-goal total-trade-carts g:< desired-trade-carts)
=>
    (train trade-cart)
    (set-goal 76 1)
)
(defrule
    (unit-available trade-cart)
    (up-compare-goal total-trade-carts g:< desired-trade-carts)
    (goal 76 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 76 0)
)
(defrule
    (true)
=>
    (set-goal next-unit archer-line)
    (disable-self)
    (set-goal old-produce-units 0)
)
(defrule
    (wood-amount >= wood-unit-threshold)
=>
    (set-goal enough-wood 1)
)
(defrule
    (not (wood-amount >= wood-unit-threshold))
=>
    (set-goal enough-wood 0)
)
(defrule
    (food-amount >= food-unit-threshold)
=>
    (set-goal enough-food 1)
)
(defrule
    (not (food-amount >= food-unit-threshold))
=>
    (set-goal enough-food 0)
)
(defrule
    (gold-amount >= gold-unit-threshold)
=>
    (set-goal enough-gold 1)
)
(defrule
    (not (gold-amount >= gold-unit-threshold))
=>
    (set-goal enough-gold 0)
)
(defrule
    (and (goal attacking 0) (town-under-attack))
=>
    (set-goal enough-wood 1)
    (set-goal enough-food 1)
    (set-goal enough-gold 1)
)
(defrule
    (not (or (goal produce-bombard-cannons 1) (goal produce-hand-cannoneers 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (and (goal produce-archers 1) (unit-available archer-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-archers 1) (unit-available archer-line))
    (not (goal next-unit archer-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-archers 1) (unit-available archer-line)))
=>
    (up-jump-rule 115)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (and (unit-available archer-line) (current-age == castle-age)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-crossbow)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-crossbow))
    (research-available ri-crossbow)
    (up-research-status c: ri-crossbow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-crossbow)
    (not (research-completed ri-crossbow))
    (research-available ri-crossbow)
    (goal do-research 1)
=>
    (research ri-crossbow)
)
(defrule
    (not (and (unit-available archer-line) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-arbalest)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (not (research-completed ri-arbalest)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-crossbow)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-crossbow))
    (research-available ri-crossbow)
    (up-research-status c: ri-crossbow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-crossbow)
    (not (research-completed ri-crossbow))
    (research-available ri-crossbow)
    (goal do-research 1)
=>
    (research ri-crossbow)
)
(defrule
    (not (research-completed ri-arbalest))
    (research-available ri-arbalest)
    (up-research-status c: ri-arbalest < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arbalest)
    (not (research-completed ri-arbalest))
    (research-available ri-arbalest)
    (goal do-research 1)
=>
    (research ri-arbalest)
)
(defrule
    (not (and (unit-available archer-line) (and (current-age >= castle-age) (civilian-population >= expensive-tech-villagers))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-yeomen)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-yeomen))
    (research-available ri-yeomen)
    (up-research-status c: ri-yeomen < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-yeomen)
    (not (research-completed ri-yeomen))
    (research-available ri-yeomen)
    (goal do-research 1)
=>
    (research ri-yeomen)
)
(defrule
    (not (unit-available archer-line))
=>
    (up-jump-rule 81)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (up-research-status c: ri-bracer < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (goal do-research 1)
=>
    (research ri-bracer)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (up-research-status c: ri-ring-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (goal do-research 1)
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-thumb-ring)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-thumb-ring))
    (research-available ri-thumb-ring)
    (up-research-status c: ri-thumb-ring < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
    (research-available ri-thumb-ring)
    (goal do-research 1)
=>
    (research ri-thumb-ring)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (up-research-status c: ri-ballistics < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (goal do-research 1)
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 100)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (true)
=>
    (set-goal 83 0)
    (disable-self)
)
(defrule
    (can-train archer-line)
    (unit-available archer-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
=>
    (train archer-line)
    (set-goal 83 1)
)
(defrule
    (unit-available archer-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (goal 83 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 83 0)
)
(defrule
    (and (goal produce-archers 1) (unit-available archer-line))
    (not (goal next-unit archer-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-archers 1) (unit-available archer-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit hand-cannoneer)
)
(defrule
    (not (and (goal produce-archers 1) (unit-available archer-line)))
    (goal next-unit archer-line)
=>
    (set-goal next-unit hand-cannoneer)
)
(defrule
    (and (goal produce-hand-cannoneers 1) (unit-available hand-cannoneer))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-hand-cannoneers 1) (unit-available hand-cannoneer))
    (not (goal next-unit hand-cannoneer))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-hand-cannoneers 1) (unit-available hand-cannoneer)))
=>
    (up-jump-rule 25)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (unit-available hand-cannoneer)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (unit-available hand-cannoneer)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 100)
    (unit-available hand-cannoneer)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (not (unit-available hand-cannoneer))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (up-research-status c: ri-ring-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (goal do-research 1)
=>
    (research ri-ring-archer-armor)
)
(defrule
    (true)
=>
    (set-goal 84 0)
    (disable-self)
)
(defrule
    (can-train hand-cannoneer)
    (unit-available hand-cannoneer)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
=>
    (train hand-cannoneer)
    (set-goal 84 1)
)
(defrule
    (unit-available hand-cannoneer)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
    (goal 84 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 84 0)
)
(defrule
    (and (goal produce-hand-cannoneers 1) (unit-available hand-cannoneer))
    (not (goal next-unit hand-cannoneer))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-hand-cannoneers 1) (unit-available hand-cannoneer))
    (goal trained-unit 1)
=>
    (set-goal next-unit skirmisher-line)
)
(defrule
    (not (and (goal produce-hand-cannoneers 1) (unit-available hand-cannoneer)))
    (goal next-unit hand-cannoneer)
=>
    (set-goal next-unit skirmisher-line)
)
(defrule
    (and (goal produce-skirmishers 1) (unit-available skirmisher-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-skirmishers 1) (unit-available skirmisher-line))
    (not (goal next-unit skirmisher-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-skirmishers 1) (unit-available skirmisher-line)))
=>
    (up-jump-rule 110)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (and (unit-available skirmisher-line) (current-age == castle-age)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-elite-skirmisher)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-elite-skirmisher))
    (research-available ri-elite-skirmisher)
    (up-research-status c: ri-elite-skirmisher < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-skirmisher)
    (not (research-completed ri-elite-skirmisher))
    (research-available ri-elite-skirmisher)
    (goal do-research 1)
=>
    (research ri-elite-skirmisher)
)
(defrule
    (not (and (unit-available skirmisher-line) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-imperial-skirmisher)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (not (research-completed ri-imperial-skirmisher)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-elite-skirmisher)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-elite-skirmisher))
    (research-available ri-elite-skirmisher)
    (up-research-status c: ri-elite-skirmisher < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-skirmisher)
    (not (research-completed ri-elite-skirmisher))
    (research-available ri-elite-skirmisher)
    (goal do-research 1)
=>
    (research ri-elite-skirmisher)
)
(defrule
    (not (research-completed ri-imperial-skirmisher))
    (research-available ri-imperial-skirmisher)
    (up-research-status c: ri-imperial-skirmisher < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-imperial-skirmisher)
    (not (research-completed ri-imperial-skirmisher))
    (research-available ri-imperial-skirmisher)
    (goal do-research 1)
=>
    (research ri-imperial-skirmisher)
)
(defrule
    (not (unit-available skirmisher-line))
=>
    (up-jump-rule 81)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (up-research-status c: ri-bracer < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (goal do-research 1)
=>
    (research ri-bracer)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (up-research-status c: ri-ring-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (goal do-research 1)
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-thumb-ring)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-thumb-ring))
    (research-available ri-thumb-ring)
    (up-research-status c: ri-thumb-ring < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
    (research-available ri-thumb-ring)
    (goal do-research 1)
=>
    (research ri-thumb-ring)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (up-research-status c: ri-ballistics < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (goal do-research 1)
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 100)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (true)
=>
    (set-goal 85 0)
    (disable-self)
)
(defrule
    (can-train skirmisher-line)
    (unit-available skirmisher-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-food 1)))
=>
    (train skirmisher-line)
    (set-goal 85 1)
)
(defrule
    (unit-available skirmisher-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-food 1)))
    (goal 85 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 85 0)
)
(defrule
    (and (goal produce-skirmishers 1) (unit-available skirmisher-line))
    (not (goal next-unit skirmisher-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-skirmishers 1) (unit-available skirmisher-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit cavalry-archer-line)
)
(defrule
    (not (and (goal produce-skirmishers 1) (unit-available skirmisher-line)))
    (goal next-unit skirmisher-line)
=>
    (set-goal next-unit cavalry-archer-line)
)
(defrule
    (and (goal produce-cavalry-archers 1) (unit-available cavalry-archer-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-cavalry-archers 1) (unit-available cavalry-archer-line))
    (not (goal next-unit cavalry-archer-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-cavalry-archers 1) (unit-available cavalry-archer-line)))
=>
    (up-jump-rule 117)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (and (unit-available cavalry-archer-line) (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers))))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-heavy-cavalry-archer)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-heavy-cavalry-archer))
    (research-available ri-heavy-cavalry-archer)
    (up-research-status c: ri-heavy-cavalry-archer < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-cavalry-archer)
    (not (research-completed ri-heavy-cavalry-archer))
    (research-available ri-heavy-cavalry-archer)
    (goal do-research 1)
=>
    (research ri-heavy-cavalry-archer)
)
(defrule
    (not (unit-available cavalry-archer-line))
=>
    (up-jump-rule 102)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (up-research-status c: ri-bracer < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (goal do-research 1)
=>
    (research ri-bracer)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (up-research-status c: ri-ring-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (goal do-research 1)
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-thumb-ring)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-thumb-ring))
    (research-available ri-thumb-ring)
    (up-research-status c: ri-thumb-ring < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
    (research-available ri-thumb-ring)
    (goal do-research 1)
=>
    (research ri-thumb-ring)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (up-research-status c: ri-ballistics < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (goal do-research 1)
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 100)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (up-research-status c: ri-bloodlines < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (goal do-research 1)
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (up-research-status c: ri-husbandry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (goal do-research 1)
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-parthian-tactics)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-parthian-tactics))
    (research-available ri-parthian-tactics)
    (up-research-status c: ri-parthian-tactics < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-parthian-tactics)
    (not (research-completed ri-parthian-tactics))
    (research-available ri-parthian-tactics)
    (goal do-research 1)
=>
    (research ri-parthian-tactics)
)
(defrule
    (true)
=>
    (set-goal 86 0)
    (disable-self)
)
(defrule
    (can-train cavalry-archer-line)
    (unit-available cavalry-archer-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
=>
    (train cavalry-archer-line)
    (set-goal 86 1)
)
(defrule
    (unit-available cavalry-archer-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (goal 86 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 86 0)
)
(defrule
    (and (goal produce-cavalry-archers 1) (unit-available cavalry-archer-line))
    (not (goal next-unit cavalry-archer-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-cavalry-archers 1) (unit-available cavalry-archer-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit militiaman-line)
)
(defrule
    (not (and (goal produce-cavalry-archers 1) (unit-available cavalry-archer-line)))
    (goal next-unit cavalry-archer-line)
=>
    (set-goal next-unit militiaman-line)
)
(defrule
    (and (goal produce-militia 1) (unit-available militiaman-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-militia 1) (unit-available militiaman-line))
    (not (goal next-unit militiaman-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-militia 1) (unit-available militiaman-line)))
=>
    (up-jump-rule 129)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (and (unit-available militiaman-line) (current-age == feudal-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-man-at-arms)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-man-at-arms))
    (research-available ri-man-at-arms)
    (up-research-status c: ri-man-at-arms < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-man-at-arms)
    (not (research-completed ri-man-at-arms))
    (research-available ri-man-at-arms)
    (goal do-research 1)
=>
    (research ri-man-at-arms)
)
(defrule
    (not (and (unit-available militiaman-line) (and (not (current-age == feudal-age)) (current-age == castle-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-long-swordsman)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-long-swordsman)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-man-at-arms)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-man-at-arms))
    (research-available ri-man-at-arms)
    (up-research-status c: ri-man-at-arms < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-man-at-arms)
    (not (research-completed ri-man-at-arms))
    (research-available ri-man-at-arms)
    (goal do-research 1)
=>
    (research ri-man-at-arms)
)
(defrule
    (not (research-completed ri-long-swordsman))
    (research-available ri-long-swordsman)
    (up-research-status c: ri-long-swordsman < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-long-swordsman)
    (not (research-completed ri-long-swordsman))
    (research-available ri-long-swordsman)
    (goal do-research 1)
=>
    (research ri-long-swordsman)
)
(defrule
    (not (and (unit-available militiaman-line) (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age)))))
=>
    (up-jump-rule 19)
)
(defrule
    (not (not (research-completed ri-champion)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-champion)))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-two-handed-swordsman)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-two-handed-swordsman)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-long-swordsman)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-long-swordsman)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-man-at-arms)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-man-at-arms))
    (research-available ri-man-at-arms)
    (up-research-status c: ri-man-at-arms < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-man-at-arms)
    (not (research-completed ri-man-at-arms))
    (research-available ri-man-at-arms)
    (goal do-research 1)
=>
    (research ri-man-at-arms)
)
(defrule
    (not (research-completed ri-long-swordsman))
    (research-available ri-long-swordsman)
    (up-research-status c: ri-long-swordsman < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-long-swordsman)
    (not (research-completed ri-long-swordsman))
    (research-available ri-long-swordsman)
    (goal do-research 1)
=>
    (research ri-long-swordsman)
)
(defrule
    (not (research-completed ri-two-handed-swordsman))
    (research-available ri-two-handed-swordsman)
    (up-research-status c: ri-two-handed-swordsman < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-two-handed-swordsman)
    (not (research-completed ri-two-handed-swordsman))
    (research-available ri-two-handed-swordsman)
    (goal do-research 1)
=>
    (research ri-two-handed-swordsman)
)
(defrule
    (not (research-completed ri-champion))
    (research-available ri-champion)
    (up-research-status c: ri-champion < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-champion)
    (not (research-completed ri-champion))
    (research-available ri-champion)
    (goal do-research 1)
=>
    (research ri-champion)
)
(defrule
    (not (unit-available militiaman-line))
=>
    (up-jump-rule 88)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (up-research-status c: ri-chain-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (goal do-research 1)
=>
    (research ri-chain-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (up-research-status c: ri-chain-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (goal do-research 1)
=>
    (research ri-chain-mail)
)
(defrule
    (not (research-completed ri-plate-mail))
    (research-available ri-plate-mail)
    (up-research-status c: ri-plate-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (not (research-completed ri-plate-mail))
    (research-available ri-plate-mail)
    (goal do-research 1)
=>
    (research ri-plate-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-perfusion)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-perfusion))
    (research-available ri-perfusion)
    (up-research-status c: ri-perfusion < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (not (research-completed ri-perfusion))
    (research-available ri-perfusion)
    (goal do-research 1)
=>
    (research ri-perfusion)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-tracking)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-tracking))
    (research-available ri-tracking)
    (up-research-status c: ri-tracking < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (not (research-completed ri-tracking))
    (research-available ri-tracking)
    (goal do-research 1)
=>
    (research ri-tracking)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-squires)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-squires))
    (research-available ri-squires)
    (up-research-status c: ri-squires < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (not (research-completed ri-squires))
    (research-available ri-squires)
    (goal do-research 1)
=>
    (research ri-squires)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-arson)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-arson))
    (research-available ri-arson)
    (up-research-status c: ri-arson < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (not (research-completed ri-arson))
    (research-available ri-arson)
    (goal do-research 1)
=>
    (research ri-arson)
)
(defrule
    (not (and (current-age >= castle-age) (civilian-population >= expensive-tech-villagers)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-garland-wars)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-garland-wars))
    (research-available ri-garland-wars)
    (up-research-status c: ri-garland-wars < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (not (research-completed ri-garland-wars))
    (research-available ri-garland-wars)
    (goal do-research 1)
=>
    (research ri-garland-wars)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (up-research-status c: ri-blast-furnace < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (goal do-research 1)
=>
    (research ri-blast-furnace)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 100)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal 88 0)
    (disable-self)
)
(defrule
    (can-train militiaman-line)
    (unit-available militiaman-line)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
=>
    (train militiaman-line)
    (set-goal 88 1)
)
(defrule
    (unit-available militiaman-line)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
    (goal 88 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 88 0)
)
(defrule
    (and (goal produce-militia 1) (unit-available militiaman-line))
    (not (goal next-unit militiaman-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-militia 1) (unit-available militiaman-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit spearman-line)
)
(defrule
    (not (and (goal produce-militia 1) (unit-available militiaman-line)))
    (goal next-unit militiaman-line)
=>
    (set-goal next-unit spearman-line)
)
(defrule
    (and (goal produce-spearmen 1) (unit-available spearman-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-spearmen 1) (unit-available spearman-line))
    (not (goal next-unit spearman-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-spearmen 1) (unit-available spearman-line)))
=>
    (up-jump-rule 109)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (and (unit-available spearman-line) (current-age == castle-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-pikeman)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-pikeman))
    (research-available ri-pikeman)
    (up-research-status c: ri-pikeman < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-pikeman)
    (not (research-completed ri-pikeman))
    (research-available ri-pikeman)
    (goal do-research 1)
=>
    (research ri-pikeman)
)
(defrule
    (not (and (unit-available spearman-line) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-halberdier)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-halberdier)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-pikeman)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-pikeman))
    (research-available ri-pikeman)
    (up-research-status c: ri-pikeman < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-pikeman)
    (not (research-completed ri-pikeman))
    (research-available ri-pikeman)
    (goal do-research 1)
=>
    (research ri-pikeman)
)
(defrule
    (not (research-completed ri-halberdier))
    (research-available ri-halberdier)
    (up-research-status c: ri-halberdier < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-halberdier)
    (not (research-completed ri-halberdier))
    (research-available ri-halberdier)
    (goal do-research 1)
=>
    (research ri-halberdier)
)
(defrule
    (not (unit-available spearman-line))
=>
    (up-jump-rule 88)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (up-research-status c: ri-chain-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (goal do-research 1)
=>
    (research ri-chain-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (up-research-status c: ri-chain-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (goal do-research 1)
=>
    (research ri-chain-mail)
)
(defrule
    (not (research-completed ri-plate-mail))
    (research-available ri-plate-mail)
    (up-research-status c: ri-plate-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (not (research-completed ri-plate-mail))
    (research-available ri-plate-mail)
    (goal do-research 1)
=>
    (research ri-plate-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-perfusion)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-perfusion))
    (research-available ri-perfusion)
    (up-research-status c: ri-perfusion < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (not (research-completed ri-perfusion))
    (research-available ri-perfusion)
    (goal do-research 1)
=>
    (research ri-perfusion)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-tracking)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-tracking))
    (research-available ri-tracking)
    (up-research-status c: ri-tracking < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (not (research-completed ri-tracking))
    (research-available ri-tracking)
    (goal do-research 1)
=>
    (research ri-tracking)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-squires)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-squires))
    (research-available ri-squires)
    (up-research-status c: ri-squires < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (not (research-completed ri-squires))
    (research-available ri-squires)
    (goal do-research 1)
=>
    (research ri-squires)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-arson)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-arson))
    (research-available ri-arson)
    (up-research-status c: ri-arson < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (not (research-completed ri-arson))
    (research-available ri-arson)
    (goal do-research 1)
=>
    (research ri-arson)
)
(defrule
    (not (and (current-age >= castle-age) (civilian-population >= expensive-tech-villagers)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-garland-wars)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-garland-wars))
    (research-available ri-garland-wars)
    (up-research-status c: ri-garland-wars < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (not (research-completed ri-garland-wars))
    (research-available ri-garland-wars)
    (goal do-research 1)
=>
    (research ri-garland-wars)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (up-research-status c: ri-blast-furnace < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (goal do-research 1)
=>
    (research ri-blast-furnace)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 100)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal 89 0)
    (disable-self)
)
(defrule
    (can-train spearman-line)
    (unit-available spearman-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-food 1)))
=>
    (train spearman-line)
    (set-goal 89 1)
)
(defrule
    (unit-available spearman-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-food 1)))
    (goal 89 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 89 0)
)
(defrule
    (and (goal produce-spearmen 1) (unit-available spearman-line))
    (not (goal next-unit spearman-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-spearmen 1) (unit-available spearman-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit eagle-warrior-line)
)
(defrule
    (not (and (goal produce-spearmen 1) (unit-available spearman-line)))
    (goal next-unit spearman-line)
=>
    (set-goal next-unit eagle-warrior-line)
)
(defrule
    (and (goal produce-eagles 1) (unit-available eagle-warrior-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-eagles 1) (unit-available eagle-warrior-line))
    (not (goal next-unit eagle-warrior-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-eagles 1) (unit-available eagle-warrior-line)))
=>
    (up-jump-rule 119)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (and (unit-available eagle-warrior-line) (current-age == castle-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-eagle-warrior)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-eagle-warrior))
    (research-available ri-eagle-warrior)
    (up-research-status c: ri-eagle-warrior < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-eagle-warrior)
    (not (research-completed ri-eagle-warrior))
    (research-available ri-eagle-warrior)
    (goal do-research 1)
=>
    (research ri-eagle-warrior)
)
(defrule
    (not (and (unit-available eagle-warrior-line) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-elite-eagle-warrior)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-elite-eagle-warrior)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-eagle-warrior)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-eagle-warrior))
    (research-available ri-eagle-warrior)
    (up-research-status c: ri-eagle-warrior < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-eagle-warrior)
    (not (research-completed ri-eagle-warrior))
    (research-available ri-eagle-warrior)
    (goal do-research 1)
=>
    (research ri-eagle-warrior)
)
(defrule
    (not (research-completed ri-elite-eagle-warrior))
    (research-available ri-elite-eagle-warrior)
    (up-research-status c: ri-elite-eagle-warrior < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-eagle-warrior)
    (not (research-completed ri-elite-eagle-warrior))
    (research-available ri-elite-eagle-warrior)
    (goal do-research 1)
=>
    (research ri-elite-eagle-warrior)
)
(defrule
    (not (and (unit-available eagle-warrior-line) (and (not (current-age == castle-age)) (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-couriers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-couriers))
    (research-available ri-couriers)
    (up-research-status c: ri-couriers < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-couriers)
    (not (research-completed ri-couriers))
    (research-available ri-couriers)
    (goal do-research 1)
=>
    (research ri-couriers)
)
(defrule
    (not (and (unit-available eagle-warrior-line) (and (not (current-age == castle-age)) (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-el-dorado)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-el-dorado))
    (research-available ri-el-dorado)
    (up-research-status c: ri-el-dorado < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-el-dorado)
    (not (research-completed ri-el-dorado))
    (research-available ri-el-dorado)
    (goal do-research 1)
=>
    (research ri-el-dorado)
)
(defrule
    (not (unit-available eagle-warrior-line))
=>
    (up-jump-rule 88)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (up-research-status c: ri-chain-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (goal do-research 1)
=>
    (research ri-chain-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (up-research-status c: ri-chain-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (goal do-research 1)
=>
    (research ri-chain-mail)
)
(defrule
    (not (research-completed ri-plate-mail))
    (research-available ri-plate-mail)
    (up-research-status c: ri-plate-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (not (research-completed ri-plate-mail))
    (research-available ri-plate-mail)
    (goal do-research 1)
=>
    (research ri-plate-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-perfusion)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-perfusion))
    (research-available ri-perfusion)
    (up-research-status c: ri-perfusion < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (not (research-completed ri-perfusion))
    (research-available ri-perfusion)
    (goal do-research 1)
=>
    (research ri-perfusion)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-tracking)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-tracking))
    (research-available ri-tracking)
    (up-research-status c: ri-tracking < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (not (research-completed ri-tracking))
    (research-available ri-tracking)
    (goal do-research 1)
=>
    (research ri-tracking)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-squires)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-squires))
    (research-available ri-squires)
    (up-research-status c: ri-squires < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (not (research-completed ri-squires))
    (research-available ri-squires)
    (goal do-research 1)
=>
    (research ri-squires)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-arson)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-arson))
    (research-available ri-arson)
    (up-research-status c: ri-arson < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (not (research-completed ri-arson))
    (research-available ri-arson)
    (goal do-research 1)
=>
    (research ri-arson)
)
(defrule
    (not (and (current-age >= castle-age) (civilian-population >= expensive-tech-villagers)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-garland-wars)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-garland-wars))
    (research-available ri-garland-wars)
    (up-research-status c: ri-garland-wars < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (not (research-completed ri-garland-wars))
    (research-available ri-garland-wars)
    (goal do-research 1)
=>
    (research ri-garland-wars)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (up-research-status c: ri-blast-furnace < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (goal do-research 1)
=>
    (research ri-blast-furnace)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 100)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal 90 0)
    (disable-self)
)
(defrule
    (can-train eagle-warrior-line)
    (unit-available eagle-warrior-line)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
=>
    (train eagle-warrior-line)
    (set-goal 90 1)
)
(defrule
    (unit-available eagle-warrior-line)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
    (goal 90 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 90 0)
)
(defrule
    (and (goal produce-eagles 1) (unit-available eagle-warrior-line))
    (not (goal next-unit eagle-warrior-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-eagles 1) (unit-available eagle-warrior-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit scout-cavalry-line)
)
(defrule
    (not (and (goal produce-eagles 1) (unit-available eagle-warrior-line)))
    (goal next-unit eagle-warrior-line)
=>
    (set-goal next-unit scout-cavalry-line)
)
(defrule
    (and (goal produce-scouts 1) (unit-available scout-cavalry-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-scouts 1) (unit-available scout-cavalry-line))
    (not (goal next-unit scout-cavalry-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-scouts 1) (unit-available scout-cavalry-line)))
=>
    (up-jump-rule 100)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (and (unit-available scout-cavalry-line) (current-age == castle-age)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-light-cavalry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-light-cavalry))
    (research-available ri-light-cavalry)
    (up-research-status c: ri-light-cavalry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-light-cavalry)
    (not (research-completed ri-light-cavalry))
    (research-available ri-light-cavalry)
    (goal do-research 1)
=>
    (research ri-light-cavalry)
)
(defrule
    (not (and (unit-available scout-cavalry-line) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-hussar)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-hussar))
    (research-available ri-hussar)
    (up-research-status c: ri-hussar < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-hussar)
    (not (research-completed ri-hussar))
    (research-available ri-hussar)
    (goal do-research 1)
=>
    (research ri-hussar)
)
(defrule
    (not (unit-available scout-cavalry-line))
=>
    (up-jump-rule 78)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (up-research-status c: ri-plate-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (goal do-research 1)
=>
    (research ri-plate-barding)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (up-research-status c: ri-bloodlines < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (goal do-research 1)
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (up-research-status c: ri-husbandry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (goal do-research 1)
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (up-research-status c: ri-blast-furnace < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (goal do-research 1)
=>
    (research ri-blast-furnace)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 100)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
)
(defrule
    (true)
=>
    (set-goal 92 0)
    (disable-self)
)
(defrule
    (can-train scout-cavalry-line)
    (unit-available scout-cavalry-line)
    (and (goal produce-units 1) (goal enough-food 1))
=>
    (train scout-cavalry-line)
    (set-goal 92 1)
)
(defrule
    (unit-available scout-cavalry-line)
    (and (goal produce-units 1) (goal enough-food 1))
    (goal 92 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 92 0)
)
(defrule
    (and (goal produce-scouts 1) (unit-available scout-cavalry-line))
    (not (goal next-unit scout-cavalry-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-scouts 1) (unit-available scout-cavalry-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit knight-line)
)
(defrule
    (not (and (goal produce-scouts 1) (unit-available scout-cavalry-line)))
    (goal next-unit scout-cavalry-line)
=>
    (set-goal next-unit knight-line)
)
(defrule
    (and (goal produce-knights 1) (unit-available knight-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-knights 1) (unit-available knight-line))
    (not (goal next-unit knight-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-knights 1) (unit-available knight-line)))
=>
    (up-jump-rule 107)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (and (unit-available knight-line) (and (current-age == imperial-age) (civilian-population >= extortionate-tech-villagers))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-paladin)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (not (research-completed ri-paladin)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-cavalier)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-cavalier))
    (research-available ri-cavalier)
    (up-research-status c: ri-cavalier < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-cavalier)
    (not (research-completed ri-cavalier))
    (research-available ri-cavalier)
    (goal do-research 1)
=>
    (research ri-cavalier)
)
(defrule
    (not (research-completed ri-paladin))
    (research-available ri-paladin)
    (up-research-status c: ri-paladin < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-paladin)
    (not (research-completed ri-paladin))
    (research-available ri-paladin)
    (goal do-research 1)
=>
    (research ri-paladin)
)
(defrule
    (not (and (unit-available knight-line) (and (current-age == imperial-age) (not (civilian-population >= extortionate-tech-villagers)))))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-cavalier)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-cavalier))
    (research-available ri-cavalier)
    (up-research-status c: ri-cavalier < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-cavalier)
    (not (research-completed ri-cavalier))
    (research-available ri-cavalier)
    (goal do-research 1)
=>
    (research ri-cavalier)
)
(defrule
    (not (unit-available knight-line))
=>
    (up-jump-rule 78)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (up-research-status c: ri-plate-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (goal do-research 1)
=>
    (research ri-plate-barding)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (up-research-status c: ri-bloodlines < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (goal do-research 1)
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (up-research-status c: ri-husbandry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (goal do-research 1)
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (up-research-status c: ri-blast-furnace < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (goal do-research 1)
=>
    (research ri-blast-furnace)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 100)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
)
(defrule
    (true)
=>
    (set-goal 93 0)
    (disable-self)
)
(defrule
    (can-train knight-line)
    (unit-available knight-line)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
=>
    (train knight-line)
    (set-goal 93 1)
)
(defrule
    (unit-available knight-line)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
    (goal 93 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 93 0)
)
(defrule
    (and (goal produce-knights 1) (unit-available knight-line))
    (not (goal next-unit knight-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-knights 1) (unit-available knight-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit camel-line)
)
(defrule
    (not (and (goal produce-knights 1) (unit-available knight-line)))
    (goal next-unit knight-line)
=>
    (set-goal next-unit camel-line)
)
(defrule
    (and (goal produce-camels 1) (unit-available camel-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-camels 1) (unit-available camel-line))
    (not (goal next-unit camel-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-camels 1) (unit-available camel-line)))
=>
    (up-jump-rule 107)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (and (unit-available camel-line) (current-age == imperial-age)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-heavy-camel)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-heavy-camel))
    (research-available ri-heavy-camel)
    (up-research-status c: ri-heavy-camel < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-camel)
    (not (research-completed ri-heavy-camel))
    (research-available ri-heavy-camel)
    (goal do-research 1)
=>
    (research ri-heavy-camel)
)
(defrule
    (not (and (unit-available camel-line) (current-age == imperial-age)))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-imperial-camel)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (not (research-completed ri-imperial-camel)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-heavy-camel)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-heavy-camel))
    (research-available ri-heavy-camel)
    (up-research-status c: ri-heavy-camel < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-camel)
    (not (research-completed ri-heavy-camel))
    (research-available ri-heavy-camel)
    (goal do-research 1)
=>
    (research ri-heavy-camel)
)
(defrule
    (not (research-completed ri-imperial-camel))
    (research-available ri-imperial-camel)
    (up-research-status c: ri-imperial-camel < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-imperial-camel)
    (not (research-completed ri-imperial-camel))
    (research-available ri-imperial-camel)
    (goal do-research 1)
=>
    (research ri-imperial-camel)
)
(defrule
    (not (unit-available camel-line))
=>
    (up-jump-rule 78)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (up-research-status c: ri-plate-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (goal do-research 1)
=>
    (research ri-plate-barding)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (up-research-status c: ri-bloodlines < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (goal do-research 1)
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (up-research-status c: ri-husbandry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (goal do-research 1)
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (up-research-status c: ri-blast-furnace < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (goal do-research 1)
=>
    (research ri-blast-furnace)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 100)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
)
(defrule
    (true)
=>
    (set-goal 94 0)
    (disable-self)
)
(defrule
    (can-train camel-line)
    (unit-available camel-line)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
=>
    (train camel-line)
    (set-goal 94 1)
)
(defrule
    (unit-available camel-line)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
    (goal 94 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 94 0)
)
(defrule
    (and (goal produce-camels 1) (unit-available camel-line))
    (not (goal next-unit camel-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-camels 1) (unit-available camel-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit battle-elephant-line)
)
(defrule
    (not (and (goal produce-camels 1) (unit-available camel-line)))
    (goal next-unit camel-line)
=>
    (set-goal next-unit battle-elephant-line)
)
(defrule
    (and (goal produce-battle-elephants 1) (unit-available battle-elephant-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-battle-elephants 1) (unit-available battle-elephant-line))
    (not (goal next-unit battle-elephant-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-battle-elephants 1) (unit-available battle-elephant-line)))
=>
    (up-jump-rule 93)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (and (unit-available battle-elephant-line) (current-age == imperial-age)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-elite-battle-elephant)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-elite-battle-elephant))
    (research-available ri-elite-battle-elephant)
    (up-research-status c: ri-elite-battle-elephant < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-battle-elephant)
    (not (research-completed ri-elite-battle-elephant))
    (research-available ri-elite-battle-elephant)
    (goal do-research 1)
=>
    (research ri-elite-battle-elephant)
)
(defrule
    (not (unit-available battle-elephant-line))
=>
    (up-jump-rule 78)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (up-research-status c: ri-plate-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (goal do-research 1)
=>
    (research ri-plate-barding)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (up-research-status c: ri-bloodlines < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (goal do-research 1)
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (up-research-status c: ri-husbandry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (goal do-research 1)
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (up-research-status c: ri-blast-furnace < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (goal do-research 1)
=>
    (research ri-blast-furnace)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 100)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
)
(defrule
    (true)
=>
    (set-goal 95 0)
    (disable-self)
)
(defrule
    (can-train battle-elephant-line)
    (unit-available battle-elephant-line)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
=>
    (train battle-elephant-line)
    (set-goal 95 1)
)
(defrule
    (unit-available battle-elephant-line)
    (and (goal produce-units 1) (and (goal enough-food 1) (goal enough-gold 1)))
    (goal 95 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 95 0)
)
(defrule
    (and (goal produce-battle-elephants 1) (unit-available battle-elephant-line))
    (not (goal next-unit battle-elephant-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-battle-elephants 1) (unit-available battle-elephant-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit battering-ram-line)
)
(defrule
    (not (and (goal produce-battle-elephants 1) (unit-available battle-elephant-line)))
    (goal next-unit battle-elephant-line)
=>
    (set-goal next-unit battering-ram-line)
)
(defrule
    (and (goal produce-battering-rams 1) (unit-available battering-ram-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-battering-rams 1) (unit-available battering-ram-line))
    (not (goal next-unit battering-ram-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-battering-rams 1) (unit-available battering-ram-line)))
=>
    (up-jump-rule 46)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (and (unit-available battering-ram-line) (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-siege-ram)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (not (research-completed ri-siege-ram)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-capped-ram)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (research-completed ri-capped-ram))
    (research-available ri-capped-ram)
    (up-research-status c: ri-capped-ram < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-capped-ram)
    (not (research-completed ri-capped-ram))
    (research-available ri-capped-ram)
    (goal do-research 1)
=>
    (research ri-capped-ram)
)
(defrule
    (not (research-completed ri-siege-ram))
    (research-available ri-siege-ram)
    (up-research-status c: ri-siege-ram < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-ram)
    (not (research-completed ri-siege-ram))
    (research-available ri-siege-ram)
    (goal do-research 1)
=>
    (research ri-siege-ram)
)
(defrule
    (not (and (unit-available battering-ram-line) (and (current-age == imperial-age) (not (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-capped-ram)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (research-completed ri-capped-ram))
    (research-available ri-capped-ram)
    (up-research-status c: ri-capped-ram < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-capped-ram)
    (not (research-completed ri-capped-ram))
    (research-available ri-capped-ram)
    (goal do-research 1)
=>
    (research ri-capped-ram)
)
(defrule
    (not (unit-available battering-ram-line))
=>
    (up-jump-rule 16)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (up-research-status c: ri-siege-engineers < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (goal do-research 1)
=>
    (research ri-siege-engineers)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 100)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal 97 0)
    (disable-self)
)
(defrule
    (can-train battering-ram-line)
    (unit-available battering-ram-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (unit-type-count-total battering-ram-line < max-rams)
=>
    (train battering-ram-line)
    (set-goal 97 1)
)
(defrule
    (unit-available battering-ram-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (unit-type-count-total battering-ram-line < max-rams)
    (goal 97 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 97 0)
)
(defrule
    (unit-available battering-ram-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (not (unit-type-count-total battering-ram-line < max-rams))
=>
    (set-goal trained-unit 1)
)
(defrule
    (and (goal produce-battering-rams 1) (unit-available battering-ram-line))
    (not (goal next-unit battering-ram-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-battering-rams 1) (unit-available battering-ram-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit mangonel-line)
)
(defrule
    (not (and (goal produce-battering-rams 1) (unit-available battering-ram-line)))
    (goal next-unit battering-ram-line)
=>
    (set-goal next-unit mangonel-line)
)
(defrule
    (and (goal produce-mangonels 1) (unit-available mangonel-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-mangonels 1) (unit-available mangonel-line))
    (not (goal next-unit mangonel-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-mangonels 1) (unit-available mangonel-line)))
=>
    (up-jump-rule 45)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (and (unit-available mangonel-line) (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers))))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-onager)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (research-completed ri-onager))
    (research-available ri-onager)
    (up-research-status c: ri-onager < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-onager)
    (not (research-completed ri-onager))
    (research-available ri-onager)
    (goal do-research 1)
=>
    (research ri-onager)
)
(defrule
    (not (and (unit-available mangonel-line) (and (current-age == imperial-age) (and (not (civilian-population >= expensive-tech-villagers)) (civilian-population >= extortionate-tech-villagers)))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-siege-onager)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (not (research-completed ri-siege-onager)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-onager)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (research-completed ri-onager))
    (research-available ri-onager)
    (up-research-status c: ri-onager < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-onager)
    (not (research-completed ri-onager))
    (research-available ri-onager)
    (goal do-research 1)
=>
    (research ri-onager)
)
(defrule
    (not (research-completed ri-siege-onager))
    (research-available ri-siege-onager)
    (up-research-status c: ri-siege-onager < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-onager)
    (not (research-completed ri-siege-onager))
    (research-available ri-siege-onager)
    (goal do-research 1)
=>
    (research ri-siege-onager)
)
(defrule
    (not (unit-available mangonel-line))
=>
    (up-jump-rule 16)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (up-research-status c: ri-siege-engineers < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (goal do-research 1)
=>
    (research ri-siege-engineers)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 100)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal 98 0)
    (disable-self)
)
(defrule
    (can-train mangonel-line)
    (unit-available mangonel-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
=>
    (train mangonel-line)
    (set-goal 98 1)
)
(defrule
    (unit-available mangonel-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (goal 98 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 98 0)
)
(defrule
    (and (goal produce-mangonels 1) (unit-available mangonel-line))
    (not (goal next-unit mangonel-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-mangonels 1) (unit-available mangonel-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit scorpion-line)
)
(defrule
    (not (and (goal produce-mangonels 1) (unit-available mangonel-line)))
    (goal next-unit mangonel-line)
=>
    (set-goal next-unit scorpion-line)
)
(defrule
    (and (goal produce-scorpions 1) (unit-available scorpion-line))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-scorpions 1) (unit-available scorpion-line))
    (not (goal next-unit scorpion-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-scorpions 1) (unit-available scorpion-line)))
=>
    (up-jump-rule 31)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (and (unit-available scorpion-line) (and (current-age == imperial-age) (civilian-population >= extortionate-tech-villagers))))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-heavy-scorpion)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (research-completed ri-heavy-scorpion))
    (research-available ri-heavy-scorpion)
    (up-research-status c: ri-heavy-scorpion < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-scorpion)
    (not (research-completed ri-heavy-scorpion))
    (research-available ri-heavy-scorpion)
    (goal do-research 1)
=>
    (research ri-heavy-scorpion)
)
(defrule
    (not (unit-available scorpion-line))
=>
    (up-jump-rule 16)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (up-research-status c: ri-siege-engineers < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (goal do-research 1)
=>
    (research ri-siege-engineers)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 100)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal 99 0)
    (disable-self)
)
(defrule
    (can-train scorpion-line)
    (unit-available scorpion-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
=>
    (train scorpion-line)
    (set-goal 99 1)
)
(defrule
    (unit-available scorpion-line)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (goal 99 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 99 0)
)
(defrule
    (and (goal produce-scorpions 1) (unit-available scorpion-line))
    (not (goal next-unit scorpion-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-scorpions 1) (unit-available scorpion-line))
    (goal trained-unit 1)
=>
    (set-goal next-unit bombard-cannon)
)
(defrule
    (not (and (goal produce-scorpions 1) (unit-available scorpion-line)))
    (goal next-unit scorpion-line)
=>
    (set-goal next-unit bombard-cannon)
)
(defrule
    (and (goal produce-bombard-cannons 1) (unit-available bombard-cannon))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-bombard-cannons 1) (unit-available bombard-cannon))
    (not (goal next-unit bombard-cannon))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-bombard-cannons 1) (unit-available bombard-cannon)))
=>
    (up-jump-rule 24)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (not (unit-available bombard-cannon))
=>
    (up-jump-rule 16)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (up-research-status c: ri-siege-engineers < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (goal do-research 1)
=>
    (research ri-siege-engineers)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 100)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal 100 0)
    (disable-self)
)
(defrule
    (can-train bombard-cannon)
    (unit-available bombard-cannon)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
=>
    (train bombard-cannon)
    (set-goal 100 1)
)
(defrule
    (unit-available bombard-cannon)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (goal 100 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 100 0)
)
(defrule
    (and (goal produce-bombard-cannons 1) (unit-available bombard-cannon))
    (not (goal next-unit bombard-cannon))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-bombard-cannons 1) (unit-available bombard-cannon))
    (goal trained-unit 1)
=>
    (set-goal next-unit trebuchet)
)
(defrule
    (not (and (goal produce-bombard-cannons 1) (unit-available bombard-cannon)))
    (goal next-unit bombard-cannon)
=>
    (set-goal next-unit trebuchet)
)
(defrule
    (and (goal produce-trebuchets 1) (unit-available trebuchet))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-trebuchets 1) (unit-available trebuchet))
    (not (goal next-unit trebuchet))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-trebuchets 1) (unit-available trebuchet)))
=>
    (up-jump-rule 23)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (unit-available trebuchet))
=>
    (up-jump-rule 16)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (up-research-status c: ri-siege-engineers < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (goal do-research 1)
=>
    (research ri-siege-engineers)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 1)
    (building-type-count-total siege-workshop == 0)
    (building-type-count blacksmith >= 1)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (building-type-count-total siege-workshop < 100)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal 101 0)
    (disable-self)
)
(defrule
    (can-train trebuchet)
    (unit-available trebuchet)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (unit-type-count-total trebuchet-set < max-trebs)
=>
    (train trebuchet)
    (set-goal 101 1)
)
(defrule
    (unit-available trebuchet)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (unit-type-count-total trebuchet-set < max-trebs)
    (goal 101 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 101 0)
)
(defrule
    (unit-available trebuchet)
    (and (goal produce-units 1) (and (goal enough-wood 1) (goal enough-gold 1)))
    (not (unit-type-count-total trebuchet-set < max-trebs))
=>
    (set-goal trained-unit 1)
)
(defrule
    (and (goal produce-trebuchets 1) (unit-available trebuchet))
    (not (goal next-unit trebuchet))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-trebuchets 1) (unit-available trebuchet))
    (goal trained-unit 1)
=>
    (set-goal next-unit my-unique-unit)
)
(defrule
    (not (and (goal produce-trebuchets 1) (unit-available trebuchet)))
    (goal next-unit trebuchet)
=>
    (set-goal next-unit my-unique-unit)
)
(defrule
    (and (goal produce-unique-units 1) (unit-available my-unique-unit))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-unique-units 1) (unit-available my-unique-unit))
    (not (goal next-unit my-unique-unit))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-unique-units 1) (unit-available my-unique-unit)))
=>
    (up-jump-rule 480)
)
(defrule
    (true)
=>
    (set-goal castle-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total castle castle-count)
)
(defrule
    (not (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (building-type-count-total market < 1)
    (building-type-count-total market == 0)
    (wood-amount >= 200)
=>
    (build market)
)
(defrule
    (wood-amount >= 400)
    (can-sell-commodity wood)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
    (building-type-count-total castle == 0)
=>
    (sell-commodity wood)
)
(defrule
    (food-amount >= 400)
    (can-sell-commodity food)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
    (building-type-count-total castle == 0)
=>
    (sell-commodity food)
)
(defrule
    (stone-amount < 650)
    (can-buy-commodity stone)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
    (building-type-count-total castle == 0)
=>
    (buy-commodity stone)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 100)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
=>
    (build castle)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
    (strategic-number sn-stone-gatherer-percentage < 8)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
    (strategic-number sn-stone-gatherer-percentage < 8)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-gold-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
    (strategic-number sn-stone-gatherer-percentage < 8)
=>
    (up-modify-sn sn-gold-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (not (and (unit-available my-unique-unit) (and (current-age == imperial-age) (and (or (not (civ-selected byzantine)) (civilian-population >= extortionate-tech-villagers)) (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed my-unique-unit-upgrade)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed my-unique-unit-upgrade))
    (research-available my-unique-unit-upgrade)
    (up-research-status c: my-unique-unit-upgrade < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research my-unique-unit-upgrade)
    (not (research-completed my-unique-unit-upgrade))
    (research-available my-unique-unit-upgrade)
    (goal do-research 1)
=>
    (research my-unique-unit-upgrade)
)
(defrule
    (unit-available my-unique-unit)
=>
    (set-goal old-desired-military-buildings-per-type 0)
    (disable-self)
)
(defrule
    (unit-available my-unique-unit)
=>
    (up-modify-goal old-desired-military-buildings-per-type g:= desired-military-buildings-per-type)
    (set-goal desired-military-buildings-per-type 0)
)
(defrule
    (not (and (unit-available my-unique-unit) (or (civ-selected aztec) (or (civ-selected celtic) (or (civ-selected ethiopian) (or (civ-selected frankish) (or (civ-selected
gothic) (or (civ-selected incan) (or (civ-selected japanese) (or (civ-selected malay) (or (civ-selected malian) (or (civ-selected teutonic) (civ-selected viking)))))))))))))
=>
    (up-jump-rule 88)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (up-research-status c: ri-chain-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (goal do-research 1)
=>
    (research ri-chain-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (up-research-status c: ri-scale-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (not (research-completed ri-scale-mail))
    (research-available ri-scale-mail)
    (goal do-research 1)
=>
    (research ri-scale-mail)
)
(defrule
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (up-research-status c: ri-chain-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (not (research-completed ri-chain-mail))
    (research-available ri-chain-mail)
    (goal do-research 1)
=>
    (research ri-chain-mail)
)
(defrule
    (not (research-completed ri-plate-mail))
    (research-available ri-plate-mail)
    (up-research-status c: ri-plate-mail < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (not (research-completed ri-plate-mail))
    (research-available ri-plate-mail)
    (goal do-research 1)
=>
    (research ri-plate-mail)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-perfusion)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-perfusion))
    (research-available ri-perfusion)
    (up-research-status c: ri-perfusion < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (not (research-completed ri-perfusion))
    (research-available ri-perfusion)
    (goal do-research 1)
=>
    (research ri-perfusion)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-tracking)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-tracking))
    (research-available ri-tracking)
    (up-research-status c: ri-tracking < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (not (research-completed ri-tracking))
    (research-available ri-tracking)
    (goal do-research 1)
=>
    (research ri-tracking)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-squires)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-squires))
    (research-available ri-squires)
    (up-research-status c: ri-squires < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (not (research-completed ri-squires))
    (research-available ri-squires)
    (goal do-research 1)
=>
    (research ri-squires)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-arson)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (research-completed ri-arson))
    (research-available ri-arson)
    (up-research-status c: ri-arson < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (not (research-completed ri-arson))
    (research-available ri-arson)
    (goal do-research 1)
=>
    (research ri-arson)
)
(defrule
    (not (and (current-age >= castle-age) (civilian-population >= expensive-tech-villagers)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-garland-wars)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-garland-wars))
    (research-available ri-garland-wars)
    (up-research-status c: ri-garland-wars < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (not (research-completed ri-garland-wars))
    (research-available ri-garland-wars)
    (goal do-research 1)
=>
    (research ri-garland-wars)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (up-research-status c: ri-blast-furnace < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (goal do-research 1)
=>
    (research ri-blast-furnace)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 100)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
)
(defrule
    (not (and (unit-available my-unique-unit) (or (civ-selected berbers) (or (civ-selected indian) (or (civ-selected korean) (or (civ-selected mongol) (civ-selected burmese)))))))
=>
    (up-jump-rule 102)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (up-research-status c: ri-bracer < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (goal do-research 1)
=>
    (research ri-bracer)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (up-research-status c: ri-ring-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (goal do-research 1)
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-thumb-ring)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-thumb-ring))
    (research-available ri-thumb-ring)
    (up-research-status c: ri-thumb-ring < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
    (research-available ri-thumb-ring)
    (goal do-research 1)
=>
    (research ri-thumb-ring)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (up-research-status c: ri-ballistics < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (goal do-research 1)
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 100)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (up-research-status c: ri-bloodlines < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (goal do-research 1)
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (up-research-status c: ri-husbandry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (goal do-research 1)
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-parthian-tactics)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-parthian-tactics))
    (research-available ri-parthian-tactics)
    (up-research-status c: ri-parthian-tactics < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-parthian-tactics)
    (not (research-completed ri-parthian-tactics))
    (research-available ri-parthian-tactics)
    (goal do-research 1)
=>
    (research ri-parthian-tactics)
)
(defrule
    (not (and (unit-available my-unique-unit) (or (civ-selected briton) (or (civ-selected chinese) (or (civ-selected italian) (or (civ-selected mayan) (civ-selected vietnamese)))))))
=>
    (up-jump-rule 81)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (up-research-status c: ri-bracer < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (goal do-research 1)
=>
    (research ri-bracer)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (up-research-status c: ri-ring-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (goal do-research 1)
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (up-research-status c: ri-chemistry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (not (research-completed ri-chemistry))
    (research-available ri-chemistry)
    (goal do-research 1)
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-thumb-ring)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (building-type-count-total archery-range == 0) (up-research-status c: feudal-age >= research-pending)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 1)
    (building-type-count-total archery-range == 0)
    (building-type-count barracks >= 1)
=>
    (build archery-range)
)
(defrule
    (not (research-completed ri-thumb-ring))
    (research-available ri-thumb-ring)
    (up-research-status c: ri-thumb-ring < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
    (research-available ri-thumb-ring)
    (goal do-research 1)
=>
    (research ri-thumb-ring)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (up-research-status c: ri-ballistics < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (goal do-research 1)
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (building-type-count-total archery-range < 100)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (not (and (unit-available my-unique-unit) (or (civ-selected byzantine) (or (civ-selected hun) (or (civ-selected magyar) (or (civ-selected persian) (or (civ-selected saracen) (civ-selected slavic))))))))
=>
    (up-jump-rule 78)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (up-research-status c: ri-plate-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (goal do-research 1)
=>
    (research ri-plate-barding)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (up-research-status c: ri-bloodlines < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (goal do-research 1)
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (up-research-status c: ri-husbandry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (goal do-research 1)
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (and (not (current-age == feudal-age)) (current-age == castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (up-research-status c: ri-forging < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (not (research-completed ri-forging))
    (research-available ri-forging)
    (goal do-research 1)
=>
    (research ri-forging)
)
(defrule
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (up-research-status c: ri-iron-casting < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (not (research-completed ri-iron-casting))
    (research-available ri-iron-casting)
    (goal do-research 1)
=>
    (research ri-iron-casting)
)
(defrule
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (up-research-status c: ri-blast-furnace < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
    (research-available ri-blast-furnace)
    (goal do-research 1)
=>
    (research ri-blast-furnace)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 100)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
)
(defrule
    (not (and (unit-available my-unique-unit) (and (civ-selected briton) (and (current-age >= castle-age) (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-yeomen)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-yeomen))
    (research-available ri-yeomen)
    (up-research-status c: ri-yeomen < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-yeomen)
    (not (research-completed ri-yeomen))
    (research-available ri-yeomen)
    (goal do-research 1)
=>
    (research ri-yeomen)
)
(defrule
    (not (and (unit-available my-unique-unit) (and (or (civ-selected viking) (civ-selected byzantine)) (and (current-age >= imperial-age) (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-beserkergang)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-beserkergang))
    (research-available ri-beserkergang)
    (up-research-status c: ri-beserkergang < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-beserkergang)
    (not (research-completed ri-beserkergang))
    (research-available ri-beserkergang)
    (goal do-research 1)
=>
    (research ri-beserkergang)
)
(defrule
    (not (and (unit-available my-unique-unit) (and (or (civ-selected viking) (civ-selected byzantine)) (and (current-age >= imperial-age) (civilian-population >= expensive-tech-villagers)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-logistica)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-logistica))
    (research-available ri-logistica)
    (up-research-status c: ri-logistica < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-logistica)
    (not (research-completed ri-logistica))
    (research-available ri-logistica)
    (goal do-research 1)
=>
    (research ri-logistica)
)
(defrule
    (unit-available my-unique-unit)
=>
    (up-modify-goal desired-military-buildings-per-type g:= old-desired-military-buildings-per-type)
)
(defrule
    (not (and (unit-available my-unique-unit) (civ-selected portuguese)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (up-research-status c: ri-siege-engineers < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (goal do-research 1)
=>
    (research ri-siege-engineers)
)
(defrule
    (not (and (unit-available my-unique-unit) (civ-selected khmer)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (up-research-status c: ri-siege-engineers < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
    (research-available ri-siege-engineers)
    (goal do-research 1)
=>
    (research ri-siege-engineers)
)
(defrule
    (not (and (unit-available my-unique-unit) (civ-selected khmer)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (up-research-status c: ri-ballistics < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (not (research-completed ri-ballistics))
    (research-available ri-ballistics)
    (goal do-research 1)
=>
    (research ri-ballistics)
)
(defrule
    (not (and (unit-available my-unique-unit) (civ-selected khmer)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (up-research-status c: ri-husbandry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (goal do-research 1)
=>
    (research ri-husbandry)
)
(defrule
    (not (and (unit-available my-unique-unit) (civ-selected khmer)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (up-research-status c: ri-bloodlines < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (goal do-research 1)
=>
    (research ri-bloodlines)
)
(defrule
    (not (and (unit-available my-unique-unit) (civ-selected khmer)))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (up-research-status c: ri-scale-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (not (research-completed ri-scale-barding))
    (research-available ri-scale-barding)
    (goal do-research 1)
=>
    (research ri-scale-barding)
)
(defrule
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (up-research-status c: ri-chain-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (not (research-completed ri-chain-barding))
    (research-available ri-chain-barding)
    (goal do-research 1)
=>
    (research ri-chain-barding)
)
(defrule
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (up-research-status c: ri-plate-barding < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (not (research-completed ri-plate-barding))
    (research-available ri-plate-barding)
    (goal do-research 1)
=>
    (research ri-plate-barding)
)
(defrule
    (not (and (unit-available my-unique-unit) (civ-selected spanish)))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (up-research-status c: ri-ring-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (goal do-research 1)
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (unit-available my-unique-unit) (civ-selected spanish)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (up-research-status c: ri-husbandry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (not (research-completed ri-husbandry))
    (research-available ri-husbandry)
    (goal do-research 1)
=>
    (research ri-husbandry)
)
(defrule
    (not (and (unit-available my-unique-unit) (civ-selected spanish)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (building-type-count-total stable < 1)
    (building-type-count-total stable == 0)
    (building-type-count barracks >= 1)
=>
    (build stable)
)
(defrule
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (up-research-status c: ri-bloodlines < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (not (research-completed ri-bloodlines))
    (research-available ri-bloodlines)
    (goal do-research 1)
=>
    (research ri-bloodlines)
)
(defrule
    (not (and (unit-available my-unique-unit) (civ-selected turkish)))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (up-research-status c: ri-padded-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
    (research-available ri-padded-archer-armor)
    (goal do-research 1)
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (up-research-status c: ri-leather-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
    (research-available ri-leather-archer-armor)
    (goal do-research 1)
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (up-research-status c: ri-ring-archer-armor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
    (research-available ri-ring-archer-armor)
    (goal do-research 1)
=>
    (research ri-ring-archer-armor)
)
(defrule
    (true)
=>
    (set-goal 104 0)
    (disable-self)
)
(defrule
    (can-train my-unique-unit)
    (unit-available my-unique-unit)
    (and (goal produce-units 1) (and (goal enough-wood 1) (and (goal enough-food 1) (goal enough-gold 1))))
    (or (building-type-count castle >= 2) (goal desired-units 1))
=>
    (train my-unique-unit)
    (set-goal 104 1)
)
(defrule
    (unit-available my-unique-unit)
    (and (goal produce-units 1) (and (goal enough-wood 1) (and (goal enough-food 1) (goal enough-gold 1))))
    (or (building-type-count castle >= 2) (goal desired-units 1))
    (goal 104 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 104 0)
)
(defrule
    (unit-available my-unique-unit)
    (and (goal produce-units 1) (and (goal enough-wood 1) (and (goal enough-food 1) (goal enough-gold 1))))
    (not (or (building-type-count castle >= 2) (goal desired-units 1)))
=>
    (set-goal trained-unit 1)
)
(defrule
    (and (goal produce-unique-units 1) (unit-available my-unique-unit))
    (not (goal next-unit my-unique-unit))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-unique-units 1) (unit-available my-unique-unit))
    (goal trained-unit 1)
=>
    (set-goal next-unit monk)
)
(defrule
    (not (and (goal produce-unique-units 1) (unit-available my-unique-unit)))
    (goal next-unit my-unique-unit)
=>
    (set-goal next-unit monk)
)
(defrule
    (and (goal produce-monks 1) (unit-available monk))
=>
    (set-goal trained-unit 0)
)
(defrule
    (and (goal produce-monks 1) (unit-available monk))
    (not (goal next-unit monk))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-monks 1) (unit-available monk)))
=>
    (up-jump-rule 43)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-theocracy)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (research-completed ri-theocracy))
    (research-available ri-theocracy)
    (up-research-status c: ri-theocracy < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-theocracy)
    (not (research-completed ri-theocracy))
    (research-available ri-theocracy)
    (goal do-research 1)
=>
    (research ri-theocracy)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-illumination)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (research-completed ri-illumination))
    (research-available ri-illumination)
    (up-research-status c: ri-illumination < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-illumination)
    (not (research-completed ri-illumination))
    (research-available ri-illumination)
    (goal do-research 1)
=>
    (research ri-illumination)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-block-printing)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (research-completed ri-block-printing))
    (research-available ri-block-printing)
    (up-research-status c: ri-block-printing < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-block-printing)
    (not (research-completed ri-block-printing))
    (research-available ri-block-printing)
    (goal do-research 1)
=>
    (research ri-block-printing)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-redemption)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (research-completed ri-redemption))
    (research-available ri-redemption)
    (up-research-status c: ri-redemption < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-redemption)
    (not (research-completed ri-redemption))
    (research-available ri-redemption)
    (goal do-research 1)
=>
    (research ri-redemption)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-atonement)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (research-completed ri-atonement))
    (research-available ri-atonement)
    (up-research-status c: ri-atonement < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-atonement)
    (not (research-completed ri-atonement))
    (research-available ri-atonement)
    (goal do-research 1)
=>
    (research ri-atonement)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-sanctity)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (research-completed ri-sanctity))
    (research-available ri-sanctity)
    (up-research-status c: ri-sanctity < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-sanctity)
    (not (research-completed ri-sanctity))
    (research-available ri-sanctity)
    (goal do-research 1)
=>
    (research ri-sanctity)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fervor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (research-completed ri-fervor))
    (research-available ri-fervor)
    (up-research-status c: ri-fervor < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fervor)
    (not (research-completed ri-fervor))
    (research-available ri-fervor)
    (goal do-research 1)
=>
    (research ri-fervor)
)
(defrule
    (unit-available monk)
=>
    (set-goal monastery-count 0)
    (disable-self)
)
(defrule
    (unit-available monk)
=>
    (up-get-fact building-type-count-total monastery monastery-count)
)
(defrule
    (can-build monastery)
    (building-type-count-total monastery < 100)
    (unit-available monk)
    (up-compare-goal monastery-count g:< desired-military-buildings-per-type)
=>
    (build monastery)
)
(defrule
    (true)
=>
    (set-goal 106 0)
    (disable-self)
)
(defrule
    (can-train monk)
    (unit-available monk)
    (and (goal produce-units 1) (goal enough-gold 1))
=>
    (train monk)
    (set-goal 106 1)
)
(defrule
    (unit-available monk)
    (and (goal produce-units 1) (goal enough-gold 1))
    (goal 106 1)
=>
    (set-goal trained-unit 1)
)
(defrule
    (true)
=>
    (set-goal 106 0)
)
(defrule
    (and (goal produce-monks 1) (unit-available monk))
    (not (goal next-unit monk))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-monks 1) (unit-available monk))
    (goal trained-unit 1)
=>
    (set-goal next-unit archer-line)
)
(defrule
    (not (and (goal produce-monks 1) (unit-available monk)))
    (goal next-unit monk)
=>
    (set-goal next-unit archer-line)
)
(defrule
    (true)
=>
    (generate-random-number select-random-d62d1716-3f36-485b-9fd8-57ae99ed70e0)
    (set-goal 107 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 107 0)
=>
    (set-goal 107 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 107 0)
=>
    (set-goal 107 2)
    (disable-self)
)
(defrule
    (not (goal 107 1))
=>
    (up-jump-rule 61)
)
(defrule
    (not (and (current-age >= imperial-age) (building-type-count castle >= 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-hoardings)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (research-completed ri-hoardings))
    (research-available ri-hoardings)
    (up-research-status c: ri-hoardings < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-hoardings)
    (not (research-completed ri-hoardings))
    (research-available ri-hoardings)
    (goal do-research 1)
=>
    (research ri-hoardings)
)
(defrule
    (not (and (current-age >= castle-age) (current-age == imperial-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-architecture)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (not (research-completed ri-architecture)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-masonry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-masonry))
    (research-available ri-masonry)
    (up-research-status c: ri-masonry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-masonry)
    (not (research-completed ri-masonry))
    (research-available ri-masonry)
    (goal do-research 1)
=>
    (research ri-masonry)
)
(defrule
    (not (research-completed ri-architecture))
    (research-available ri-architecture)
    (up-research-status c: ri-architecture < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-architecture)
    (not (research-completed ri-architecture))
    (research-available ri-architecture)
    (goal do-research 1)
=>
    (research ri-architecture)
)
(defrule
    (not (and (current-age >= castle-age) (not (current-age == imperial-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-masonry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-masonry))
    (research-available ri-masonry)
    (up-research-status c: ri-masonry < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-masonry)
    (not (research-completed ri-masonry))
    (research-available ri-masonry)
    (goal do-research 1)
=>
    (research ri-masonry)
)
(defrule
    (not (and (current-age >= castle-age) (building-type-count castle >= 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-murder-holes)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-murder-holes))
    (research-available ri-murder-holes)
    (up-research-status c: ri-murder-holes < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-murder-holes)
    (not (research-completed ri-murder-holes))
    (research-available ri-murder-holes)
    (goal do-research 1)
=>
    (research ri-murder-holes)
)
(defrule
    (not (and (current-age >= castle-age) (and (building-type-count castle >= 1) (current-age == imperial-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (up-research-status c: ri-bracer < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (not (research-completed ri-bracer))
    (research-available ri-bracer)
    (goal do-research 1)
=>
    (research ri-bracer)
)
(defrule
    (not (and (current-age >= castle-age) (and (building-type-count castle >= 1) (not (current-age == imperial-age)))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (building-type-count-total blacksmith < 1)
    (building-type-count-total blacksmith == 0)
    (wood-amount >= 200)
=>
    (build blacksmith)
)
(defrule
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (up-research-status c: ri-fletching < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (not (research-completed ri-fletching))
    (research-available ri-fletching)
    (goal do-research 1)
=>
    (research ri-fletching)
)
(defrule
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (up-research-status c: ri-bodkin-arrow < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
    (research-available ri-bodkin-arrow)
    (goal do-research 1)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
=>
    (generate-random-number select-random-42148e52-98ac-45ff-96a8-c7da9ebf10e8)
    (set-goal 108 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 108 0)
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
=>
    (set-goal 108 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 108 0)
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
=>
    (set-goal 108 2)
    (disable-self)
)
(defrule
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
    (goal 108 1)
=>
    (enable-wall-placement 2)
    (disable-self)
)
(defrule
    (can-build-wall 2 stone-wall-line)
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
    (goal 108 1)
=>
    (build-wall 2 stone-wall-line)
)
(defrule
    (building-type-count-total stone-wall-line > 0)
    (can-build-gate 2)
    (building-type-count-total gate < 5)
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
    (goal 108 1)
=>
    (build-gate 2)
)
(defrule
    (not (and (and (strategic-number sn-stone-gatherer-percentage > 0) (false)) (goal 108 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fortified-wall)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-fortified-wall))
    (research-available ri-fortified-wall)
    (up-research-status c: ri-fortified-wall < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fortified-wall)
    (not (research-completed ri-fortified-wall))
    (research-available ri-fortified-wall)
    (goal do-research 1)
=>
    (research ri-fortified-wall)
)
(defrule
    (not (goal 107 2))
=>
    (up-jump-rule 5)
)
(defrule
    (not (and (current-age >= castle-age) (building-type-count castle >= 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-murder-holes)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (research-completed ri-murder-holes))
    (research-available ri-murder-holes)
    (up-research-status c: ri-murder-holes < research-pending)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-murder-holes)
    (not (research-completed ri-murder-holes))
    (research-available ri-murder-holes)
    (goal do-research 1)
=>
    (research ri-murder-holes)
)
(defrule
    (goal attack-ready 1)
=>
    (chat-local-to-self "attack ready!")
    (disable-self)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 91)
)
(defrule
    (true)
=>
    (set-goal good-archers 0)
    (disable-self)
    (set-goal good-hand-cannoneers 0)
    (set-goal good-skirmishers 0)
    (set-goal good-cavalry-archers 0)
    (set-goal good-militia 0)
    (set-goal good-spearmen 0)
    (set-goal good-eagles 0)
    (set-goal good-scouts 0)
    (set-goal good-knights 0)
    (set-goal good-camels 0)
    (set-goal good-battle-elephants 0)
    (set-goal good-battering-rams 0)
    (set-goal good-mangonels 0)
    (set-goal good-scorpions 0)
    (set-goal good-monks 0)
)
(defrule
    (true)
=>
    (set-goal good-unique-units 1)
    (disable-self)
)
(defrule
    (civ-selected aztec)
=>
    (set-goal good-eagles 1)
    (disable-self)
    (set-goal good-monks 1)
    (set-goal good-militia 1)
)
(defrule
    (civ-selected berbers)
=>
    (set-goal good-hand-cannoneers 1)
    (disable-self)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-camels 1)
    (set-goal good-scorpions 1)
)
(defrule
    (civ-selected briton)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
)
(defrule
    (civ-selected burmese)
=>
    (set-goal good-scouts 1)
    (disable-self)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-battle-elephants 1)
    (set-goal good-monks 1)
)
(defrule
    (civ-selected byzantine)
=>
    (set-goal good-speamen 1)
    (disable-self)
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-camels 1)
    (set-goal good-battering-rams 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-monks 1)
)
(defrule
    (civ-selected celtic)
=>
    (set-goal good-battering-rams 1)
    (disable-self)
    (set-goal good-scorpions 1)
    (set-goal good-mangonels 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
)
(defrule
    (civ-selected chinese)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-miltia 1)
    (set-goal good-spearmen 1)
    (set-goal good-camels 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
)
(defrule
    (civ-selected ethiopian)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-spearmen 1)
)
(defrule
    (civ-selected frankish)
=>
    (set-goal good-militia 1)
    (disable-self)
    (set-goal good-spearmen 1)
    (set-goal good-knights 1)
    (set-goal good-scorpions 1)
)
(defrule
    (civ-selected gothic)
=>
    (set-goal good-militia 1)
    (disable-self)
    (set-goal good-spearmen 1)
    (set-goal good-scouts 1)
    (set-goal good-scorpions 1)
    (set-goal good-hand-cannoneers 1)
)
(defrule
    (civ-selected hun)
=>
    (set-goal good-cavalry-archers 1)
    (disable-self)
    (set-goal good-battering-rams 1)
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
)
(defrule
    (civ-selected incan)
=>
    (set-goal good-eagles 1)
    (disable-self)
    (set-goal good-militia 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-archers 1)
    (set-goal good-spearmen 1)
    (set-goal good-skirmishers 1)
)
(defrule
    (civ-selected indian)
=>
    (set-goal good-skirmishers 1)
    (disable-self)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-camels 1)
    (set-goal good-scouts 1)
)
(defrule
    (civ-selected italian)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-monks 1)
)
(defrule
    (civ-selected japanese)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-monks 1)
)
(defrule
    (civ-selected khmer)
=>
    (set-goal good-spearmen 1)
    (disable-self)
    (set-goal good-battle-elephants 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
)
(defrule
    (civ-selected korean)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-mangonels 1)
)
(defrule
    (civ-selected magyar)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
)
(defrule
    (civ-selected malay)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-battle-elephants 1)
)
(defrule
    (civ-selected malian)
=>
    (set-goal good-mangonels 1)
    (disable-self)
    (set-goal good-militia 1)
    (set-goal good-hand-cannoneer 1)
)
(defrule
    (civ-selected mayan)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-eagles 1)
    (set-goal good-spearmen 1)
    (set-goal good-battering-rams 1)
)
(defrule
    (civ-selected mongol)
=>
    (set-goal good-cavalry-archers 1)
    (disable-self)
    (set-goal good-scouts 1)
    (set-goal good-militia 1)
    (set-goal good-battering-rams 1)
    (set-goal good-mangonels 1)
    (set-goal good-scorpions 1)
)
(defrule
    (civ-selected persian)
=>
    (set-goal good-scouts 1)
    (disable-self)
    (set-goal good-knights 1)
    (set-goal good-camels 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-spearmen 1)
    (set-goal good-battering-rams 1)
)
(defrule
    (civ-selected portuguese)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-knights 1)
)
(defrule
    (civ-selected saracen)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-camels 1)
    (set-goal good-monks 1)
    (set-goal good-battering-rams 1)
    (set-goal good-mangonels 1)
)
(defrule
    (civ-selected slavic)
=>
    (set-goal good-militia 1)
    (disable-self)
    (set-goal good-spearmen 1)
    (set-goal good-scouts 1)
    (set-goal good-monks 1)
    (set-goal good-battering-rams 1)
    (set-goal good-mangonels 1)
    (set-goal good-scorpions 1)
)
(defrule
    (civ-selected spanish)
=>
    (set-goal good-skirmishers 1)
    (disable-self)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
    (set-goal good-monks 1)
    (set-goal good-battering-rams 1)
)
(defrule
    (civ-selected teutonic)
=>
    (set-goal good-hand-cannoneers 1)
    (disable-self)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-monks 1)
    (set-goal good-mangonels 1)
    (set-goal good-scorpions 1)
)
(defrule
    (civ-selected turkish)
=>
    (set-goal good-hand-cannoneers 1)
    (disable-self)
    (set-goal good-cavalry-archers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-camels 1)
    (set-goal good-battering-rams 1)
)
(defrule
    (civ-selected vietnamese)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
)
(defrule
    (civ-selected viking)
=>
    (set-goal good-archers 1)
    (disable-self)
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
)
(defrule
    (true)
=>
    (generate-random-number select-random-861d5f69-fb28-4c7e-8b38-af676941c0bc)
    (set-goal 128 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 128 0)
=>
    (set-goal 128 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 128 0)
=>
    (set-goal 128 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 128 0)
=>
    (set-goal 128 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 128 0)
=>
    (set-goal 128 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 128 0)
=>
    (set-goal 128 5)
    (disable-self)
)
(defrule
    (goal 128 1)
=>
    (set-goal desired-units 1)
    (disable-self)
)
(defrule
    (goal 128 2)
=>
    (set-goal desired-units 1)
    (disable-self)
)
(defrule
    (goal 128 3)
=>
    (set-goal desired-units 2)
    (disable-self)
)
(defrule
    (goal 128 4)
=>
    (set-goal desired-units 2)
    (disable-self)
)
(defrule
    (goal 128 5)
=>
    (set-goal desired-units 3)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal total-units-selected 0)
    (up-modify-goal total-units-selected g:+ produce-archers)
    (up-modify-goal total-units-selected g:+ produce-hand-cannoneers)
    (up-modify-goal total-units-selected g:+ produce-skirmishers)
    (up-modify-goal total-units-selected g:+ produce-cavalry-archers)
    (up-modify-goal total-units-selected g:+ produce-militia)
    (up-modify-goal total-units-selected g:+ produce-spearmen)
    (up-modify-goal total-units-selected g:+ produce-eagles)
    (up-modify-goal total-units-selected g:+ produce-scouts)
    (up-modify-goal total-units-selected g:+ produce-knights)
    (up-modify-goal total-units-selected g:+ produce-camels)
    (up-modify-goal total-units-selected g:+ produce-battle-elephants)
    (up-modify-goal total-units-selected g:+ produce-mangonels)
    (up-modify-goal total-units-selected g:+ produce-scorpions)
    (up-modify-goal total-units-selected g:+ produce-monks)
    (up-modify-goal total-units-selected g:+ produce-unique-units)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (generate-random-number select-random-5e358c96-eceb-4bd9-b027-2224b06a4cef)
    (set-goal 131 0)
)
(defrule
    (random-number == 1)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 1)
)
(defrule
    (random-number == 2)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 2)
)
(defrule
    (random-number == 3)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 3)
)
(defrule
    (random-number == 4)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 4)
)
(defrule
    (random-number == 5)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 5)
)
(defrule
    (random-number == 6)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 6)
)
(defrule
    (random-number == 7)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 7)
)
(defrule
    (random-number == 8)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 8)
)
(defrule
    (random-number == 9)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 9)
)
(defrule
    (random-number == 10)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 10)
)
(defrule
    (random-number == 11)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 11)
)
(defrule
    (random-number == 12)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 12)
)
(defrule
    (random-number == 13)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 13)
)
(defrule
    (random-number == 14)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 14)
)
(defrule
    (random-number == 15)
    (goal 131 0)
    (up-compare-goal total-units-selected g:< desired-units)
=>
    (set-goal 131 15)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 1)
    (goal produce-cavalry-archers 0)
=>
    (up-modify-goal produce-archers g:= good-archers)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 2)
=>
    (up-modify-goal produce-hand-cannoneers g:= good-hand-cannoneers)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 3)
=>
    (up-modify-goal produce-skirmishers g:= good-skirmishers)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 4)
    (goal produce-archers 0)
=>
    (up-modify-goal produce-cavalry-archers g:= good-cavalry-archers)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 5)
    (goal produce-eagles 0)
=>
    (up-modify-goal produce-militia g:= good-militia)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 6)
    (goal produce-eagles 0)
=>
    (up-modify-goal produce-spearmen g:= good-spearmen)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 7)
    (and (goal produce-spearmen 0) (goal produce-militia 0))
=>
    (up-modify-goal produce-eagles g:= good-eagles)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 8)
    (and (goal produce-knights 0) (goal produce-battle-elephants 0))
=>
    (up-modify-goal produce-scouts g:= good-scouts)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 9)
    (and (goal produce-scouts 0) (goal produce-battle-elephants 0))
=>
    (up-modify-goal produce-knights g:= good-knights)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 10)
=>
    (up-modify-goal produce-camels g:= good-camels)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 11)
    (and (goal produce-scouts 0) (goal produce-knights 0))
=>
    (up-modify-goal produce-battle-elephants g:= good-battle-elephants)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 12)
=>
    (up-modify-goal produce-mangonels g:= good-mangonels)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 13)
=>
    (up-modify-goal produce-scorpions g:= good-scorpions)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 14)
=>
    (up-modify-goal produce-monks g:= good-monks)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal 131 15)
=>
    (up-modify-goal produce-unique-units g:= good-unique-units)
)
(defrule
    (goal produce-archers 1)
=>
    (chat-local-to-self "produce-archers")
    (disable-self)
)
(defrule
    (goal produce-hand-cannoneers 1)
=>
    (chat-local-to-self "produce-hand-cannoneers")
    (disable-self)
)
(defrule
    (goal produce-skirmishers 1)
=>
    (chat-local-to-self "produce-skirmishers")
    (disable-self)
)
(defrule
    (goal produce-cavalry-archers 1)
=>
    (chat-local-to-self "produce-cavalry-archers")
    (disable-self)
)
(defrule
    (goal produce-militia 1)
=>
    (chat-local-to-self "produce-militia")
    (disable-self)
)
(defrule
    (goal produce-spearmen 1)
=>
    (chat-local-to-self "produce-spearmen")
    (disable-self)
)
(defrule
    (goal produce-eagles 1)
=>
    (chat-local-to-self "produce-eagles")
    (disable-self)
)
(defrule
    (goal produce-scouts 1)
=>
    (chat-local-to-self "produce-scouts")
    (disable-self)
)
(defrule
    (goal produce-knights 1)
=>
    (chat-local-to-self "produce-knights")
    (disable-self)
)
(defrule
    (goal produce-camels 1)
=>
    (chat-local-to-self "produce-camels")
    (disable-self)
)
(defrule
    (goal produce-battle-elephants 1)
=>
    (chat-local-to-self "produce-battle-elephants")
    (disable-self)
)
(defrule
    (goal produce-mangonels 1)
=>
    (chat-local-to-self "produce-mangonels")
    (disable-self)
)
(defrule
    (goal produce-scorpions 1)
=>
    (chat-local-to-self "produce-scorpions")
    (disable-self)
)
(defrule
    (goal produce-monks 1)
=>
    (chat-local-to-self "produce-monks")
    (disable-self)
)
(defrule
    (goal produce-unique-units 1)
=>
    (chat-local-to-self "produce-unique-units")
    (disable-self)
)
(defrule
    (goal attack-ready 1)
    (military-population >= 8)
=>
    (generate-random-number select-random-8420cb56-fbe3-439d-806f-eaeb5f7075cb)
    (set-goal 132 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 132 0)
    (goal attack-ready 1)
    (military-population >= 8)
=>
    (set-goal 132 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 132 0)
    (goal attack-ready 1)
    (military-population >= 8)
=>
    (set-goal 132 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 132 0)
    (goal attack-ready 1)
    (military-population >= 8)
=>
    (set-goal 132 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 132 0)
    (goal attack-ready 1)
    (military-population >= 8)
=>
    (set-goal 132 4)
    (disable-self)
)
(defrule
    (not (and (goal attack-ready 1) (and (military-population >= 8) (goal 132 1))))
=>
    (up-jump-rule 3)
)
(defrule
    (true)
=>
    (chat-local-to-self "attacking passively")
    (disable-self)
)
(defrule
    (and (or (up-compare-goal target-military-percentage c:>= 400) (up-compare-goal population-space-remaining c:<= 5)) (goal attacking 0))
=>
    (set-goal attacking 1)
)
(defrule
    (not (and (or (up-compare-goal target-military-percentage c:>= 400) (up-compare-goal population-space-remaining c:<= 5)) (goal attacking 0)))
    (and (up-compare-goal target-military-percentage c:<= 100) (goal attacking 1))
=>
    (set-goal attacking 0)
)
(defrule
    (not (and (goal attack-ready 1) (and (military-population >= 8) (goal 132 2))))
=>
    (up-jump-rule 3)
)
(defrule
    (true)
=>
    (chat-local-to-self "attacking cautiously")
    (disable-self)
)
(defrule
    (and (or (up-compare-goal target-military-percentage c:>= 200) (up-compare-goal population-space-remaining c:<= 5)) (goal attacking 0))
=>
    (set-goal attacking 1)
)
(defrule
    (not (and (or (up-compare-goal target-military-percentage c:>= 200) (up-compare-goal population-space-remaining c:<= 5)) (goal attacking 0)))
    (and (up-compare-goal target-military-percentage c:<= 100) (goal attacking 1))
=>
    (set-goal attacking 0)
)
(defrule
    (not (and (goal attack-ready 1) (and (military-population >= 8) (goal 132 3))))
=>
    (up-jump-rule 3)
)
(defrule
    (true)
=>
    (chat-local-to-self "attacking aggressively")
    (disable-self)
)
(defrule
    (and (or (up-compare-goal target-military-percentage c:>= 100) (up-compare-goal population-space-remaining c:<= 5)) (goal attacking 0))
=>
    (set-goal attacking 1)
)
(defrule
    (not (and (or (up-compare-goal target-military-percentage c:>= 100) (up-compare-goal population-space-remaining c:<= 5)) (goal attacking 0)))
    (and (up-compare-goal target-military-percentage c:<= 50) (goal attacking 1))
=>
    (set-goal attacking 0)
)
(defrule
    (not (and (goal attack-ready 1) (and (military-population >= 8) (goal 132 4))))
=>
    (up-jump-rule 3)
)
(defrule
    (true)
=>
    (chat-local-to-self "attacking recklessly")
    (disable-self)
)
(defrule
    (and (or (up-compare-goal target-military-percentage c:>= 80) (up-compare-goal population-space-remaining c:<= 5)) (goal attacking 0))
=>
    (set-goal attacking 1)
)
(defrule
    (not (and (or (up-compare-goal target-military-percentage c:>= 80) (up-compare-goal population-space-remaining c:<= 5)) (goal attacking 0)))
    (and (up-compare-goal target-military-percentage c:<= 40) (goal attacking 1))
=>
    (set-goal attacking 0)
)
(defrule
    (goal attack-ready 1)
    (not (military-population >= 8))
=>
    (set-goal attacking 0)
)
(defrule
    (goal attack-ready 1)
=>
    (generate-random-number select-random-34a57c78-8a86-44a0-9a70-3b94df2329d9)
    (set-goal 133 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 133 0)
    (goal attack-ready 1)
=>
    (set-goal 133 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 133 0)
    (goal attack-ready 1)
=>
    (set-goal 133 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 133 0)
    (goal attack-ready 1)
=>
    (set-goal 133 3)
    (disable-self)
)
(defrule
    (goal attack-ready 1)
    (goal 133 1)
=>
    (generate-random-number select-random-016bfd42-5c42-45c6-b49f-baa237e9781c)
    (set-goal 134 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 134 0)
    (goal attack-ready 1)
    (goal 133 1)
=>
    (set-goal 134 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 134 0)
    (goal attack-ready 1)
    (goal 133 1)
=>
    (set-goal 134 2)
    (disable-self)
)
(defrule
    (not (and (goal attack-ready 1) (and (goal 133 1) (goal 134 1))))
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (chat-local-to-self "being thoughtful")
    (disable-self)
)
(defrule
    (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0)))
    (goal produce-units 0)
=>
    (chat-local-to-self "go! (thoughtful)")
)
(defrule
    (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0)))
=>
    (set-goal produce-units 1)
    (set-goal do-research 1)
)
(defrule
    (not (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0))))
    (goal produce-units 1)
=>
    (chat-local-to-self "hold! (thoughtful)")
)
(defrule
    (not (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0))))
=>
    (set-goal produce-units 0)
    (set-goal do-research 1)
)
(defrule
    (not (and (goal attack-ready 1) (and (goal 133 1) (goal 134 2))))
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (chat-local-to-self "paying attention to military numbers")
    (disable-self)
)
(defrule
    (or (goal attempted-researches 0) (or (up-compare-goal largest-enemy-military-percentage c:< 100) (and (town-under-attack) (goal attacking 0))))
    (goal produce-units 0)
=>
    (chat-local-to-self "go! (numbers)")
)
(defrule
    (or (goal attempted-researches 0) (or (up-compare-goal largest-enemy-military-percentage c:< 100) (and (town-under-attack) (goal attacking 0))))
=>
    (set-goal produce-units 1)
    (set-goal do-research 1)
)
(defrule
    (not (or (goal attempted-researches 0) (or (up-compare-goal largest-enemy-military-percentage c:< 100) (and (town-under-attack) (goal attacking 0)))))
    (goal produce-units 1)
=>
    (chat-local-to-self "hold! (numbers)")
)
(defrule
    (not (or (goal attempted-researches 0) (or (up-compare-goal largest-enemy-military-percentage c:< 100) (and (town-under-attack) (goal attacking 0)))))
=>
    (set-goal produce-units 0)
    (set-goal do-research 1)
)
(defrule
    (not (and (goal attack-ready 1) (goal 133 2)))
=>
    (up-jump-rule 12)
)
(defrule
    (true)
=>
    (chat-local-to-self "being reckless, and then thoughtful")
    (disable-self)
    (set-goal balanced-aggressive 1)
    (enable-timer 2 300)
)
(defrule
    (timer-triggered 2)
=>
    (up-modify-goal balanced-aggressive c:+ 1)
    (up-modify-goal balanced-aggressive c:mod 2)
)
(defrule
    (timer-triggered 2)
=>
    (disable-timer 2)
    (enable-timer 2 300)
)
(defrule
    (not (goal balanced-aggressive 1))
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (chat-local-to-self "being a little reckless")
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal produce-units 1)
    (set-goal do-research 1)
)
(defrule
    (not (not (goal balanced-aggressive 1)))
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (chat-local-to-self "being thoughtful")
    (disable-self)
)
(defrule
    (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0)))
    (goal produce-units 0)
=>
    (chat-local-to-self "go! (thoughtful)")
)
(defrule
    (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0)))
=>
    (set-goal produce-units 1)
    (set-goal do-research 1)
)
(defrule
    (not (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0))))
    (goal produce-units 1)
=>
    (chat-local-to-self "hold! (thoughtful)")
)
(defrule
    (not (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0))))
=>
    (set-goal produce-units 0)
    (set-goal do-research 1)
)
(defrule
    (not (and (goal attack-ready 1) (goal 133 3)))
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (chat-local-to-self "being a little reckless")
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal produce-units 1)
    (set-goal do-research 1)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 8)
)
(defrule
    (and (dropsite-min-distance gold == -1) (and (resource-found gold) (goal produce-trade-carts 0)))
=>
    (set-goal produce-archers 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-cavalry-archers 0)
    (set-goal produce-militia 0)
    (set-goal produce-eagles 0)
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-mangonels 0)
    (set-goal produce-scorpions 0)
    (set-goal produce-monks 0)
    (set-goal produce-unique-units 0)
)
(defrule
    (and (dropsite-min-distance gold == -1) (and (resource-found gold) (goal produce-trade-carts 0)))
    (and (goal good-skirmishers 0) (and (goal good-scouts 0) (goal good-spearmen 0)))
=>
    (generate-random-number select-random-152dc0a2-ef03-4f73-9ce2-22424e310341)
    (set-goal 136 0)
)
(defrule
    (random-number == 1)
    (goal 136 0)
    (and (dropsite-min-distance gold == -1) (and (resource-found gold) (goal produce-trade-carts 0)))
    (and (goal good-skirmishers 0) (and (goal good-scouts 0) (goal good-spearmen 0)))
=>
    (set-goal 136 1)
)
(defrule
    (random-number == 2)
    (goal 136 0)
    (and (dropsite-min-distance gold == -1) (and (resource-found gold) (goal produce-trade-carts 0)))
    (and (goal good-skirmishers 0) (and (goal good-scouts 0) (goal good-spearmen 0)))
=>
    (set-goal 136 2)
)
(defrule
    (random-number == 3)
    (goal 136 0)
    (and (dropsite-min-distance gold == -1) (and (resource-found gold) (goal produce-trade-carts 0)))
    (and (goal good-skirmishers 0) (and (goal good-scouts 0) (goal good-spearmen 0)))
=>
    (set-goal 136 3)
)
(defrule
    (and (dropsite-min-distance gold == -1) (and (resource-found gold) (goal produce-trade-carts 0)))
    (and (goal good-skirmishers 0) (and (goal good-scouts 0) (goal good-spearmen 0)))
    (goal 136 1)
=>
    (set-goal good-skirmishers 1)
)
(defrule
    (and (dropsite-min-distance gold == -1) (and (resource-found gold) (goal produce-trade-carts 0)))
    (and (goal good-skirmishers 0) (and (goal good-scouts 0) (goal good-spearmen 0)))
    (goal 136 2)
=>
    (set-goal good-scouts 1)
)
(defrule
    (and (dropsite-min-distance gold == -1) (and (resource-found gold) (goal produce-trade-carts 0)))
    (and (goal good-skirmishers 0) (and (goal good-scouts 0) (goal good-spearmen 0)))
    (goal 136 3)
=>
    (set-goal good-spearmen 1)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 6)
)
(defrule
    (players-unit-type-count any-enemy monk-set >= 5)
=>
    (set-goal produce-battle-elephants 0)
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
)
(defrule
    (players-unit-type-count any-enemy archer >= 5)
=>
    (set-goal produce-monks 0)
    (set-goal produce-spearmen 0)
)
(defrule
    (players-unit-type-count any-enemy cavalry-archer-line >= 5)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (players-unit-type-count any-enemy mangonel-line >= 5)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-skirmishers 0)
)
(defrule
    (goal desired-units 1)
    (players-unit-type-count any-enemy spearman-line >= 5)
=>
    (set-goal produce-knights 0)
    (set-goal produce-scouts 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-camels 0)
)
(defrule
    (goal desired-units 1)
    (players-unit-type-count any-enemy hand-cannoneer >= 5)
=>
    (set-goal produce-militia 0)
    (set-goal produce-spearmen 0)
    (set-goal produce-eagles 0)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 6)
)
(defrule
    (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town))))
=>
    (set-goal produce-battering-rams 0)
    (set-goal produce-trebuchets 0)
)
(defrule
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
    (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1)))
    (or (military-population >= 20) (enemy-buildings-in-town))
    (or (and (unit-type-count-total battering-ram-line < 5) (current-age == castle-age)) (and (unit-type-count-total battering-ram-line < 10) (current-age == imperial-age)))
=>
    (set-goal produce-battering-rams 1)
)
(defrule
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
    (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1)))
    (or (military-population >= 20) (enemy-buildings-in-town))
    (not (or (and (unit-type-count-total battering-ram-line < 5) (current-age == castle-age)) (and (unit-type-count-total battering-ram-line < 10) (current-age == imperial-age))))
=>
    (set-goal produce-battering-rams 0)
)
(defrule
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
    (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1)))
    (not (or (military-population >= 20) (enemy-buildings-in-town)))
=>
    (set-goal produce-battering-rams 0)
)
(defrule
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
    (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1)))
=>
    (set-goal produce-trebuchets 0)
)
(defrule
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
    (not (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1))))
    (current-age == imperial-age)
=>
    (set-goal produce-battering-rams 0)
    (set-goal produce-trebuchets 1)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (up-find-player enemy find-closest 137)
    (up-modify-sn sn-target-player-number g:= 137)
    (up-modify-sn sn-focus-player-number g:= 137)
    (disable-self)
    (up-send-scout group-type-land-explore scout-enemy)
)
(defrule
    (not (player-in-game target-player))
=>
    (up-find-player enemy find-closest 138)
    (up-modify-sn sn-target-player-number g:= 138)
    (up-modify-sn sn-focus-player-number g:= 138)
    (up-send-scout group-type-land-explore scout-enemy)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 2)
)
(defrule
    (goal attacking 1)
=>
    (set-strategic-number sn-maximum-town-size 255)
)
(defrule
    (not (goal attacking 1))
    (strategic-number sn-maximum-town-size == 255)
=>
    (up-modify-sn sn-maximum-town-size s:= sn-minimum-town-size)
)
(defrule
    (not (goal attack-ready 1))
=>
    (set-goal do-research 1)
    (set-goal produce-units 0)
)
(defrule
    (current-age == feudal-age)
=>
    (set-goal desired-military-buildings-per-type 2)
)
(defrule
    (not (current-age == feudal-age))
    (current-age == castle-age)
=>
    (set-goal desired-military-buildings-per-type 3)
)
(defrule
    (not (current-age == feudal-age))
    (not (current-age == castle-age))
    (current-age == imperial-age)
=>
    (set-goal desired-military-buildings-per-type 5)
)
(defrule
    (goal attempted-researches 0)
=>
    (set-strategic-number sn-enable-training-queue 1)
)
(defrule
    (not (goal attempted-researches 0))
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (and (goal resign 1) (or (building-type-count castle == 0) (goal team-game 1)))
=>
    (resign)
)
(defrule
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (and (up-compare-goal score-percentage c:<= 50) (game-time >= 1200)))
=>
    (set-goal resign 1)
)
(defrule
    (and (goal resign 1) (goal team-game 0))
=>
    (delete-building castle)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 32)
)
(defrule
    (can-build market)
    (building-type-count-total market < 1)
    (wood-amount > 200)
=>
    (build market)
)
(defrule
    (food-amount < max-food)
    (can-buy-commodity food)
    (gold-amount > max-gold)
=>
    (buy-commodity food)
)
(defrule
    (wood-amount < max-wood)
    (can-buy-commodity wood)
    (gold-amount > max-gold)
=>
    (buy-commodity wood)
)
(defrule
    (wood-amount > max-wood)
    (can-sell-commodity wood)
    (not (gold-amount > max-gold))
=>
    (sell-commodity wood)
)
(defrule
    (food-amount > max-food)
    (can-sell-commodity food)
    (not (gold-amount > max-gold))
=>
    (sell-commodity food)
)
(defrule
    (commodity-buying-price wood <= good-wood-price)
=>
    (set-goal can-buy-wood 1)
)
(defrule
    (not (commodity-buying-price wood <= good-wood-price))
=>
    (set-goal can-buy-wood 0)
)
(defrule
    (commodity-buying-price food <= good-food-price)
=>
    (set-goal can-buy-food 1)
)
(defrule
    (not (commodity-buying-price food <= good-food-price))
=>
    (set-goal can-buy-food 0)
)
(defrule
    (commodity-selling-price wood >= good-wood-sell-price)
=>
    (set-goal can-sell-wood 1)
)
(defrule
    (not (commodity-selling-price wood >= good-wood-sell-price))
=>
    (set-goal can-sell-wood 0)
)
(defrule
    (commodity-selling-price food >= good-food-sell-price)
=>
    (set-goal can-sell-food 1)
)
(defrule
    (not (commodity-selling-price food >= good-food-sell-price))
=>
    (set-goal can-sell-food 0)
)
(defrule
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (and (up-compare-goal non-escrowed-wood c:< wood-threshold) (goal can-buy-wood 1))
=>
    (chat-local-to-self "buy wood, good price.")
)
(defrule
    (can-buy-commodity wood)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (and (up-compare-goal non-escrowed-wood c:< wood-threshold) (goal can-buy-wood 1))
=>
    (buy-commodity wood)
)
(defrule
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (and (up-compare-goal non-escrowed-food c:< food-threshold) (goal can-buy-food 1))
=>
    (chat-local-to-self "buy food, good price.")
)
(defrule
    (can-buy-commodity food)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (and (up-compare-goal non-escrowed-food c:< food-threshold) (goal can-buy-food 1))
=>
    (buy-commodity food)
)
(defrule
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
    (and (up-compare-goal non-escrowed-wood c:> wood-threshold) (goal can-sell-wood 1))
=>
    (chat-local-to-self "sell wood, good price.")
)
(defrule
    (can-sell-commodity wood)
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
    (and (up-compare-goal non-escrowed-wood c:> wood-threshold) (goal can-sell-wood 1))
=>
    (sell-commodity wood)
)
(defrule
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
    (and (up-compare-goal non-escrowed-food c:> food-threshold) (goal can-sell-food 1))
=>
    (chat-local-to-self "sell food, good price.")
)
(defrule
    (can-sell-commodity food)
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
    (and (up-compare-goal non-escrowed-food c:> food-threshold) (goal can-sell-food 1))
=>
    (sell-commodity food)
)
(defrule
    (true)
=>
    (enable-timer 3 60)
    (disable-self)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 2)
    (strategic-number sn-food-gatherer-percentage >= 2)
    (strategic-number sn-gold-gatherer-percentage <= 96)
    (timer-triggered 3)
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 2)
    (up-modify-sn sn-food-gatherer-percentage c:- 2)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 4)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 2)
    (strategic-number sn-gold-gatherer-percentage >= 2)
    (strategic-number sn-food-gatherer-percentage <= 96)
    (timer-triggered 3)
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (not (up-compare-goal non-escrowed-food c:> food-threshold))
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 2)
    (up-modify-sn sn-gold-gatherer-percentage c:- 2)
    (up-modify-sn sn-food-gatherer-percentage c:+ 4)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 4)
    (strategic-number sn-food-gatherer-percentage <= 98)
    (strategic-number sn-gold-gatherer-percentage <= 98)
    (timer-triggered 3)
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (not (up-compare-goal non-escrowed-food c:> food-threshold))
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 4)
    (up-modify-sn sn-food-gatherer-percentage c:+ 2)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 2)
    (strategic-number sn-gold-gatherer-percentage >= 2)
    (strategic-number sn-wood-gatherer-percentage <= 96)
    (timer-triggered 3)
    (not (up-compare-goal non-escrowed-wood c:> wood-threshold))
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 2)
    (up-modify-sn sn-gold-gatherer-percentage c:- 2)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 4)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 4)
    (strategic-number sn-wood-gatherer-percentage <= 98)
    (strategic-number sn-gold-gatherer-percentage <= 98)
    (timer-triggered 3)
    (not (up-compare-goal non-escrowed-wood c:> wood-threshold))
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 4)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 2)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-gold-gatherer-percentage >= 4)
    (strategic-number sn-wood-gatherer-percentage <= 98)
    (strategic-number sn-food-gatherer-percentage <= 98)
    (timer-triggered 3)
    (not (up-compare-goal non-escrowed-wood c:> wood-threshold))
    (not (up-compare-goal non-escrowed-food c:> food-threshold))
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
=>
    (up-modify-sn sn-gold-gatherer-percentage c:- 4)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 2)
    (up-modify-sn sn-food-gatherer-percentage c:+ 2)
)
(defrule
    (timer-triggered 3)
=>
    (disable-timer 3)
    (enable-timer 3 60)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 1)
    (strategic-number sn-gold-gatherer-percentage >= 1)
    (strategic-number sn-wood-gatherer-percentage <= 98)
    (strategic-number sn-wood-gatherer-percentage < minimum-wood-gatherer-percentage)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 1)
    (up-modify-sn sn-gold-gatherer-percentage c:- 1)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 1)
    (strategic-number sn-gold-gatherer-percentage >= 1)
    (strategic-number sn-food-gatherer-percentage <= 98)
    (strategic-number sn-food-gatherer-percentage < 30)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 1)
    (up-modify-sn sn-gold-gatherer-percentage c:- 1)
    (up-modify-sn sn-food-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 1)
    (strategic-number sn-food-gatherer-percentage >= 1)
    (strategic-number sn-gold-gatherer-percentage <= 98)
    (strategic-number sn-gold-gatherer-percentage < 10)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 1)
    (up-modify-sn sn-food-gatherer-percentage c:- 1)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 2)
)
(defrule
    (true)
=>
    (set-goal do-taunt-target -1)
    (disable-self)
    (set-goal do-taunt -1)
)
(defrule
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 1)
=>
    (generate-random-number select-random-a48c11a0-12d8-41d6-88cc-73b23fa3dc4a)
    (set-goal 145 0)
)
(defrule
    (random-number == 1)
    (goal 145 0)
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 1)
=>
    (set-goal 145 1)
)
(defrule
    (random-number == 2)
    (goal 145 0)
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 1)
=>
    (set-goal 145 2)
)
(defrule
    (random-number == 3)
    (goal 145 0)
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 1)
=>
    (set-goal 145 3)
)
(defrule
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 1)
    (goal 145 1)
=>
    (chat-to-allies "1Sure.")
)
(defrule
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 1)
    (goal 145 2)
=>
    (chat-to-allies "1Of course.")
)
(defrule
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 1)
    (goal 145 3)
=>
    (chat-to-allies "1Okay.")
)
(defrule
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 2)
=>
    (generate-random-number select-random-fecc7ec3-065f-4cc1-a2f7-4700ef556d7f)
    (set-goal 146 0)
)
(defrule
    (random-number == 1)
    (goal 146 0)
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 2)
=>
    (set-goal 146 1)
)
(defrule
    (random-number == 2)
    (goal 146 0)
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 2)
=>
    (set-goal 146 2)
)
(defrule
    (random-number == 3)
    (goal 146 0)
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 2)
=>
    (set-goal 146 3)
)
(defrule
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 2)
    (goal 146 1)
=>
    (chat-to-allies "2Sorry, no.")
)
(defrule
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 2)
    (goal 146 2)
=>
    (chat-to-allies "2Not right now, sorry.")
)
(defrule
    (not (goal do-taunt -1))
    (goal do-taunt-target every-ally)
    (goal do-taunt 2)
    (goal 146 3)
=>
    (chat-to-allies "2Sorry, no can do!")
)
(defrule
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 1)
=>
    (generate-random-number select-random-d816cfd9-b3d2-4333-a5b6-fc162f6c07e0)
    (set-goal 147 0)
)
(defrule
    (random-number == 1)
    (goal 147 0)
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 1)
=>
    (set-goal 147 1)
)
(defrule
    (random-number == 2)
    (goal 147 0)
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 1)
=>
    (set-goal 147 2)
)
(defrule
    (random-number == 3)
    (goal 147 0)
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 1)
=>
    (set-goal 147 3)
)
(defrule
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 1)
    (goal 147 1)
=>
    (chat-to-allies "1Why not?")
)
(defrule
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 1)
    (goal 147 2)
=>
    (chat-to-allies "1Sounds good.")
)
(defrule
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 1)
    (goal 147 3)
=>
    (chat-to-allies "1Sure.")
)
(defrule
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 2)
=>
    (generate-random-number select-random-092f1fb2-8e28-40ad-be5b-163b5f56e08c)
    (set-goal 148 0)
)
(defrule
    (random-number == 1)
    (goal 148 0)
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 2)
=>
    (set-goal 148 1)
)
(defrule
    (random-number == 2)
    (goal 148 0)
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 2)
=>
    (set-goal 148 2)
)
(defrule
    (random-number == 3)
    (goal 148 0)
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 2)
=>
    (set-goal 148 3)
)
(defrule
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 2)
    (goal 148 1)
=>
    (chat-to-allies "2Absolutely not.")
)
(defrule
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 2)
    (goal 148 2)
=>
    (chat-to-allies "2Are you out of your mind?")
)
(defrule
    (not (goal do-taunt -1))
    (not (goal do-taunt-target every-ally))
    (goal do-taunt-target every-enemy)
    (goal do-taunt 2)
    (goal 148 3)
=>
    (chat-to-allies "2As if!")
)
(defrule
    (game-time < 5)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (generate-random-number select-random-5d330acd-7ece-4f13-99d7-4be618e2cba6)
    (set-goal 149 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 149 0)
    (game-time < 5)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (set-goal 149 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 149 0)
    (game-time < 5)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (set-goal 149 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 149 0)
    (game-time < 5)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (set-goal 149 3)
    (disable-self)
)
(defrule
    (game-time < 5)
    (or (goal free-for-all 1) (goal team-game 1))
    (goal 149 1)
=>
    (chat-to-all "Good luck and have fun everyone!")
    (disable-self)
)
(defrule
    (game-time < 5)
    (or (goal free-for-all 1) (goal team-game 1))
    (goal 149 2)
    (goal free-for-all 1)
=>
    (chat-to-all "May the best ruler win!")
    (disable-self)
)
(defrule
    (game-time < 5)
    (or (goal free-for-all 1) (goal team-game 1))
    (goal 149 2)
    (not (goal free-for-all 1))
=>
    (chat-to-all "May the best team win!")
    (disable-self)
)
(defrule
    (game-time < 5)
    (or (goal free-for-all 1) (goal team-game 1))
    (goal 149 3)
=>
    (chat-to-all "GL everyone!!!")
    (disable-self)
)
(defrule
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (generate-random-number select-random-2adf1f11-5aea-4268-8d71-e5c45c1d6d00)
    (set-goal 150 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 150 0)
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 150 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 150 0)
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 150 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 150 0)
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 150 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 150 0)
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 150 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 150 0)
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 150 5)
    (disable-self)
)
(defrule
    (random-number == 6)
    (goal 150 0)
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 150 6)
    (disable-self)
)
(defrule
    (random-number == 7)
    (goal 150 0)
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 150 7)
    (disable-self)
)
(defrule
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
    (goal 150 1)
=>
    (chat-to-all "Hi! Go easy on me, okay?")
    (disable-self)
)
(defrule
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
    (goal 150 2)
=>
    (chat-to-all "Looking forward to this. Let's go.")
    (disable-self)
)
(defrule
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
    (goal 150 3)
=>
    (chat-to-all "Good luck, have fun!")
    (disable-self)
)
(defrule
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
    (goal 150 4)
=>
    (chat-to-all "GL!")
    (disable-self)
)
(defrule
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
    (goal 150 5)
=>
    (chat-to-all "HF!")
    (disable-self)
)
(defrule
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
    (goal 150 6)
=>
    (chat-to-all "Good luck!")
    (disable-self)
)
(defrule
    (game-time < 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
    (goal 150 7)
=>
    (chat-to-all "Have fun!")
    (disable-self)
)
(defrule
    (true)
=>
    (enable-timer 4 1800)
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (goal free-for-all 1)
=>
    (generate-random-number select-random-b2f4c276-b8c2-4440-bf66-dcb9e736f435)
    (set-goal 151 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 151 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (goal free-for-all 1)
=>
    (set-goal 151 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 151 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (goal free-for-all 1)
=>
    (set-goal 151 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 151 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (goal free-for-all 1)
=>
    (set-goal 151 3)
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (goal free-for-all 1)
    (goal 151 1)
=>
    (chat-to-all "I'm having some trouble with this one.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (goal free-for-all 1)
    (goal 151 2)
=>
    (chat-to-all "This is a tough game.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (goal free-for-all 1)
    (goal 151 3)
=>
    (chat-to-all "I don't like my chances here.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (goal team-game 1)
=>
    (generate-random-number select-random-aa778d6f-e874-4da1-bc79-7c1ae4440f9c)
    (set-goal 152 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 152 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (goal team-game 1)
=>
    (set-goal 152 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 152 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (goal team-game 1)
=>
    (set-goal 152 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 152 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (goal team-game 1)
=>
    (set-goal 152 3)
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (goal team-game 1)
    (goal 152 1)
=>
    (chat-to-all "We may need a different strategy...")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (goal team-game 1)
    (goal 152 2)
=>
    (chat-to-all "I'm crumbling... Hopefully we still have a shot?")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (goal team-game 1)
    (goal 152 3)
=>
    (chat-to-all "This is hard.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
=>
    (generate-random-number select-random-f8569159-2446-4273-b0ea-a7df91d3d1d7)
    (set-goal 153 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 153 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
=>
    (set-goal 153 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 153 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
=>
    (set-goal 153 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 153 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
=>
    (set-goal 153 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 153 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
=>
    (set-goal 153 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 153 0)
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
=>
    (set-goal 153 5)
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
    (goal 153 1)
=>
    (chat-to-all "I feel vastly outpaced, you're playing a good game.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
    (goal 153 2)
=>
    (chat-to-all "I'm not doing very well...")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
    (goal 153 3)
=>
    (chat-to-all "This could have gone better, oh well.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
    (goal 153 4)
=>
    (chat-to-all "You're playing quite well.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (up-compare-goal score-percentage c:<= 70)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
    (goal 153 5)
=>
    (chat-to-all "I'm not sure I can best you.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (not (up-compare-goal score-percentage c:<= 70))
    (up-compare-goal score-percentage c:>= 140)
    (goal free-for-all 1)
=>
    (generate-random-number select-random-aac7ae56-f760-49cf-b914-7bd1377357f0)
    (set-goal 154 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 154 0)
    (timer-triggered 4)
    (not (up-compare-goal score-percentage c:<= 70))
    (up-compare-goal score-percentage c:>= 140)
    (goal free-for-all 1)
=>
    (set-goal 154 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 154 0)
    (timer-triggered 4)
    (not (up-compare-goal score-percentage c:<= 70))
    (up-compare-goal score-percentage c:>= 140)
    (goal free-for-all 1)
=>
    (set-goal 154 2)
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (not (up-compare-goal score-percentage c:<= 70))
    (up-compare-goal score-percentage c:>= 140)
    (goal free-for-all 1)
    (goal 154 1)
=>
    (chat-to-all "I'm pretty sure I've got this game.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (not (up-compare-goal score-percentage c:<= 70))
    (up-compare-goal score-percentage c:>= 140)
    (goal free-for-all 1)
    (goal 154 2)
=>
    (chat-to-all "It was tough, but I got there in the end.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (not (up-compare-goal score-percentage c:<= 70))
    (up-compare-goal score-percentage c:>= 140)
    (not (goal free-for-all 1))
    (goal team-game 1)
=>
    (chat-to-all "Looks like we're close to getting this squared off.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (not (up-compare-goal score-percentage c:<= 70))
    (up-compare-goal score-percentage c:>= 140)
    (not (goal free-for-all 1))
    (not (goal team-game 1))
=>
    (chat-to-all "I'm winning this one. You played well though!")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
=>
    (generate-random-number select-random-6bb1c5a3-0fee-4a5d-b19a-828e50083773)
    (set-goal 155 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 155 0)
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
=>
    (set-goal 155 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 155 0)
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
=>
    (set-goal 155 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 155 0)
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
=>
    (set-goal 155 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 155 0)
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
=>
    (set-goal 155 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 155 0)
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
=>
    (set-goal 155 5)
    (disable-self)
)
(defrule
    (random-number == 6)
    (goal 155 0)
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
=>
    (set-goal 155 6)
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
    (goal 155 1)
=>
    (chat-to-all "I don't like this...")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
    (goal 155 2)
=>
    (chat-to-all "Dicey.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
    (goal 155 3)
=>
    (chat-to-all "I'd better step on the pedal a bit, sheesh.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
    (goal 155 4)
=>
    (chat-to-all "...please don't hurt me!")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
    (goal 155 5)
    (or (goal team-game 1) (goal free-for-all 1))
=>
    (chat-to-all "It's looking scary out there...")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
    (goal 155 5)
    (not (or (goal team-game 1) (goal free-for-all 1)))
=>
    (chat-to-all "You're looking scary...")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))
    (goal 155 6)
=>
    (chat-to-all "That's a lot of stuff.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
=>
    (generate-random-number select-random-14982451-0da1-40fc-b823-45e501d1c32a)
    (set-goal 156 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 156 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
=>
    (set-goal 156 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 156 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
=>
    (set-goal 156 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 156 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
=>
    (set-goal 156 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 156 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
=>
    (set-goal 156 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 156 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
=>
    (set-goal 156 5)
    (disable-self)
)
(defrule
    (random-number == 6)
    (goal 156 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
=>
    (set-goal 156 6)
    (disable-self)
)
(defrule
    (random-number == 7)
    (goal 156 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
=>
    (set-goal 156 7)
    (disable-self)
)
(defrule
    (random-number == 8)
    (goal 156 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
=>
    (set-goal 156 8)
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 1)
    (or (goal team-game 1) (goal free-for-all 1))
=>
    (chat-to-all "Let's crush 'em!")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 1)
    (not (or (goal team-game 1) (goal free-for-all 1)))
=>
    (chat-to-all "It's time for some violence!")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 2)
=>
    (chat-to-all "Oh yeah, this is good.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 3)
    (or (goal team-game 1) (goal free-for-all 1))
=>
    (chat-to-all "You lot aren't prepared for this.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 3)
    (not (or (goal team-game 1) (goal free-for-all 1)))
=>
    (chat-to-all "You aren't prepared for this.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 4)
=>
    (chat-to-all "[cracks knuckles]")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 5)
=>
    (chat-to-all "I'm pumped! Let's go!!!")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 6)
=>
    (chat-to-all "Allow me to show you some numbers.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 7)
    (goal team-game 1)
=>
    (chat-to-all "We're bringing the pain.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 7)
    (not (goal team-game 1))
=>
    (chat-to-all "I'm bringing the pain.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (goal attacking 1)
    (goal 156 8)
=>
    (chat-to-all "If I win this battle, it's all over.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
=>
    (generate-random-number select-random-983e9733-4203-442e-aadd-ef31316e87e3)
    (set-goal 157 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 157 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
=>
    (set-goal 157 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 157 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
=>
    (set-goal 157 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 157 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
=>
    (set-goal 157 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 157 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
=>
    (set-goal 157 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 157 0)
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
=>
    (set-goal 157 5)
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
    (goal 157 1)
    (or (goal team-game 1) (goal free-for-all 1))
=>
    (chat-to-all "Why doesn't someone attack me right now? It'll go well. Promise.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
    (goal 157 1)
    (not (or (goal team-game 1) (goal free-for-all 1)))
=>
    (chat-to-all "Why don't you attack me right now? Go on.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
    (goal 157 2)
=>
    (chat-to-all "Feeling confident.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
    (goal 157 3)
=>
    (chat-to-all "Feeling good.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
    (goal 157 4)
=>
    (chat-to-all "I am prepared.")
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (military-population >= 20)
    (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)))
    (up-compare-goal largest-enemy-military-percentage c:>= 170)
    (not (goal attacking 1))
    (goal 157 5)
=>
    (chat-to-all "Are you ready?")
    (disable-self)
)
(defrule
    (goal resign 1)
=>
    (generate-random-number select-random-caba4969-aab8-492a-ae89-f66ad25d19d1)
    (set-goal 158 0)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 158 0)
    (goal resign 1)
=>
    (set-goal 158 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 158 0)
    (goal resign 1)
=>
    (set-goal 158 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 158 0)
    (goal resign 1)
=>
    (set-goal 158 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 158 0)
    (goal resign 1)
=>
    (set-goal 158 4)
    (disable-self)
)
(defrule
    (goal resign 1)
    (goal 158 1)
=>
    (chat-to-all "My heart's not really in this anymore, sorry.")
    (disable-self)
)
(defrule
    (goal resign 1)
    (goal 158 2)
=>
    (chat-to-all "It was a good game, I think I'm out though.")
    (disable-self)
)
(defrule
    (goal resign 1)
    (goal 158 3)
=>
    (chat-to-all "Good game, well played.")
    (disable-self)
)
(defrule
    (goal resign 1)
    (goal 158 4)
=>
    (chat-to-all "I'm done.")
    (disable-self)
)