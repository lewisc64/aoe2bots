;Translated by https://github.com/lewisc64/aoe2ai
(defconst max-wood 1600)
(defconst max-food 1600)
(defconst max-gold 1600)
(defconst max-stone 1600)
(defconst half-max-wood 800)
(defconst half-max-food 800)
(defconst half-max-gold 800)
(defconst minimum-wood-gatherer-percentage 30)
(defconst minimum-food-gatherer-percentage 30)
(defconst minimum-gold-gatherer-percentage 10)
(defconst wood-threshold 300)
(defconst food-threshold 300)
(defconst gold-threshold 300)
(defconst stone-threshold 300)
(defconst good-wood-price 75)
(defconst good-food-price 75)
(defconst good-wood-sell-price 150)
(defconst good-food-sell-price 150)
(defconst excellent-wood-price 50)
(defconst excellent-food-price 50)
(defconst excellent-wood-sell-price 200)
(defconst excellent-food-sell-price 200)
(defconst did-tribute 291)
(defconst can-buy-wood 306)
(defconst can-buy-food 307)
(defconst can-sell-wood 308)
(defconst can-sell-food 309)
(defconst desired-villagers-with-subtractions 278)
(defconst dock-count 279)
(defconst old-produce-units 280)
(defconst current-unit-amount 281)
(defconst expected-units-per-type 282)
(defconst total-type-production 283)
(defconst archery-range-count 284)
(defconst barracks-count 285)
(defconst stable-count 286)
(defconst siege-workshop-count 287)
(defconst castle-count 288)
(defconst old-desired-military-buildings-per-type 289)
(defconst monastery-count 290)
(defconst attack-ready 145)
(defconst do-backstep 146)
(defconst emergency-trash 147)
(defconst be-smart 148)
(defconst enemy-good-fire-ships 171)
(defconst enemy-good-galleys 170)
(defconst enemy-good-unique-units 169)
(defconst enemy-good-monks 168)
(defconst enemy-good-scorpions 167)
(defconst enemy-good-mangonels 166)
(defconst enemy-good-battering-rams 165)
(defconst enemy-good-battle-elephants 164)
(defconst enemy-good-camels 163)
(defconst enemy-good-knights 162)
(defconst enemy-good-scouts 161)
(defconst enemy-good-eagles 160)
(defconst enemy-good-spearmen 159)
(defconst enemy-good-militia 158)
(defconst enemy-good-cavalry-archers 157)
(defconst enemy-good-skirmishers 156)
(defconst enemy-good-hand-cannoneers 155)
(defconst enemy-good-archers 154)
(defconst enemy-good-speamen 172)
(defconst enemy-good-miltia 173)
(defconst enemy-good-hand-cannoneer 174)
(defconst good-speamen 151)
(defconst good-miltia 152)
(defconst good-hand-cannoneer 153)
(defconst produce-unique-unit 176)
(defconst unique-unit-cavalry-trash 175)
(defconst do-partial-navy 179)
(defconst total-units-selected 177)
(defconst cavalry-archers 192)
(defconst enemy-unique-unit-is-cavalry 182)
(defconst enemy-unique-unit-is-infantry 183)
(defconst enemy-unique-unit-is-ranged 184)
(defconst enemy-unique-unit-is-cavalry-archer 185)
(defconst enemy-unique-unit-is-expensive 186)
(defconst enemy-unique-unit-counters-cavalry 187)
(defconst enemy-unique-unit-counters-infantry 188)
(defconst enemy-unique-unit-counters-ranged 189)
(defconst enemy-unique-unit-counters-cavalry-archer 190)
(defconst enemy-unique-unit-counters-unique-unit 191)
(defconst max-defensive-mangonels 4)
(defconst max-trebs 4)
(defconst max-imperial-age-rams 10)
(defconst max-castle-age-rams 5)
(defconst aggressive-override 194)
(defconst balanced-aggressive 193)
(defconst next-retarget 198)
(defconst retarget-interval 300)
(defconst suppress-final-betrayal 236)
(defconst chat-betrayed-by-player 235)
(defconst chat-betray-player 234)
(defconst no-enemies-stamp 233)
(defconst player-8-is-bad-egg 229)
(defconst player-8-alliance-request-time-stamp 230)
(defconst allied-with-8 231)
(defconst tried-alliance-with-8 232)
(defconst player-7-is-bad-egg 225)
(defconst player-7-alliance-request-time-stamp 226)
(defconst allied-with-7 227)
(defconst tried-alliance-with-7 228)
(defconst player-6-is-bad-egg 221)
(defconst player-6-alliance-request-time-stamp 222)
(defconst allied-with-6 223)
(defconst tried-alliance-with-6 224)
(defconst player-5-is-bad-egg 217)
(defconst player-5-alliance-request-time-stamp 218)
(defconst allied-with-5 219)
(defconst tried-alliance-with-5 220)
(defconst player-4-is-bad-egg 213)
(defconst player-4-alliance-request-time-stamp 214)
(defconst allied-with-4 215)
(defconst tried-alliance-with-4 216)
(defconst player-3-is-bad-egg 209)
(defconst player-3-alliance-request-time-stamp 210)
(defconst allied-with-3 211)
(defconst tried-alliance-with-3 212)
(defconst player-2-is-bad-egg 205)
(defconst player-2-alliance-request-time-stamp 206)
(defconst allied-with-2 207)
(defconst tried-alliance-with-2 208)
(defconst player-1-is-bad-egg 201)
(defconst player-1-alliance-request-time-stamp 202)
(defconst allied-with-1 203)
(defconst tried-alliance-with-1 204)
(defconst accept-alliance-requests 200)
(defconst want-alliance 199)
(defconst allied-victory-timeout 120)
(defconst alliance-request-timeout 60)
(defconst ri-yeomen 3)
(defconst ri-el-dorado 4)
(defconst ri-garland-wars 24)
(defconst ri-beserkergang 49)
(defconst ri-perfusion 457)
(defconst ri-logistica 61)
(defconst ri-mahouts 7)
(defconst ri-sipahi 491)
(defconst ri-rocketry 52)
(defconst ri-chivalry 493)
(defconst ri-bearded-axe 83)
(defconst ri-shinkichon 445)
(defconst ri-howdah 626)
(defconst ri-manipur-cavalry 627)
(defconst ri-furor-celtica 5)
(defconst ri-tusk-swords 622)
(defconst ri-double-crossbow 623)
(defconst ri-mercenaries 514)
(defconst ri-farimba 577)
(defconst ri-chatras 628)
(defconst ri-recurve-bow 515)
(defconst ri-inquisition 492)
(defconst live-sheep 958)
(defconst sea-fish 905)
(defconst tc-arrow 54)
(defconst watch-tower-arrow 786)
(defconst castle-arrow 746)
(defconst castle-arrow-chemistry 747)
(defconst ranged-unit-class 900)
(defconst infantry-unit-class 906)
(defconst cavalry-unit-class 912)
(defconst max-town-centers 3)
(defconst min-detection-units 5)
(defconst extortionate-tech-villagers 100)
(defconst expensive-tech-villagers 70)
(defconst wood-unit-threshold 0)
(defconst food-unit-threshold 0)
(defconst gold-unit-threshold 0)
(defconst resign 1)
(defconst full-water-map 2)
(defconst partial-water-map 3)
(defconst water-map 4)
(defconst desired-military-buildings-per-type 5)
(defconst desired-town-centers 6)
(defconst desired-villagers 7)
(defconst desired-trade-carts 8)
(defconst desired-fishing-ships 9)
(defconst desired-units 11)
(defconst pop-cap-goal 12)
(defconst produce-units 13)
(defconst allow-navy 14)
(defconst do-research 15)
(defconst attacking 16)
(defconst temp 17)
(defconst produce-transport-ships 41)
(defconst produce-cannon-galleons 40)
(defconst produce-fire-ships 39)
(defconst produce-galleys 38)
(defconst produce-monks 37)
(defconst produce-unique-units 36)
(defconst produce-trebuchets 35)
(defconst produce-bombard-cannons 34)
(defconst produce-scorpions 33)
(defconst produce-mangonels 32)
(defconst produce-battering-rams 31)
(defconst produce-battle-elephants 30)
(defconst produce-camels 29)
(defconst produce-knights 28)
(defconst produce-scouts 27)
(defconst produce-eagles 26)
(defconst produce-spearmen 25)
(defconst produce-militia 24)
(defconst produce-cavalry-archers 23)
(defconst produce-skirmishers 22)
(defconst produce-hand-cannoneers 21)
(defconst produce-archers 20)
(defconst produce-fishing-ships 19)
(defconst produce-trade-carts 18)
(defconst good-fire-ships 59)
(defconst good-galleys 58)
(defconst good-unique-units 57)
(defconst good-monks 56)
(defconst good-scorpions 55)
(defconst good-mangonels 54)
(defconst good-battering-rams 53)
(defconst good-battle-elephants 52)
(defconst good-camels 51)
(defconst good-knights 50)
(defconst good-scouts 49)
(defconst good-eagles 48)
(defconst good-spearmen 47)
(defconst good-militia 46)
(defconst good-cavalry-archers 45)
(defconst good-skirmishers 44)
(defconst good-hand-cannoneers 43)
(defconst good-archers 42)
(defconst neutral-or-enemy-players-count 128)
(defconst enemy-players-count 127)
(defconst neutral-players-count 126)
(defconst ally-players-count 125)
(defconst unique-unit-is-cavalry 115)
(defconst unique-unit-is-infantry 116)
(defconst unique-unit-is-ranged 117)
(defconst unique-unit-is-cavalry-archer 118)
(defconst unique-unit-is-expensive 119)
(defconst unique-unit-counters-cavalry 120)
(defconst unique-unit-counters-infantry 121)
(defconst unique-unit-counters-ranged 122)
(defconst unique-unit-counters-cavalry-archer 123)
(defconst unique-unit-counters-unique-unit 124)
(defconst full-infantry-blacksmith-investment 114)
(defconst partial-infantry-blacksmith-investment 113)
(defconst full-cavalry-blacksmith-investment 112)
(defconst partial-cavalry-blacksmith-investment 111)
(defconst full-ranged-blacksmith-investment 110)
(defconst partial-ranged-blacksmith-investment 109)
(defconst infantry-blacksmith-techs-done 108)
(defconst cavalry-blacksmith-techs-done 107)
(defconst ranged-blacksmith-techs-done 106)
(defconst threat-target 105)
(defconst threat-source 104)
(defconst threat-player 103)
(defconst threat-time 102)
(defconst my-warboat-count 96)
(defconst target-warboat-count 97)
(defconst target-warboat-percentage 98)
(defconst largest-enemy-warboat-count 99)
(defconst largest-neutral-warboat-count 100)
(defconst largest-enemy-warboat-percentage 101)
(defconst my-civilian-population 90)
(defconst target-civilian-population 91)
(defconst target-civilian-percentage 92)
(defconst largest-enemy-civilian-population 93)
(defconst largest-neutral-civilian-population 94)
(defconst largest-enemy-civilian-percentage 95)
(defconst my-military-population 84)
(defconst target-military-population 85)
(defconst target-military-percentage 86)
(defconst largest-enemy-military-population 87)
(defconst largest-neutral-military-population 88)
(defconst largest-enemy-military-percentage 89)
(defconst target-player-score-delta 83)
(defconst target-player-score 82)
(defconst previous-target-player-score 81)
(defconst score-percentage 80)
(defconst lowest-enemy-score 79)
(defconst highest-enemy-score 78)
(defconst my-score 77)
(defconst town-center-count 76)
(defconst total-fishing-ships 75)
(defconst total-trade-carts 74)
(defconst total-villagers 73)
(defconst current-population-goal 72)
(defconst population-space-remaining 71)
(defconst no-gold-mining-start 70)
(defconst no-gold-mining-time 69)
(defconst game-time-goal 68)
(defconst non-escrowed-stone 67)
(defconst non-escrowed-gold 66)
(defconst non-escrowed-food 65)
(defconst non-escrowed-wood 64)
(defconst escrowed-stone 63)
(defconst escrowed-gold 62)
(defconst escrowed-food 61)
(defconst escrowed-wood 60)
(defconst team-game 129)
(defconst free-for-all 130)
(defconst locked-teams 131)
(defconst enough-wood-for-units 132)
(defconst enough-food-for-units 133)
(defconst enough-gold-for-units 134)
(defconst attempted-researches 136)
(defrule
    (and (strategic-number sn-food-gatherer-percentage == 0) (game-time >= 5))
=>
    (up-chat-data-to-all "wood gatherers: %d" s: sn-wood-gatherer-percentage)
    (up-chat-data-to-all "food gatherers: %d" s: sn-food-gatherer-percentage)
    (up-chat-data-to-all "gold gatherers: %d" s: sn-gold-gatherer-percentage)
    (up-chat-data-to-all "stone gatherers: %d" s: sn-stone-gatherer-percentage)
)
(defrule
    (true)
=>
    (set-strategic-number sn-enable-new-building-system 1)
    (set-strategic-number sn-percent-building-cancellation 20)
    (set-strategic-number sn-cap-civilian-builders 200)
    (set-difficulty-parameter ability-to-maintain-distance 0)
    (set-difficulty-parameter ability-to-dodge-missiles 100)
    (set-strategic-number sn-percent-attack-soldiers 100)
    (set-strategic-number sn-percent-attack-boats 100)
    (set-strategic-number sn-attack-intelligence 1)
    (set-strategic-number sn-livestock-to-town-center 1)
    (set-strategic-number sn-enable-patrol-attack 1)
    (set-strategic-number sn-intelligent-gathering 1)
    (set-strategic-number sn-local-targeting-mode 1)
    (set-strategic-number sn-retask-gather-amount 0)
    (set-strategic-number sn-target-evaluation-siege-weapon 500)
    (set-strategic-number sn-target-evaluation-boat 500)
    (set-strategic-number sn-ttkfactor-scalar 500)
    (set-strategic-number sn-percent-enemy-sighted-response 100)
    (set-strategic-number sn-task-ungrouped-soldiers 0)
    (set-strategic-number sn-gather-defense-units 1)
    (set-strategic-number sn-defer-dropsite-update 1)
    (set-strategic-number sn-do-not-scale-for-difficulty-level 1)
    (set-strategic-number sn-number-build-attempts-before-skip 5)
    (set-strategic-number sn-max-skips-per-attempt 5)
    (set-strategic-number sn-dropsite-separation-distance 8)
    (set-strategic-number sn-wall-targeting-mode 1)
    (disable-self)
)
(defrule
    (true)
=>
    (set-strategic-number sn-percent-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
    (set-strategic-number sn-total-number-explorers 1)
    (set-strategic-number sn-number-explore-groups 1)
    (set-strategic-number sn-initial-exploration-required 0)
    (disable-self)
)
(defrule
    (military-population == 0)
    (game-time < 60)
=>
    (set-strategic-number sn-percent-civilian-explorers 100)
    (set-strategic-number sn-cap-civilian-explorers 1)
    (disable-self)
)
(defrule
    (game-time >= 600)
    (strategic-number sn-cap-civilian-explorers == 1)
=>
    (set-strategic-number sn-percent-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-strategic-number sn-enable-boar-hunting 2)
    (set-strategic-number sn-minimum-number-hunters 3)
    (set-strategic-number sn-minimum-boar-lure-group-size 3)
    (set-strategic-number sn-minimum-boar-hunt-group-size 3)
    (set-strategic-number sn-wall-targeting-mode 1)
    (enable-wall-placement 1)
    (enable-wall-placement 2)
    (set-goal resign 0)
    (set-strategic-number sn-maximum-gold-drop-distance 8)
    (set-strategic-number sn-maximum-stone-drop-distance 8)
    (set-strategic-number sn-maximum-hunt-drop-distance 48)
    (set-strategic-number sn-maximum-attack-group-size 1)
    (set-strategic-number sn-minimum-attack-group-size 1)
    (set-strategic-number sn-special-attack-type2 villager)
    (set-goal full-water-map 0)
    (set-goal partial-water-map 0)
    (disable-self)
)
(defrule
    (and (building-type-count stone-wall-line == 0) (and (building-type-count palisade-wall == 0) (wall-completed-percentage 2 == 100)))
    (cc-players-unit-type-count 0 sea-fish >= 5)
=>
    (set-goal full-water-map 1)
    (disable-self)
)
(defrule
    (not (and (building-type-count stone-wall-line == 0) (and (building-type-count palisade-wall == 0) (wall-completed-percentage 2 == 100))))
    (cc-players-unit-type-count 0 sea-fish >= 5)
=>
    (set-goal partial-water-map 1)
    (disable-self)
)
(defrule
    (or (goal full-water-map 1) (goal partial-water-map 1))
=>
    (set-goal water-map 1)
    (disable-self)
)
(defrule
    (not (or (goal full-water-map 1) (goal partial-water-map 1)))
=>
    (set-goal water-map 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal desired-military-buildings-per-type 2)
    (set-goal desired-town-centers max-town-centers)
    (set-goal desired-villagers 120)
    (set-goal desired-trade-carts 30)
    (set-goal desired-fishing-ships 10)
    (set-goal 10 0)
    (disable-self)
    (generate-random-number 5)
)
(defrule
    (random-number == 1)
    (goal 10 0)
=>
    (set-goal 10 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 10 0)
=>
    (set-goal 10 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 10 0)
=>
    (set-goal 10 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 10 0)
=>
    (set-goal 10 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 10 0)
=>
    (set-goal 10 5)
    (disable-self)
)
(defrule
    (goal 10 1)
=>
    (set-goal desired-units 1)
    (disable-self)
)
(defrule
    (goal 10 2)
=>
    (set-goal desired-units 1)
    (disable-self)
)
(defrule
    (goal 10 3)
=>
    (set-goal desired-units 2)
    (disable-self)
)
(defrule
    (goal 10 4)
=>
    (set-goal desired-units 2)
    (disable-self)
)
(defrule
    (goal 10 5)
=>
    (set-goal desired-units 3)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal pop-cap-goal 0)
    (up-get-fact population-cap 0 pop-cap-goal)
    (up-modify-goal desired-villagers g:* pop-cap-goal)
    (up-modify-goal desired-villagers c:/ 200)
    (up-modify-goal desired-fishing-ships g:* pop-cap-goal)
    (up-modify-goal desired-fishing-ships c:/ 200)
    (set-goal produce-units 1)
    (disable-self)
)
(defrule
    (or (goal full-water-map 1) (goal partial-water-map 1))
=>
    (set-goal allow-navy 1)
    (disable-self)
)
(defrule
    (not (or (goal full-water-map 1) (goal partial-water-map 1)))
=>
    (set-goal allow-navy 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal do-research 1)
    (set-goal attacking 0)
    (up-assign-builders c: castle c: 8)
    (up-assign-builders c: town-center-foundation c: 4)
    (set-goal temp 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-modify-goal desired-trade-carts g:= desired-villagers)
    (up-modify-goal desired-trade-carts s:* sn-gold-gatherer-percentage)
    (up-modify-goal desired-trade-carts c:/ 100)
)
(defrule
    (true)
=>
    (set-goal produce-trade-carts 0)
    (set-goal produce-fishing-ships 0)
    (set-goal produce-archers 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-skirmishers 0)
    (set-goal produce-cavalry-archers 0)
    (set-goal produce-militia 0)
    (set-goal produce-spearmen 0)
    (set-goal produce-eagles 0)
    (set-goal produce-scouts 0)
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-battering-rams 0)
    (set-goal produce-mangonels 0)
    (set-goal produce-scorpions 0)
    (set-goal produce-bombard-cannons 0)
    (set-goal produce-trebuchets 0)
    (set-goal produce-unique-units 0)
    (set-goal produce-monks 0)
    (set-goal produce-galleys 0)
    (set-goal produce-fire-ships 0)
    (set-goal produce-cannon-galleons 0)
    (set-goal produce-transport-ships 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal good-archers 0)
    (set-goal good-hand-cannoneers 0)
    (set-goal good-skirmishers 0)
    (set-goal good-cavalry-archers 0)
    (set-goal good-militia 0)
    (set-goal good-spearmen 0)
    (set-goal good-eagles 0)
    (set-goal good-scouts 0)
    (set-goal good-knights 0)
    (set-goal good-camels 0)
    (set-goal good-battle-elephants 0)
    (set-goal good-battering-rams 0)
    (set-goal good-mangonels 0)
    (set-goal good-scorpions 0)
    (set-goal good-monks 0)
    (set-goal good-unique-units 0)
    (set-goal good-galleys 0)
    (set-goal good-fire-ships 0)
    (set-goal escrowed-wood 0)
    (set-goal escrowed-food 0)
    (set-goal escrowed-gold 0)
    (set-goal escrowed-stone 0)
    (set-goal non-escrowed-wood 0)
    (set-goal non-escrowed-food 0)
    (set-goal non-escrowed-gold 0)
    (set-goal non-escrowed-stone 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact escrow-amount wood escrowed-wood)
    (up-get-fact escrow-amount food escrowed-food)
    (up-get-fact escrow-amount gold escrowed-gold)
    (up-get-fact escrow-amount stone escrowed-stone)
    (up-get-fact resource-amount wood non-escrowed-wood)
    (up-get-fact resource-amount food non-escrowed-food)
    (up-get-fact resource-amount gold non-escrowed-gold)
    (up-get-fact resource-amount stone non-escrowed-stone)
    (up-modify-goal non-escrowed-wood g:- escrowed-wood)
    (up-modify-goal non-escrowed-food g:- escrowed-food)
    (up-modify-goal non-escrowed-gold g:- escrowed-gold)
    (up-modify-goal non-escrowed-stone g:- escrowed-stone)
)
(defrule
    (true)
=>
    (set-goal game-time-goal 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact game-time 0 game-time-goal)
)
(defrule
    (true)
=>
    (set-goal no-gold-mining-time 0)
    (set-goal no-gold-mining-start -1)
    (disable-self)
)
(defrule
    (goal no-gold-mining-start -1)
    (and (unit-type-count 579 == 0) (unit-type-count 581 == 0))
=>
    (up-get-fact game-time 0 no-gold-mining-start)
)
(defrule
    (not (and (unit-type-count 579 == 0) (unit-type-count 581 == 0)))
=>
    (set-goal no-gold-mining-start -1)
)
(defrule
    (goal no-gold-mining-start -1)
=>
    (set-goal no-gold-mining-time 0)
)
(defrule
    (not (goal no-gold-mining-start -1))
=>
    (up-get-fact game-time 0 no-gold-mining-time)
    (up-modify-goal no-gold-mining-time g:- no-gold-mining-start)
)
(defrule
    (true)
=>
    (set-goal population-space-remaining 0)
    (set-goal current-population-goal 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact population-cap 0 population-space-remaining)
    (up-get-fact population 0 current-population-goal)
    (up-modify-goal population-space-remaining g:- current-population-goal)
)
(defrule
    (true)
=>
    (set-goal total-villagers 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact unit-type-count villager total-villagers)
)
(defrule
    (true)
=>
    (set-goal total-trade-carts 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact unit-type-count trade-cart total-trade-carts)
)
(defrule
    (true)
=>
    (set-goal total-fishing-ships 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact unit-type-count fishing-ship total-fishing-ships)
)
(defrule
    (true)
=>
    (set-goal town-center-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total town-center town-center-count)
)
(defrule
    (true)
=>
    (set-goal my-score 0)
    (set-goal highest-enemy-score 0)
    (set-goal lowest-enemy-score 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact current-score 0 my-score)
    (up-get-fact-max any-enemy current-score 0 highest-enemy-score)
    (up-get-fact-min any-enemy current-score 0 lowest-enemy-score)
)
(defrule
    (true)
=>
    (set-goal score-percentage 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-modify-goal score-percentage g:= my-score)
    (up-modify-goal score-percentage c:* 100)
    (up-modify-goal score-percentage g:/ highest-enemy-score)
)
(defrule
    (true)
=>
    (set-goal previous-target-player-score 0)
    (set-goal target-player-score 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-target-fact current-score 0 target-player-score)
    (set-goal target-player-score-delta 0)
    (up-modify-goal target-player-score-delta g:= target-player-score)
    (up-modify-goal target-player-score-delta g:- previous-target-player-score)
    (up-modify-goal previous-target-player-score g:= target-player-score)
)
(defrule
    (true)
=>
    (set-goal my-military-population 0)
    (set-goal target-military-population 0)
    (set-goal target-military-percentage 0)
    (set-goal largest-enemy-military-population 0)
    (set-goal largest-neutral-military-population 0)
    (set-goal largest-enemy-military-percentage 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact military-population 0 my-military-population)
    (up-get-target-fact military-population 0 target-military-population)
    (up-get-fact-max any-enemy military-population 0 largest-enemy-military-population)
    (up-get-fact-max any-neutral military-population 0 largest-neutral-military-population)
    (up-modify-goal target-military-percentage g:= my-military-population)
    (up-modify-goal target-military-percentage c:* 100)
    (up-modify-goal largest-enemy-military-percentage g:= target-military-percentage)
    (up-modify-goal target-military-percentage g:/ target-military-population)
)
(defrule
    (up-compare-goal largest-neutral-military-population g:> largest-enemy-military-population)
=>
    (up-modify-goal largest-enemy-military-percentage g:/ largest-neutral-military-population)
)
(defrule
    (not (up-compare-goal largest-neutral-military-population g:> largest-enemy-military-population))
=>
    (up-modify-goal largest-enemy-military-percentage g:/ largest-enemy-military-population)
)
(defrule
    (true)
=>
    (set-goal my-civilian-population 0)
    (set-goal target-civilian-population 0)
    (set-goal target-civilian-percentage 0)
    (set-goal largest-enemy-civilian-population 0)
    (set-goal largest-neutral-civilian-population 0)
    (set-goal largest-enemy-civilian-percentage 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact civilian-population 0 my-civilian-population)
    (up-get-target-fact civilian-population 0 target-civilian-population)
    (up-get-fact-max any-enemy civilian-population 0 largest-enemy-civilian-population)
    (up-get-fact-max any-neutral civilian-population 0 largest-neutral-civilian-population)
    (up-modify-goal target-civilian-percentage g:= my-civilian-population)
    (up-modify-goal target-civilian-percentage c:* 100)
    (up-modify-goal largest-enemy-civilian-percentage g:= target-civilian-percentage)
    (up-modify-goal target-civilian-percentage g:/ target-civilian-population)
)
(defrule
    (up-compare-goal largest-neutral-civilian-population g:> largest-enemy-civilian-population)
=>
    (up-modify-goal largest-enemy-civilian-percentage g:/ largest-neutral-civilian-population)
)
(defrule
    (not (up-compare-goal largest-neutral-civilian-population g:> largest-enemy-civilian-population))
=>
    (up-modify-goal largest-enemy-civilian-percentage g:/ largest-enemy-civilian-population)
)
(defrule
    (true)
=>
    (set-goal my-warboat-count 0)
    (set-goal target-warboat-count 0)
    (set-goal target-warboat-percentage 0)
    (set-goal largest-enemy-warboat-count 0)
    (set-goal largest-neutral-warboat-count 0)
    (set-goal largest-enemy-warboat-percentage 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact warboat-count 0 my-warboat-count)
    (up-get-target-fact warboat-count 0 target-warboat-count)
    (up-get-fact-max any-enemy warboat-count 0 largest-enemy-warboat-count)
    (up-get-fact-max any-neutral warboat-count 0 largest-neutral-warboat-count)
    (up-modify-goal target-warboat-percentage g:= my-warboat-count)
    (up-modify-goal target-warboat-percentage c:* 100)
    (up-modify-goal largest-enemy-warboat-percentage g:= target-warboat-percentage)
    (up-modify-goal target-warboat-percentage g:/ target-warboat-count)
)
(defrule
    (up-compare-goal largest-neutral-warboat-count g:> largest-enemy-warboat-count)
=>
    (up-modify-goal largest-enemy-warboat-percentage g:/ largest-neutral-warboat-count)
)
(defrule
    (not (up-compare-goal largest-neutral-warboat-count g:> largest-enemy-warboat-count))
=>
    (up-modify-goal largest-enemy-warboat-percentage g:/ largest-enemy-warboat-count)
)
(defrule
    (true)
=>
    (set-goal threat-time 0)
    (set-goal threat-player 0)
    (set-goal threat-source 0)
    (set-goal threat-target 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-threat-data threat-time threat-player threat-source threat-target)
    (set-goal ranged-blacksmith-techs-done 0)
    (set-goal cavalry-blacksmith-techs-done 0)
    (set-goal infantry-blacksmith-techs-done 0)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-forging)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
)
(defrule
    (true)
=>
    (set-goal partial-ranged-blacksmith-investment 0)
    (set-goal full-ranged-blacksmith-investment 0)
    (set-goal partial-cavalry-blacksmith-investment 0)
    (set-goal full-cavalry-blacksmith-investment 0)
    (set-goal partial-infantry-blacksmith-investment 0)
    (set-goal full-infantry-blacksmith-investment 0)
)
(defrule
    (goal ranged-blacksmith-techs-done 1)
    (current-age == feudal-age)
=>
    (set-goal partial-ranged-blacksmith-investment 1)
)
(defrule
    (goal ranged-blacksmith-techs-done 2)
    (not (goal ranged-blacksmith-techs-done 1))
    (current-age == feudal-age)
=>
    (set-goal partial-ranged-blacksmith-investment 1)
    (set-goal full-ranged-blacksmith-investment 1)
)
(defrule
    (goal ranged-blacksmith-techs-done 3)
    (current-age == castle-age)
    (not (current-age == feudal-age))
=>
    (set-goal partial-ranged-blacksmith-investment 1)
)
(defrule
    (goal ranged-blacksmith-techs-done 4)
    (not (goal ranged-blacksmith-techs-done 3))
    (current-age == castle-age)
    (not (current-age == feudal-age))
=>
    (set-goal partial-ranged-blacksmith-investment 1)
    (set-goal full-ranged-blacksmith-investment 1)
)
(defrule
    (goal ranged-blacksmith-techs-done 5)
    (current-age == imperial-age)
    (not (current-age == feudal-age))
    (not (current-age == castle-age))
=>
    (set-goal partial-ranged-blacksmith-investment 1)
)
(defrule
    (goal ranged-blacksmith-techs-done 6)
    (not (goal ranged-blacksmith-techs-done 5))
    (current-age == imperial-age)
    (not (current-age == feudal-age))
    (not (current-age == castle-age))
=>
    (set-goal partial-ranged-blacksmith-investment 1)
    (set-goal full-ranged-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 1)
    (current-age == feudal-age)
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 2)
    (not (goal cavalry-blacksmith-techs-done 1))
    (current-age == feudal-age)
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
    (set-goal full-cavalry-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 3)
    (current-age == castle-age)
    (not (current-age == feudal-age))
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 4)
    (not (goal cavalry-blacksmith-techs-done 3))
    (current-age == castle-age)
    (not (current-age == feudal-age))
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
    (set-goal full-cavalry-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 5)
    (current-age == imperial-age)
    (not (current-age == feudal-age))
    (not (current-age == castle-age))
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 6)
    (not (goal cavalry-blacksmith-techs-done 5))
    (current-age == imperial-age)
    (not (current-age == feudal-age))
    (not (current-age == castle-age))
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
    (set-goal full-cavalry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 1)
    (current-age == feudal-age)
=>
    (set-goal partial-infantry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 2)
    (not (goal infantry-blacksmith-techs-done 1))
    (current-age == feudal-age)
=>
    (set-goal partial-infantry-blacksmith-investment 1)
    (set-goal full-infantry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 3)
    (current-age == castle-age)
    (not (current-age == feudal-age))
=>
    (set-goal partial-infantry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 4)
    (not (goal infantry-blacksmith-techs-done 3))
    (current-age == castle-age)
    (not (current-age == feudal-age))
=>
    (set-goal partial-infantry-blacksmith-investment 1)
    (set-goal full-infantry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 5)
    (current-age == imperial-age)
    (not (current-age == feudal-age))
    (not (current-age == castle-age))
=>
    (set-goal partial-infantry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 6)
    (not (goal infantry-blacksmith-techs-done 5))
    (current-age == imperial-age)
    (not (current-age == feudal-age))
    (not (current-age == castle-age))
=>
    (set-goal partial-infantry-blacksmith-investment 1)
    (set-goal full-infantry-blacksmith-investment 1)
)
(defrule
    (true)
=>
    (set-goal unique-unit-is-cavalry 0)
    (set-goal unique-unit-is-infantry 0)
    (set-goal unique-unit-is-ranged 0)
    (set-goal unique-unit-is-cavalry-archer 0)
    (set-goal unique-unit-is-expensive 0)
    (set-goal unique-unit-counters-cavalry 0)
    (set-goal unique-unit-counters-infantry 0)
    (set-goal unique-unit-counters-ranged 0)
    (set-goal unique-unit-counters-cavalry-archer 0)
    (set-goal unique-unit-counters-unique-unit 0)
    (disable-self)
)
(defrule
    (players-civ my-player-number aztec)
=>
    (set-goal unique-unit-is-infantry 1)
    (set-goal unique-unit-counters-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number berbers)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (set-goal unique-unit-counters-cavalry-archer 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number briton)
=>
    (set-goal unique-unit-is-ranged 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number burmese)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number byzantine)
=>
    (set-goal unique-unit-is-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number celtic)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number chinese)
=>
    (set-goal unique-unit-is-ranged 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number ethiopian)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number frankish)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number gothic)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number hun)
=>
    (set-goal unique-unit-is-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number incan)
=>
    (set-goal unique-unit-is-infantry 1)
    (set-goal unique-unit-counters-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number indian)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number italian)
=>
    (set-goal unique-unit-is-ranged 1)
    (set-goal unique-unit-counters-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number japanese)
=>
    (set-goal unique-unit-is-infantry 1)
    (set-goal unique-unit-counters-unique-unit 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number khmer)
=>
    (set-goal unique-unit-is-cavalry 1)
    (set-goal unique-unit-counters-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number korean)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (set-goal unique-unit-counters-ranged 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number magyar)
=>
    (set-goal unique-unit-is-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number malay)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number malian)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number mayan)
=>
    (set-goal unique-unit-is-ranged 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number mongol)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number persian)
=>
    (set-goal unique-unit-is-cavalry 1)
    (set-goal unique-unit-is-expensive 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number saracen)
=>
    (set-goal unique-unit-is-cavalry 1)
    (set-goal unique-unit-counters-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number slavic)
=>
    (set-goal unique-unit-is-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number spanish)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (set-goal unique-unit-is-expensive 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number teutonic)
=>
    (set-goal unique-unit-is-infantry 1)
    (set-goal unique-unit-is-expensive 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number turkish)
=>
    (set-goal unique-unit-is-ranged 1)
    (set-goal unique-unit-counters-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number vietnamese)
=>
    (set-goal unique-unit-is-ranged 1)
    (set-goal unique-unit-counters-ranged 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number viking)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal ally-players-count 0)
    (set-goal neutral-players-count 0)
    (set-goal enemy-players-count 0)
)
(defrule
    (stance-toward 1 ally)
    (player-in-game 1)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 1 neutral)
    (not (stance-toward 1 ally))
    (player-in-game 1)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 1 enemy)
    (not (stance-toward 1 ally))
    (not (stance-toward 1 neutral))
    (player-in-game 1)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 2 ally)
    (player-in-game 2)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 2 neutral)
    (not (stance-toward 2 ally))
    (player-in-game 2)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 2 enemy)
    (not (stance-toward 2 ally))
    (not (stance-toward 2 neutral))
    (player-in-game 2)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 3 ally)
    (player-in-game 3)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 3 neutral)
    (not (stance-toward 3 ally))
    (player-in-game 3)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 3 enemy)
    (not (stance-toward 3 ally))
    (not (stance-toward 3 neutral))
    (player-in-game 3)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 4 ally)
    (player-in-game 4)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 4 neutral)
    (not (stance-toward 4 ally))
    (player-in-game 4)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 4 enemy)
    (not (stance-toward 4 ally))
    (not (stance-toward 4 neutral))
    (player-in-game 4)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 5 ally)
    (player-in-game 5)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 5 neutral)
    (not (stance-toward 5 ally))
    (player-in-game 5)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 5 enemy)
    (not (stance-toward 5 ally))
    (not (stance-toward 5 neutral))
    (player-in-game 5)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 6 ally)
    (player-in-game 6)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 6 neutral)
    (not (stance-toward 6 ally))
    (player-in-game 6)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 6 enemy)
    (not (stance-toward 6 ally))
    (not (stance-toward 6 neutral))
    (player-in-game 6)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 7 ally)
    (player-in-game 7)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 7 neutral)
    (not (stance-toward 7 ally))
    (player-in-game 7)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 7 enemy)
    (not (stance-toward 7 ally))
    (not (stance-toward 7 neutral))
    (player-in-game 7)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 8 ally)
    (player-in-game 8)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 8 neutral)
    (not (stance-toward 8 ally))
    (player-in-game 8)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 8 enemy)
    (not (stance-toward 8 ally))
    (not (stance-toward 8 neutral))
    (player-in-game 8)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward my-player-number ally)
=>
    (up-modify-goal ally-players-count c:- 1)
)
(defrule
    (stance-toward my-player-number neutral)
    (not (stance-toward my-player-number ally))
=>
    (up-modify-goal neutral-players-count c:- 1)
)
(defrule
    (stance-toward my-player-number enemy)
    (not (stance-toward my-player-number ally))
    (not (stance-toward my-player-number neutral))
=>
    (up-modify-goal enemy-players-count c:- 1)
)
(defrule
    (true)
=>
    (set-goal neutral-or-enemy-players-count 0)
    (up-modify-goal neutral-or-enemy-players-count g:+ enemy-players-count)
    (up-modify-goal neutral-or-enemy-players-count g:+ neutral-players-count)
)
(defrule
    (true)
=>
    (set-goal team-game 0)
    (set-goal free-for-all 0)
    (set-goal locked-teams 1)
    (set-stance my-player-number enemy)
    (disable-self)
)
(defrule
    (stance-toward my-player-number enemy)
=>
    (set-goal locked-teams 0)
    (set-stance my-player-number ally)
    (disable-self)
)
(defrule
    (and (goal free-for-all 0) (and (players-stance any-ally ally) (stance-toward any-ally ally)))
=>
    (set-goal team-game 1)
    (disable-self)
)
(defrule
    (and (goal team-game 0) (and (player-valid 1) (and (player-valid 2) (player-valid 3))))
=>
    (set-goal free-for-all 1)
    (disable-self)
)
(defrule
    (wood-amount >= wood-unit-threshold)
=>
    (set-goal enough-wood-for-units 1)
)
(defrule
    (not (wood-amount >= wood-unit-threshold))
=>
    (set-goal enough-wood-for-units 0)
)
(defrule
    (food-amount >= food-unit-threshold)
=>
    (set-goal enough-food-for-units 1)
)
(defrule
    (not (food-amount >= food-unit-threshold))
=>
    (set-goal enough-food-for-units 0)
)
(defrule
    (gold-amount >= gold-unit-threshold)
=>
    (set-goal enough-gold-for-units 1)
)
(defrule
    (not (gold-amount >= gold-unit-threshold))
=>
    (set-goal enough-gold-for-units 0)
)
(defrule
    (and (goal attacking 0) (town-under-attack))
=>
    (set-goal enough-wood-for-units 1)
    (set-goal enough-food-for-units 1)
    (set-goal enough-gold-for-units 1)
)
(defrule
    (current-age == dark-age)
=>
    (set-goal desired-military-buildings-per-type 1)
)
(defrule
    (current-age == feudal-age)
    (not (current-age == dark-age))
=>
    (set-goal desired-military-buildings-per-type 2)
)
(defrule
    (current-age == castle-age)
    (not (current-age == dark-age))
    (not (current-age == feudal-age))
=>
    (set-goal desired-military-buildings-per-type 3)
)
(defrule
    (current-age == imperial-age)
    (not (current-age == feudal-age))
    (not (current-age == dark-age))
    (not (current-age == castle-age))
=>
    (set-goal desired-military-buildings-per-type 5)
)
(defrule
    (true)
=>
    (set-strategic-number sn-minimum-town-size 8)
    (set-strategic-number sn-maximum-town-size 8)
    (set-strategic-number sn-safe-town-size 8)
    (set-strategic-number sn-maximum-food-drop-distance 8)
    (enable-timer 1 60)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal 135 0)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: farm > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: archery-range > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: barracks > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: blacksmith > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: bombard-tower > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: castle > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: guard-tower > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: house > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: keep > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: market > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: monastery > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: outpost > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: siege-workshop > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: stable > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: town-center > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: university > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: watch-tower > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: watch-tower-line > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (up-pending-objects c: wonder > 0)
=>
    (set-goal 135 1)
)
(defrule
    (goal 135 0)
    (strategic-number sn-maximum-town-size < 30)
    (strategic-number sn-minimum-town-size > 8)
    (timer-triggered 1)
=>
    (up-modify-sn sn-minimum-town-size c:- 1)
    (up-modify-sn sn-maximum-town-size s:= sn-minimum-town-size)
    (up-modify-sn sn-safe-town-size s:= sn-minimum-town-size)
    (up-modify-sn sn-maximum-food-drop-distance s:= sn-minimum-town-size)
    (disable-timer 1)
    (enable-timer 1 60)
)
(defrule
    (goal 135 1)
    (unit-type-count 118 == 0)
    (unit-type-count 212 == 0)
    (civilian-population >= 2)
    (strategic-number sn-maximum-town-size < 30)
=>
    (up-modify-sn sn-minimum-town-size c:+ 5)
    (up-modify-sn sn-minimum-town-size c:min 30)
    (up-modify-sn sn-maximum-town-size s:= sn-minimum-town-size)
    (up-modify-sn sn-safe-town-size s:= sn-minimum-town-size)
    (up-modify-sn sn-maximum-food-drop-distance s:= sn-minimum-town-size)
)
(defrule
    (goal attempted-researches 0)
=>
    (set-strategic-number sn-enable-training-queue 1)
)
(defrule
    (not (goal attempted-researches 0))
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (true)
=>
    (set-goal attempted-researches 0)
)
(defrule
    (can-build-with-escrow town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (game-time < 60)
=>
    (release-escrow wood)
    (release-escrow stone)
    (build town-center)
)
(defrule
    (and (game-time < 60) (unit-type-count-total live-sheep == 0))
=>
    (set-strategic-number sn-percent-civilian-explorers 100)
    (set-strategic-number sn-cap-civilian-explorers 200)
    (set-strategic-number sn-total-number-explorers 200)
    (set-strategic-number sn-number-explore-groups 200)
)
(defrule
    (not (and (game-time < 60) (unit-type-count-total live-sheep == 0)))
=>
    (set-strategic-number sn-cap-civilian-explorers 1)
    (set-strategic-number sn-total-number-explorers 1)
    (set-strategic-number sn-number-explore-groups 1)
)
(defrule
    (or (military-population >= 1) (game-time >= 400))
    (not (and (game-time < 60) (unit-type-count-total live-sheep == 0)))
=>
    (set-strategic-number sn-percent-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-strategic-number sn-enable-boar-hunting 2)
    (set-strategic-number sn-minimum-number-hunters 1)
    (set-strategic-number sn-minimum-boar-lure-group-size 1)
    (set-strategic-number sn-minimum-boar-hunt-group-size 1)
    (set-strategic-number sn-maximum-hunt-drop-distance 48)
    (disable-self)
)
(defrule
    (dropsite-min-distance live-boar < 4)
    (strategic-number sn-minimum-number-hunters != 8)
=>
    (up-request-hunters c: 8)
    (set-strategic-number sn-minimum-number-hunters 8)
)
(defrule
    (strategic-number sn-minimum-number-hunters == 8)
    (and (dropsite-min-distance live-boar > 4) (or (dropsite-min-distance boar-food > 4) (dropsite-min-distance boar-food == -1)))
=>
    (set-strategic-number sn-minimum-number-hunters 1)
    (up-retask-gatherers food c: 255)
)
(defrule
    (strategic-number sn-task-ungrouped-soldiers == 1)
=>
    (set-strategic-number sn-task-ungrouped-soldiers 0)
)
(defrule
    (true)
=>
    (enable-timer 2 30)
    (disable-self)
)
(defrule
    (goal attacking 0)
    (timer-triggered 2)
=>
    (set-strategic-number sn-task-ungrouped-soldiers 1)
)
(defrule
    (timer-triggered 2)
=>
    (disable-timer 2)
    (enable-timer 2 30)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
=>
    (build monastery)
)
(defrule
    (can-train monk)
    (unit-type-count-total monk-set < 1)
=>
    (train monk)
)
(defrule
    (building-type-count house == 0)
=>
    (up-assign-builders c: house c: 2)
    (disable-self)
)
(defrule
    (not (building-type-count house == 0))
=>
    (up-assign-builders c: house c: 1)
    (disable-self)
)
(defrule
    (population-headroom != 0)
    (up-pending-objects c: house == 0)
    (can-build house)
    (housing-headroom < 5)
=>
    (build house)
)
(defrule
    (true)
=>
    (set-goal 137 0)
    (disable-self)
)
(defrule
    (dropsite-min-distance wood > 2)
    (dropsite-min-distance wood != -1)
    (resource-found wood)
    (up-pending-objects c: lumber-camp == 0)
    (can-build lumber-camp)
=>
    (build lumber-camp)
    (set-goal 137 1)
)
(defrule
    (goal 137 1)
=>
    (up-modify-sn sn-camp-max-distance c:+ 1)
)
(defrule
    (true)
=>
    (set-goal 137 0)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (current-age >= castle-age)
    (up-compare-goal town-center-count g:< desired-town-centers)
=>
    (build market)
)
(defrule
    (stone-amount < 100)
    (can-buy-commodity stone)
    (strategic-number sn-stone-gatherer-percentage == 0)
    (current-age >= castle-age)
    (up-compare-goal town-center-count g:< desired-town-centers)
=>
    (buy-commodity stone)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (up-compare-goal town-center-count g:< desired-town-centers)
=>
    (build town-center)
)
(defrule
    (up-pending-objects c: castle == 0)
=>
    (set-goal 138 0)
    (generate-random-number 2)
)
(defrule
    (random-number == 1)
    (goal 138 0)
    (up-pending-objects c: castle == 0)
=>
    (set-goal 138 1)
)
(defrule
    (random-number == 2)
    (goal 138 0)
    (up-pending-objects c: castle == 0)
=>
    (set-goal 138 2)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (goal 138 1)
    (up-pending-objects c: castle == 0)
=>
    (build castle)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (goal attacking 1)
    (goal 138 2)
    (up-pending-objects c: castle == 0)
=>
    (up-set-placement-data any-enemy town-center c: 0)
    (up-build place-forward 0 c: castle)
)
(defrule
    (true)
=>
    (set-goal 139 0)
    (disable-self)
)
(defrule
    (or (dropsite-min-distance gold > 3) (and (unit-type-count 579 == 0) (and (unit-type-count 581 == 0) (strategic-number sn-gold-gatherer-percentage > 0))))
    (dropsite-min-distance gold != -1)
    (resource-found gold)
    (up-pending-objects c: mining-camp == 0)
    (can-build mining-camp)
    (strategic-number sn-gold-gatherer-percentage > 0)
=>
    (build mining-camp)
    (set-goal 139 1)
)
(defrule
    (dropsite-min-distance stone > 3)
    (dropsite-min-distance stone != -1)
    (resource-found stone)
    (up-pending-objects c: mining-camp == 0)
    (can-build mining-camp)
    (strategic-number sn-stone-gatherer-percentage > 0)
=>
    (build mining-camp)
    (set-goal 139 1)
)
(defrule
    (goal 139 1)
=>
    (up-modify-sn sn-camp-max-distance c:+ 4)
)
(defrule
    (true)
=>
    (set-goal 139 0)
)
(defrule
    (current-age == dark-age)
=>
    (set-strategic-number sn-wood-gatherer-percentage 20)
    (set-strategic-number sn-food-gatherer-percentage 80)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (civilian-population >= 10)
    (current-age == dark-age)
=>
    (set-strategic-number sn-wood-gatherer-percentage 25)
    (set-strategic-number sn-food-gatherer-percentage 75)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (civilian-population >= 15)
    (current-age == dark-age)
=>
    (set-strategic-number sn-wood-gatherer-percentage 30)
    (set-strategic-number sn-food-gatherer-percentage 70)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (civilian-population >= 18)
    (current-age == dark-age)
=>
    (set-strategic-number sn-wood-gatherer-percentage 40)
    (set-strategic-number sn-food-gatherer-percentage 60)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (civilian-population >= 25)
    (current-age == dark-age)
=>
    (set-strategic-number sn-wood-gatherer-percentage 50)
    (set-strategic-number sn-food-gatherer-percentage 50)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (dropsite-min-distance food > 3)
    (dropsite-min-distance food != -1)
    (resource-found food)
    (up-pending-objects c: mill == 0)
    (can-build mill)
    (current-age == dark-age)
=>
    (build mill)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total lumber-camp >= 1)
    (current-age == dark-age)
=>
    (build mill)
)
(defrule
    (can-build mill)
    (building-type-count-total mill == 0)
    (game-time >= 360)
    (current-age == dark-age)
=>
    (build mill)
)
(defrule
    (and (wood-amount >= 100) (up-pending-objects c: farm == 0))
    (current-age == dark-age)
=>
    (up-get-fact unit-type-count villager 140)
    (up-modify-goal 140 s:* sn-food-gatherer-percentage)
    (up-modify-goal 140 c:/ 100)
    (up-get-fact building-type-count-total farm 141)
)
(defrule
    (up-compare-goal 141 g:< 140)
    (can-build farm)
    (and (wood-amount >= 100) (up-pending-objects c: farm == 0))
    (current-age == dark-age)
=>
    (build farm)
)
(defrule
    (and (food-amount < 50) (up-pending-objects c: villager <= 1))
    (current-age == dark-age)
=>
    (up-drop-resources sheep-food c: 5)
    (up-drop-resources farm-food c: 5)
    (up-drop-resources forage-food c: 5)
    (up-drop-resources deer-food c: 20)
    (up-drop-resources boar-food c: 10)
)
(defrule
    (goal produce-unique-units 1)
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-strategic-number sn-wood-gatherer-percentage 37)
    (set-strategic-number sn-food-gatherer-percentage 37)
    (set-strategic-number sn-gold-gatherer-percentage 18)
    (set-strategic-number sn-stone-gatherer-percentage 8)
    (disable-self)
)
(defrule
    (not (goal produce-unique-units 1))
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-goal 142 0)
    (disable-self)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 142 0)
    (not (goal produce-unique-units 1))
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-goal 142 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 142 0)
    (not (goal produce-unique-units 1))
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-goal 142 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 142 0)
    (not (goal produce-unique-units 1))
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-goal 142 3)
    (disable-self)
)
(defrule
    (goal 142 1)
    (not (goal produce-unique-units 1))
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-strategic-number sn-wood-gatherer-percentage 37)
    (set-strategic-number sn-food-gatherer-percentage 37)
    (set-strategic-number sn-gold-gatherer-percentage 18)
    (set-strategic-number sn-stone-gatherer-percentage 8)
    (disable-self)
)
(defrule
    (goal 142 2)
    (not (goal produce-unique-units 1))
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-strategic-number sn-wood-gatherer-percentage 38)
    (set-strategic-number sn-food-gatherer-percentage 38)
    (set-strategic-number sn-gold-gatherer-percentage 20)
    (set-strategic-number sn-stone-gatherer-percentage 4)
    (disable-self)
)
(defrule
    (goal 142 3)
    (not (goal produce-unique-units 1))
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-strategic-number sn-wood-gatherer-percentage 40)
    (set-strategic-number sn-food-gatherer-percentage 40)
    (set-strategic-number sn-gold-gatherer-percentage 20)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (population-headroom != 0)
    (up-pending-objects c: house == 0)
    (can-build house)
    (housing-headroom < 20)
    (up-research-status c: feudal-age >= research-pending)
=>
    (build house)
)
(defrule
    (wood-amount >= 200)
    (up-research-status c: feudal-age >= research-pending)
=>
    (up-get-fact unit-type-count villager 143)
    (up-modify-goal 143 s:* sn-food-gatherer-percentage)
    (up-modify-goal 143 c:/ 100)
    (up-get-fact building-type-count-total farm 144)
)
(defrule
    (up-compare-goal 144 g:< 143)
    (can-build farm)
    (wood-amount >= 200)
    (up-research-status c: feudal-age >= research-pending)
=>
    (build farm)
)
(defrule
    (current-age >= castle-age)
=>
    (delete-building stone-wall-line)
    (delete-building palisade-wall)
    (delete-building gate)
)
(defrule
    (not (game-time >= 8))
=>
    (up-jump-rule 968)
)
(defrule
    (true)
=>
    (set-goal attack-ready 0)
    (set-goal attacking 0)
    (set-goal do-backstep 0)
    (set-goal emergency-trash 0)
    (set-goal be-smart 1)
    (disable-self)
)
(defrule
    (not (or (civilian-population >= 25) (or (death-match-game) (population-cap < 200))))
=>
    (up-jump-rule 8)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: feudal-age < research-pending)
    (research-available feudal-age)
    (not (research-completed feudal-age))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research feudal-age)
    (goal do-research 1)
    (research-available feudal-age)
    (not (research-completed feudal-age))
=>
    (research feudal-age)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 20)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 8)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: feudal-age < research-pending)
    (research-available feudal-age)
    (not (research-completed feudal-age))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research feudal-age)
    (goal do-research 1)
    (research-available feudal-age)
    (not (research-completed feudal-age))
=>
    (research feudal-age)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (and (and (building-type-count archery-range == 0) (building-type-count stable == 0)) (not (research-completed castle-age))))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
)
(defrule
    (gold-amount > 400)
    (can-buy-commodity food)
    (food-amount < 800)
    (not (research-completed castle-age))
=>
    (buy-commodity food)
)
(defrule
    (food-amount > 900)
    (can-sell-commodity food)
    (gold-amount < 200)
    (not (research-completed castle-age))
=>
    (sell-commodity food)
)
(defrule
    (wood-amount > 400)
    (can-sell-commodity wood)
    (gold-amount < 200)
    (not (research-completed castle-age))
=>
    (sell-commodity wood)
)
(defrule
    (up-research-status c: castle-age < research-pending)
    (research-available castle-age)
    (not (research-completed castle-age))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research castle-age)
    (goal do-research 1)
    (research-available castle-age)
    (not (research-completed castle-age))
=>
    (research castle-age)
)
(defrule
    (not (and (and (current-age == castle-age) (or (civilian-population >= expensive-tech-villagers) (or (population-cap < 200) (can-afford-research imperial-age)))) (not (current-age == feudal-age))))
=>
    (up-jump-rule 31)
)
(defrule
    (not (not (research-completed imperial-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed imperial-age)))
=>
    (up-jump-rule 20)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 8)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed feudal-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: feudal-age < research-pending)
    (research-available feudal-age)
    (not (research-completed feudal-age))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research feudal-age)
    (goal do-research 1)
    (research-available feudal-age)
    (not (research-completed feudal-age))
=>
    (research feudal-age)
)
(defrule
    (not (not (research-completed castle-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (and (and (building-type-count archery-range == 0) (building-type-count stable == 0)) (not (research-completed castle-age))))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
)
(defrule
    (gold-amount > 400)
    (can-buy-commodity food)
    (food-amount < 800)
    (not (research-completed castle-age))
=>
    (buy-commodity food)
)
(defrule
    (food-amount > 900)
    (can-sell-commodity food)
    (gold-amount < 200)
    (not (research-completed castle-age))
=>
    (sell-commodity food)
)
(defrule
    (wood-amount > 400)
    (can-sell-commodity wood)
    (gold-amount < 200)
    (not (research-completed castle-age))
=>
    (sell-commodity wood)
)
(defrule
    (up-research-status c: castle-age < research-pending)
    (research-available castle-age)
    (not (research-completed castle-age))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research castle-age)
    (goal do-research 1)
    (research-available castle-age)
    (not (research-completed castle-age))
=>
    (research castle-age)
)
(defrule
    (not (and (or (building-type-count monastery == 0) (building-type-count university == 0)) (and (strategic-number sn-stone-gatherer-percentage > 0) (not (research-completed imperial-age)))))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (and (not (strategic-number sn-stone-gatherer-percentage > 0)) (not (research-completed imperial-age))))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (and (not (strategic-number sn-stone-gatherer-percentage > 0)) (not (research-completed imperial-age))))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: imperial-age < research-pending)
    (research-available imperial-age)
    (not (research-completed imperial-age))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research imperial-age)
    (goal do-research 1)
    (research-available imperial-age)
    (not (research-completed imperial-age))
=>
    (research imperial-age)
)
(defrule
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-goal attack-ready 1)
)
(defrule
    (not (and (current-age >= imperial-age) (building-type-count castle >= 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-conscription)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-conscription < research-pending)
    (and (research-available ri-conscription) (building-type-count castle >= 1))
    (not (research-completed ri-conscription))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-conscription)
    (goal do-research 1)
    (and (research-available ri-conscription) (building-type-count castle >= 1))
    (not (research-completed ri-conscription))
=>
    (research ri-conscription)
)
(defrule
    (not (players-unit-type-count any-enemy monk-set >= 10))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-heresy)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (up-research-status c: ri-heresy < research-pending)
    (research-available ri-heresy)
    (not (research-completed ri-heresy))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heresy)
    (goal do-research 1)
    (research-available ri-heresy)
    (not (research-completed ri-heresy))
=>
    (research ri-heresy)
)
(defrule
    (not (and (current-age == imperial-age) (goal team-game 1)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-banking)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
)
(defrule
    (not (not (research-completed ri-banking)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-coinage)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
)
(defrule
    (up-research-status c: ri-coinage < research-pending)
    (research-available ri-coinage)
    (not (research-completed ri-coinage))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-coinage)
    (goal do-research 1)
    (research-available ri-coinage)
    (not (research-completed ri-coinage))
=>
    (research ri-coinage)
)
(defrule
    (up-research-status c: ri-banking < research-pending)
    (research-available ri-banking)
    (not (research-completed ri-banking))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-banking)
    (goal do-research 1)
    (research-available ri-banking)
    (not (research-completed ri-banking))
=>
    (research ri-banking)
)
(defrule
    (and (or (goal threat-source town-center) (goal threat-source castle)) (up-compare-goal threat-target c:!= battering-ram-line))
    (and (unit-type-count battering-ram-line == 0) (and (unit-type-count trebuchet-set == 0) (unit-type-count bombard-cannon == 0)))
    (or (cc-players-unit-type-count target-player tc-arrow > 0) (or (cc-players-unit-type-count target-player castle-arrow > 0) (or (cc-players-unit-type-count target-player castle-arrow-chemistry > 0) (cc-players-unit-type-count target-player
watch-tower-arrow > 0))))
    (goal attacking 1)
=>
    (set-goal do-backstep 1)
)
(defrule
    (and (building-type-count town-center-foundation >= 1) (building-type-count town-center == 0))
=>
    (delete-building farm)
)
(defrule
    (and (up-compare-goal population-space-remaining > 10) (and (up-compare-goal desired-military-buildings-per-type c:< 8) (and (wood-amount >= 1000) (and (food-amount >= 1000) (gold-amount >= 1000)))))
=>
    (enable-timer 3 600)
    (disable-self)
)
(defrule
    (timer-triggered 3)
    (and (up-compare-goal population-space-remaining > 10) (and (up-compare-goal desired-military-buildings-per-type c:< 8) (and (wood-amount >= 1000) (and (food-amount >= 1000) (gold-amount >= 1000)))))
=>
    (up-modify-goal desired-military-buildings-per-type c:+ 1)
    (up-modify-goal desired-town-centers c:+ 1)
    (disable-timer 3)
    (enable-timer 3 600)
)
(defrule
    (true)
=>
    (set-goal 149 0)
    (disable-self)
    (generate-random-number 2)
)
(defrule
    (random-number == 1)
    (goal 149 0)
=>
    (set-goal 149 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 149 0)
=>
    (set-goal 149 2)
    (disable-self)
)
(defrule
    (not (goal 149 1))
=>
    (up-jump-rule 61)
)
(defrule
    (not (and (current-age >= imperial-age) (building-type-count castle >= 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-hoardings)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-hoardings < research-pending)
    (and (research-available ri-hoardings) (building-type-count castle >= 1))
    (not (research-completed ri-hoardings))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-hoardings)
    (goal do-research 1)
    (and (research-available ri-hoardings) (building-type-count castle >= 1))
    (not (research-completed ri-hoardings))
=>
    (research ri-hoardings)
)
(defrule
    (not (and (current-age == imperial-age) (current-age >= castle-age)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-architecture)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (not (not (research-completed ri-architecture)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-masonry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-masonry < research-pending)
    (research-available ri-masonry)
    (not (research-completed ri-masonry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-masonry)
    (goal do-research 1)
    (research-available ri-masonry)
    (not (research-completed ri-masonry))
=>
    (research ri-masonry)
)
(defrule
    (up-research-status c: ri-architecture < research-pending)
    (research-available ri-architecture)
    (not (research-completed ri-architecture))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-architecture)
    (goal do-research 1)
    (research-available ri-architecture)
    (not (research-completed ri-architecture))
=>
    (research ri-architecture)
)
(defrule
    (not (and (not (current-age == imperial-age)) (current-age >= castle-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-masonry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-masonry < research-pending)
    (research-available ri-masonry)
    (not (research-completed ri-masonry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-masonry)
    (goal do-research 1)
    (research-available ri-masonry)
    (not (research-completed ri-masonry))
=>
    (research ri-masonry)
)
(defrule
    (not (and (building-type-count castle >= 1) (current-age >= castle-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-murder-holes)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-murder-holes < research-pending)
    (research-available ri-murder-holes)
    (not (research-completed ri-murder-holes))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-murder-holes)
    (goal do-research 1)
    (research-available ri-murder-holes)
    (not (research-completed ri-murder-holes))
=>
    (research ri-murder-holes)
)
(defrule
    (not (and (current-age == imperial-age) (and (building-type-count castle >= 1) (current-age >= castle-age))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (research ri-bracer)
)
(defrule
    (not (and (not (current-age == imperial-age)) (and (building-type-count castle >= 1) (current-age >= castle-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
=>
    (set-goal 150 0)
    (disable-self)
    (generate-random-number 2)
)
(defrule
    (random-number == 1)
    (goal 150 0)
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
=>
    (set-goal 150 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 150 0)
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
=>
    (set-goal 150 2)
    (disable-self)
)
(defrule
    (goal 150 1)
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
=>
    (enable-wall-placement 2)
    (disable-self)
)
(defrule
    (can-build-wall 2 stone-wall-line)
    (goal 150 1)
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
=>
    (build-wall 2 stone-wall-line)
)
(defrule
    (building-type-count-total stone-wall-line > 0)
    (can-build-gate 2)
    (building-type-count-total gate < 5)
    (goal 150 1)
    (and (strategic-number sn-stone-gatherer-percentage > 0) (false))
=>
    (build-gate 2)
)
(defrule
    (not (and (goal 150 1) (and (strategic-number sn-stone-gatherer-percentage > 0) (false))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fortified-wall)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-fortified-wall < research-pending)
    (research-available ri-fortified-wall)
    (not (research-completed ri-fortified-wall))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fortified-wall)
    (goal do-research 1)
    (research-available ri-fortified-wall)
    (not (research-completed ri-fortified-wall))
=>
    (research ri-fortified-wall)
)
(defrule
    (not (goal 149 2))
=>
    (up-jump-rule 5)
)
(defrule
    (not (and (current-age >= castle-age) (building-type-count castle >= 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-murder-holes)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-murder-holes < research-pending)
    (research-available ri-murder-holes)
    (not (research-completed ri-murder-holes))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-murder-holes)
    (goal do-research 1)
    (research-available ri-murder-holes)
    (not (research-completed ri-murder-holes))
=>
    (research ri-murder-holes)
)
(defrule
    (goal attack-ready 1)
=>
    (chat-local-to-self "attack ready!")
    (disable-self)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 64)
)
(defrule
    (true)
=>
    (set-goal good-archers 0)
    (set-goal good-hand-cannoneers 0)
    (set-goal good-skirmishers 0)
    (set-goal good-cavalry-archers 0)
    (set-goal good-militia 0)
    (set-goal good-spearmen 0)
    (set-goal good-eagles 0)
    (set-goal good-scouts 0)
    (set-goal good-knights 0)
    (set-goal good-camels 0)
    (set-goal good-battle-elephants 0)
    (set-goal good-battering-rams 0)
    (set-goal good-mangonels 0)
    (set-goal good-scorpions 0)
    (set-goal good-monks 0)
    (set-goal good-unique-units 0)
    (set-goal good-galleys 0)
    (set-goal good-fire-ships 0)
    (set-goal good-unique-units 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number aztec)
=>
    (set-goal good-eagles 1)
    (set-goal good-monks 1)
    (set-goal good-militia 1)
    (set-goal good-fire-ships 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number berbers)
=>
    (set-goal good-unique-units 0)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-camels 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number briton)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number burmese)
=>
    (set-goal good-scouts 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-battle-elephants 1)
    (set-goal good-monks 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number byzantine)
=>
    (set-goal good-speamen 1)
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-camels 1)
    (set-goal good-battering-rams 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-monks 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number celtic)
=>
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-mangonels 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number chinese)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-miltia 1)
    (set-goal good-spearmen 1)
    (set-goal good-camels 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number ethiopian)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-spearmen 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number frankish)
=>
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-knights 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number gothic)
=>
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number hun)
=>
    (set-goal good-cavalry-archers 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number incan)
=>
    (set-goal good-eagles 1)
    (set-goal good-militia 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-archers 1)
    (set-goal good-spearmen 1)
    (set-goal good-skirmishers 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number indian)
=>
    (set-goal good-skirmishers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-camels 1)
    (set-goal good-scouts 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number italian)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-monks 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number japanese)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-monks 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number khmer)
=>
    (set-goal good-spearmen 1)
    (set-goal good-battle-elephants 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number korean)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-mangonels 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number magyar)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number malay)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-battle-elephants 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number malian)
=>
    (set-goal good-mangonels 1)
    (set-goal good-militia 1)
    (set-goal good-hand-cannoneer 1)
    (set-goal good-galleys 1)
    (set-goal good-knights 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number mayan)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-eagles 1)
    (set-goal good-spearmen 1)
    (set-goal good-battering-rams 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number mongol)
=>
    (set-goal good-cavalry-archers 1)
    (set-goal good-scouts 1)
    (set-goal good-militia 1)
    (set-goal good-battering-rams 1)
    (set-goal good-mangonels 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number persian)
=>
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
    (set-goal good-camels 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-spearmen 1)
    (set-goal good-battering-rams 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number portuguese)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-knights 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number saracen)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-camels 1)
    (set-goal good-monks 1)
    (set-goal good-battering-rams 1)
    (set-goal good-mangonels 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number slavic)
=>
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scouts 1)
    (set-goal good-monks 1)
    (set-goal good-battering-rams 1)
    (set-goal good-mangonels 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number spanish)
=>
    (set-goal good-skirmishers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
    (set-goal good-monks 1)
    (set-goal good-battering-rams 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number teutonic)
=>
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-monks 1)
    (set-goal good-mangonels 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number turkish)
=>
    (set-goal good-hand-cannoneers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-camels 1)
    (set-goal good-battering-rams 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number vietnamese)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-battle-elephants 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number viking)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal enemy-good-archers 0)
    (set-goal enemy-good-hand-cannoneers 0)
    (set-goal enemy-good-skirmishers 0)
    (set-goal enemy-good-cavalry-archers 0)
    (set-goal enemy-good-militia 0)
    (set-goal enemy-good-spearmen 0)
    (set-goal enemy-good-eagles 0)
    (set-goal enemy-good-scouts 0)
    (set-goal enemy-good-knights 0)
    (set-goal enemy-good-camels 0)
    (set-goal enemy-good-battle-elephants 0)
    (set-goal enemy-good-battering-rams 0)
    (set-goal enemy-good-mangonels 0)
    (set-goal enemy-good-scorpions 0)
    (set-goal enemy-good-monks 0)
    (set-goal enemy-good-unique-units 0)
    (set-goal enemy-good-galleys 0)
    (set-goal enemy-good-fire-ships 0)
    (set-goal enemy-good-unique-units 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy aztec)
=>
    (set-goal enemy-good-eagles 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-fire-ships 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy berbers)
=>
    (set-goal enemy-good-unique-units 0)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy briton)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy burmese)
=>
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-battle-elephants 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy byzantine)
=>
    (set-goal enemy-good-speamen 1)
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy celtic)
=>
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy chinese)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-miltia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy ethiopian)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy frankish)
=>
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy gothic)
=>
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy hun)
=>
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy incan)
=>
    (set-goal enemy-good-eagles 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy indian)
=>
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy italian)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy japanese)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy khmer)
=>
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-battle-elephants 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy korean)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy magyar)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy malay)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-battle-elephants 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy malian)
=>
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-hand-cannoneer 1)
    (set-goal enemy-good-galleys 1)
    (set-goal enemy-good-knights 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy mayan)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-eagles 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy mongol)
=>
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy persian)
=>
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy portuguese)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy saracen)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy slavic)
=>
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy spanish)
=>
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy teutonic)
=>
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy turkish)
=>
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy vietnamese)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-battle-elephants 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy viking)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (and (up-compare-goal no-gold-mining-time c:>= 120) (and (resource-found gold) (and (goal produce-trade-carts 0) (game-time >= 1800))))
    (goal attack-ready 1)
=>
    (set-goal emergency-trash 1)
)
(defrule
    (not (and (goal emergency-trash 1) (goal attack-ready 1)))
=>
    (up-jump-rule 17)
)
(defrule
    (and (gold-amount < 3000) (and (up-compare-goal no-gold-mining-time c:>= 120) (and (resource-found gold) (and (goal produce-trade-carts 0) (game-time >= 1800)))))
=>
    (set-goal emergency-trash 1)
)
(defrule
    (goal emergency-trash 1)
=>
    (up-modify-goal desired-military-buildings-per-type c:+ 3)
    (disable-self)
)
(defrule
    (and (civ-selected magyar) (research-completed ri-mercenaries))
    (goal emergency-trash 1)
=>
    (set-goal unique-unit-cavalry-trash 1)
)
(defrule
    (not (and (civ-selected magyar) (research-completed ri-mercenaries)))
    (goal emergency-trash 1)
=>
    (set-goal unique-unit-cavalry-trash 0)
)
(defrule
    (goal emergency-trash 1)
=>
    (set-goal produce-archers 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-cavalry-archers 0)
    (set-goal produce-militia 0)
    (set-goal produce-eagles 0)
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-mangonels 0)
    (set-goal produce-scorpions 0)
    (set-goal produce-monks 0)
)
(defrule
    (goal unique-unit-cavalry-trash 0)
    (goal emergency-trash 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (players-unit-type-count any-enemy scout-cavalry-line >= min-detection-units)
    (goal emergency-trash 1)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count any-enemy knight-line >= min-detection-units)
    (goal emergency-trash 1)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count any-enemy camel-line >= min-detection-units)
    (goal emergency-trash 1)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count any-enemy battle-elephant-line >= min-detection-units)
    (goal emergency-trash 1)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
    (goal emergency-trash 1)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (goal good-scouts 1)
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
    (goal emergency-trash 1)
=>
    (set-goal produce-scouts 1)
    (set-goal produce-skirmishers 0)
)
(defrule
    (not (goal good-scouts 1))
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
    (goal emergency-trash 1)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (players-unit-type-count any-enemy archer-line >= min-detection-units)
    (goal emergency-trash 1)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-skirmishers 1)
)
(defrule
    (players-unit-type-count any-enemy spearman-line >= min-detection-units)
    (goal emergency-trash 1)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (and (goal produce-scouts 1) (goal unique-unit-cavalry-trash 1))
    (goal emergency-trash 1)
=>
    (set-goal produce-scouts 0)
    (set-goal produce-unique-unit 1)
)
(defrule
    (and (goal produce-unique-units 0) (and (goal produce-scouts 0) (and (goal produce-skirmishers 0) (goal produce-spearmen 0))))
    (goal emergency-trash 1)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (not (and (not (goal emergency-trash 1)) (goal attack-ready 1)))
=>
    (up-jump-rule 42)
)
(defrule
    (true)
=>
    (set-goal total-units-selected 0)
    (up-modify-goal total-units-selected g:+ produce-archers)
    (up-modify-goal total-units-selected g:+ produce-hand-cannoneers)
    (up-modify-goal total-units-selected g:+ produce-skirmishers)
    (up-modify-goal total-units-selected g:+ produce-cavalry-archers)
    (up-modify-goal total-units-selected g:+ produce-militia)
    (up-modify-goal total-units-selected g:+ produce-spearmen)
    (up-modify-goal total-units-selected g:+ produce-eagles)
    (up-modify-goal total-units-selected g:+ produce-scouts)
    (up-modify-goal total-units-selected g:+ produce-knights)
    (up-modify-goal total-units-selected g:+ produce-camels)
    (up-modify-goal total-units-selected g:+ produce-battle-elephants)
    (up-modify-goal total-units-selected g:+ produce-mangonels)
    (up-modify-goal total-units-selected g:+ produce-scorpions)
    (up-modify-goal total-units-selected g:+ produce-monks)
    (up-modify-goal total-units-selected g:+ produce-unique-units)
)
(defrule
    (true)
=>
    (set-goal 178 0)
    (disable-self)
    (generate-random-number 2)
)
(defrule
    (random-number == 1)
    (goal 178 0)
=>
    (set-goal 178 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 178 0)
=>
    (set-goal 178 2)
    (disable-self)
)
(defrule
    (goal 178 1)
=>
    (set-goal do-partial-navy 1)
    (disable-self)
)
(defrule
    (goal 178 2)
=>
    (set-goal do-partial-navy 0)
    (disable-self)
)
(defrule
    (and (goal produce-fire-ships 0) (goal produce-galleys 0))
    (or (goal full-water-map 1) (and (goal partial-water-map 1) (goal do-partial-navy 1)))
=>
    (set-goal 180 0)
    (generate-random-number 2)
)
(defrule
    (random-number == 1)
    (goal 180 0)
    (and (goal produce-fire-ships 0) (goal produce-galleys 0))
    (or (goal full-water-map 1) (and (goal partial-water-map 1) (goal do-partial-navy 1)))
=>
    (set-goal 180 1)
)
(defrule
    (random-number == 2)
    (goal 180 0)
    (and (goal produce-fire-ships 0) (goal produce-galleys 0))
    (or (goal full-water-map 1) (and (goal partial-water-map 1) (goal do-partial-navy 1)))
=>
    (set-goal 180 2)
)
(defrule
    (goal produce-galleys 0)
    (goal 180 1)
    (and (goal produce-fire-ships 0) (goal produce-galleys 0))
    (or (goal full-water-map 1) (and (goal partial-water-map 1) (goal do-partial-navy 1)))
=>
    (up-modify-goal produce-galleys g:= good-galleys)
)
(defrule
    (goal produce-fire-ships 0)
    (goal 180 2)
    (and (goal produce-fire-ships 0) (goal produce-galleys 0))
    (or (goal full-water-map 1) (and (goal partial-water-map 1) (goal do-partial-navy 1)))
=>
    (up-modify-goal produce-fire-ships g:= good-fire-ships)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 0)
    (generate-random-number 15)
)
(defrule
    (random-number == 1)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 1)
)
(defrule
    (random-number == 2)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 2)
)
(defrule
    (random-number == 3)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 3)
)
(defrule
    (random-number == 4)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 4)
)
(defrule
    (random-number == 5)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 5)
)
(defrule
    (random-number == 6)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 6)
)
(defrule
    (random-number == 7)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 7)
)
(defrule
    (random-number == 8)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 8)
)
(defrule
    (random-number == 9)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 9)
)
(defrule
    (random-number == 10)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 10)
)
(defrule
    (random-number == 11)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 11)
)
(defrule
    (random-number == 12)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 12)
)
(defrule
    (random-number == 13)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 13)
)
(defrule
    (random-number == 14)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 14)
)
(defrule
    (random-number == 15)
    (goal 181 0)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (set-goal 181 15)
)
(defrule
    (goal produce-cavalry-archers 0)
    (goal 181 1)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-archers g:= good-archers)
)
(defrule
    (not (goal total-units-selected 0))
    (goal 181 2)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-hand-cannoneers g:= good-hand-cannoneers)
)
(defrule
    (goal 181 3)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-skirmishers g:= good-skirmishers)
)
(defrule
    (goal produce-archers 0)
    (goal 181 4)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-cavalry-archers g:= good-cavalry-archers)
)
(defrule
    (goal produce-eagles 0)
    (goal 181 5)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-militia g:= good-militia)
)
(defrule
    (goal produce-eagles 0)
    (goal 181 6)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-spearmen g:= good-spearmen)
)
(defrule
    (and (goal produce-spearmen 0) (goal produce-militia 0))
    (goal 181 7)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-eagles g:= good-eagles)
)
(defrule
    (and (goal produce-knights 0) (goal produce-battle-elephants 0))
    (goal 181 8)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-scouts g:= good-scouts)
)
(defrule
    (and (goal produce-scouts 0) (goal produce-battle-elephants 0))
    (goal 181 9)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-knights g:= good-knights)
)
(defrule
    (goal 181 10)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-camels g:= good-camels)
)
(defrule
    (and (goal produce-scouts 0) (goal produce-knights 0))
    (goal 181 11)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-battle-elephants g:= good-battle-elephants)
)
(defrule
    (goal 181 12)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-mangonels g:= good-mangonels)
)
(defrule
    (goal 181 13)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-scorpions g:= good-scorpions)
)
(defrule
    (goal 181 14)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-monks g:= good-monks)
)
(defrule
    (goal 181 15)
    (up-compare-goal total-units-selected g:< desired-units)
    (goal full-water-map 0)
=>
    (up-modify-goal produce-unique-units g:= good-unique-units)
)
(defrule
    (not (and (goal be-smart 1) (and (not (goal emergency-trash 1)) (goal attack-ready 1))))
=>
    (up-jump-rule 63)
)
(defrule
    (true)
=>
    (set-goal enemy-unique-unit-is-cavalry 0)
    (set-goal enemy-unique-unit-is-infantry 0)
    (set-goal enemy-unique-unit-is-ranged 0)
    (set-goal enemy-unique-unit-is-cavalry-archer 0)
    (set-goal enemy-unique-unit-is-expensive 0)
    (set-goal enemy-unique-unit-counters-cavalry 0)
    (set-goal enemy-unique-unit-counters-infantry 0)
    (set-goal enemy-unique-unit-counters-ranged 0)
    (set-goal enemy-unique-unit-counters-cavalry-archer 0)
    (set-goal enemy-unique-unit-counters-unique-unit 0)
)
(defrule
    (players-civ target-player aztec)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
    (set-goal enemy-unique-unit-counters-infantry 1)
)
(defrule
    (players-civ target-player berbers)
=>
    (set-goal enemy-unique-unit-is-cavalry-archer 1)
    (set-goal enemy-unique-unit-counters-cavalry-archer 1)
)
(defrule
    (players-civ target-player briton)
=>
    (set-goal enemy-unique-unit-is-ranged 1)
)
(defrule
    (players-civ target-player burmese)
=>
    (set-goal enemy-unique-unit-is-cavalry-archer 1)
)
(defrule
    (players-civ target-player byzantine)
=>
    (set-goal enemy-unique-unit-is-cavalry 1)
)
(defrule
    (players-civ target-player celtic)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
)
(defrule
    (players-civ target-player chinese)
=>
    (set-goal enemy-unique-unit-is-ranged 1)
)
(defrule
    (players-civ target-player ethiopian)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
)
(defrule
    (players-civ target-player frankish)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
)
(defrule
    (players-civ target-player gothic)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
)
(defrule
    (players-civ target-player hun)
=>
    (set-goal enemy-unique-unit-is-cavalry 1)
)
(defrule
    (players-civ target-player incan)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
    (set-goal enemy-unique-unit-counters-cavalry 1)
)
(defrule
    (players-civ target-player indian)
=>
    (set-goal enemy-unique-unit-is-cavalry-archer 1)
)
(defrule
    (players-civ target-player italian)
=>
    (set-goal enemy-unique-unit-is-ranged 1)
    (set-goal enemy-unique-unit-counters-cavalry 1)
)
(defrule
    (players-civ target-player japanese)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
    (set-goal enemy-unique-unit-counters-unique-unit 1)
)
(defrule
    (players-civ target-player khmer)
=>
    (set-goal enemy-unique-unit-is-cavalry 1)
    (set-goal enemy-unique-unit-counters-infantry 1)
)
(defrule
    (players-civ target-player korean)
=>
    (set-goal enemy-unique-unit-is-cavalry-archer 1)
    (set-goal enemy-unique-unit-counters-ranged 1)
)
(defrule
    (players-civ target-player magyar)
=>
    (set-goal enemy-unique-unit-is-cavalry 1)
)
(defrule
    (players-civ target-player malay)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
)
(defrule
    (players-civ target-player malian)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
)
(defrule
    (players-civ target-player mayan)
=>
    (set-goal enemy-unique-unit-is-ranged 1)
)
(defrule
    (players-civ target-player mongol)
=>
    (set-goal enemy-unique-unit-is-cavalry-archer 1)
)
(defrule
    (players-civ target-player persian)
=>
    (set-goal enemy-unique-unit-is-cavalry 1)
    (set-goal enemy-unique-unit-is-expensive 1)
)
(defrule
    (players-civ target-player saracen)
=>
    (set-goal enemy-unique-unit-is-cavalry 1)
    (set-goal enemy-unique-unit-counters-cavalry 1)
)
(defrule
    (players-civ target-player slavic)
=>
    (set-goal enemy-unique-unit-is-cavalry 1)
)
(defrule
    (players-civ target-player spanish)
=>
    (set-goal enemy-unique-unit-is-cavalry-archer 1)
    (set-goal enemy-unique-unit-is-expensive 1)
)
(defrule
    (players-civ target-player teutonic)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
    (set-goal enemy-unique-unit-is-expensive 1)
)
(defrule
    (players-civ target-player turkish)
=>
    (set-goal enemy-unique-unit-is-ranged 1)
    (set-goal enemy-unique-unit-counters-infantry 1)
)
(defrule
    (players-civ target-player vietnamese)
=>
    (set-goal enemy-unique-unit-is-ranged 1)
    (set-goal enemy-unique-unit-counters-ranged 1)
)
(defrule
    (players-civ target-player viking)
=>
    (set-goal enemy-unique-unit-is-infantry 1)
)
(defrule
    (or (goal enemy-good-archers 1) (goal enemy-unique-unit-is-ranged 1))
=>
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-militia 0)
    (set-goal produce-spearmen 0)
    (set-goal produce-monks 0)
)
(defrule
    (goal enemy-good-skirmishers 1)
=>
    (set-goal produce-archers 0)
    (set-goal produce-cavalry-archers 0)
)
(defrule
    (and (goal unique-unit-is-ranged 1) (goal unique-unit-counters-ranged 0))
    (goal enemy-good-skirmishers 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-good-skirmishers 1)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-monks 0)
)
(defrule
    (goal enemy-good-eagles 1)
=>
    (set-goal produce-archers 0)
    (set-goal produce-skirmishers 0)
    (set-goal produce-cavalry-archers 0)
)
(defrule
    (and (goal unique-unit-is-ranged 1) (goal unique-unit-counters-infantry 0))
    (goal enemy-good-eagles 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-good-monks 1)
=>
    (set-goal produce-knights 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-camels 0)
)
(defrule
    (goal unique-unit-is-expensive 1)
    (goal enemy-good-monks 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-good-militia 1)
=>
    (set-goal produce-eagles 0)
)
(defrule
    (goal enemy-good-hand-cannoneers 1)
=>
    (set-goal produce-militia 0)
    (set-goal produce-spearmen 0)
    (set-goal produce-eagles 0)
)
(defrule
    (goal unique-unit-is-infantry 1)
    (goal enemy-good-hand-cannoneers 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-good-knights 1)
=>
    (set-goal produce-archers 0)
    (set-goal produce-skirmishers 0)
)
(defrule
    (and (goal unique-unit-is-ranged 1) (goal unique-unit-counters-cavalry 0))
    (goal enemy-good-knights 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-good-camels 1)
=>
    (set-goal produce-knights 0)
    (set-goal produce-scouts 0)
)
(defrule
    (and (goal unique-unit-is-cavalry 1) (goal unique-unit-counters-cavalry 0))
    (goal enemy-good-camels 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-good-spearmen 1)
=>
    (set-goal produce-knights 0)
    (set-goal produce-scouts 0)
)
(defrule
    (and (goal unique-unit-is-cavalry 1) (goal unique-unit-counters-infantry 0))
    (goal enemy-good-spearmen 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-good-mangonels 1)
=>
    (set-goal produce-scorpions 0)
)
(defrule
    (or (goal enemy-good-scouts 1) (or (goal enemy-good-knights 1) (goal enemy-unique-unit-is-cavalry 1)))
=>
    (set-goal produce-scorpions 0)
)
(defrule
    (or (goal enemy-good-scouts 1) (or (goal enemy-good-knights 1) (or (goal enemy-good-camels 1) (goal enemy-unique-unit-is-cavalry 1))))
=>
    (set-goal produce-skirmishers 0)
)
(defrule
    (goal enemy-good-militia 1)
=>
    (set-goal produce-skirmishers 0)
)
(defrule
    (goal enemy-good-scouts 1)
=>
    (set-goal produce-hand-cannoneers 0)
)
(defrule
    (goal enemy-good-militia 1)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (goal enemy-unique-unit-counters-infantry 1)
=>
    (set-goal produce-militia 0)
    (set-goal produce-spearmen 0)
    (set-goal produce-eagles 0)
)
(defrule
    (goal unique-unit-is-infantry 1)
    (goal enemy-unique-unit-counters-infantry 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-unique-unit-counters-ranged 1)
=>
    (set-goal produce-archers 0)
    (set-goal produce-skirmishers 0)
    (set-goal produce-cavalry-archers 0)
)
(defrule
    (goal unique-unit-is-ranged 1)
    (goal enemy-unique-unit-counters-ranged 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-unique-unit-counters-cavalry-archer 1)
=>
    (set-goal cavalry-archers 0)
)
(defrule
    (goal unique-unit-is-cavalry-archer 1)
    (goal enemy-unique-unit-counters-cavalry-archer 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-unique-unit-counters-cavalry 1)
=>
    (set-goal produce-knights 0)
    (set-goal produce-scouts 0)
    (set-goal produce-camels 0)
)
(defrule
    (goal unique-unit-is-cavalry 1)
    (goal enemy-unique-unit-counters-cavalry 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal enemy-unique-unit-counters-unique-unit 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (not (goal emergency-trash 1))
    (goal attack-ready 1)
=>
    (enable-timer 4 120)
    (disable-self)
)
(defrule
    (timer-triggered 4)
    (not (goal emergency-trash 1))
    (goal attack-ready 1)
=>
    (set-goal be-smart 0)
)
(defrule
    (not (and (not (goal emergency-trash 1)) (goal attack-ready 1)))
=>
    (up-jump-rule 26)
)
(defrule
    (players-unit-type-count any-enemy monk-set >= min-detection-units)
=>
    (set-goal produce-battle-elephants 0)
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
)
(defrule
    (goal unique-unit-is-expensive 1)
    (players-unit-type-count any-enemy monk-set >= min-detection-units)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (players-unit-type-count any-enemy monk-set >= min-detection-units)
=>
    (set-goal produce-mangonels 0)
)
(defrule
    (players-unit-type-count any-enemy archer >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (players-unit-type-count any-enemy cavalry-archer-line >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (players-unit-type-count any-enemy mangonel-line >= min-detection-units)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-skirmishers 0)
)
(defrule
    (players-unit-type-count any-enemy trebuchet-set >= 15)
=>
    (set-goal produce-scorpions 0)
)
(defrule
    (players-unit-type-count any-enemy knight-line >= min-detection-units)
=>
    (set-goal produce-mangonels 0)
)
(defrule
    (players-unit-type-count any-enemy scout-cavalry-line >= min-detection-units)
=>
    (set-goal produce-mangonels 0)
)
(defrule
    (players-unit-type-count any-enemy camel-line >= min-detection-units)
=>
    (set-goal produce-mangonels 0)
)
(defrule
    (not (and (players-unit-type-count any-enemy archer >= min-detection-units) (goal desired-units 1)))
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-monks 0)
)
(defrule
    (and (goal unique-unit-is-infantry 1) (not (or (civ-selected gothic) (or (civ-selected malay) (civ-selected celtic)))))
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (not (and (players-unit-type-count any-enemy chu-ko-nu-line >= min-detection-units) (goal desired-units 1)))
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-monks 0)
)
(defrule
    (and (goal unique-unit-is-infantry 1) (not (or (civ-selected gothic) (or (civ-selected malay) (civ-selected celtic)))))
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (not (and (players-unit-type-count any-enemy plumed-archer-line >= min-detection-units) (goal desired-units 1)))
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-monks 0)
)
(defrule
    (and (goal unique-unit-is-infantry 1) (not (or (civ-selected gothic) (or (civ-selected malay) (civ-selected celtic)))))
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (not (and (players-unit-type-count any-enemy hand-cannoneer >= min-detection-units) (goal desired-units 1)))
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-monks 0)
)
(defrule
    (and (goal unique-unit-is-infantry 1) (not (or (civ-selected gothic) (or (civ-selected malay) (civ-selected celtic)))))
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (not (and (players-unit-type-count any-enemy jaguar-man-line >= min-detection-units) (goal desired-units 1)))
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-monks 0)
)
(defrule
    (and (goal unique-unit-is-infantry 1) (not (or (civ-selected gothic) (or (civ-selected malay) (civ-selected celtic)))))
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (players-unit-type-count any-enemy spearman-line >= min-detection-units)
    (goal desired-units 1)
=>
    (set-goal produce-knights 0)
    (set-goal produce-scouts 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-camels 0)
)
(defrule
    (not (and (not (goal emergency-trash 1)) (goal attack-ready 1)))
=>
    (up-jump-rule 16)
)
(defrule
    (players-unit-type-count target-player skirmisher-line >= min-detection-units)
    (goal partial-ranged-blacksmith-investment 1)
=>
    (set-goal produce-skirmishers 1)
    (chat-local-to-self "COUNTER SKIRMS WITH SKIRMS")
)
(defrule
    (players-unit-type-count target-player archer-line >= min-detection-units)
    (not (players-unit-type-count target-player skirmisher-line >= min-detection-units))
    (goal partial-ranged-blacksmith-investment 1)
=>
    (set-goal produce-skirmishers 1)
    (chat-local-to-self "COUNTER ARCHERS WITH SKIRMS")
)
(defrule
    (players-unit-type-count target-player cavalry-archer-line >= min-detection-units)
    (not (players-unit-type-count target-player skirmisher-line >= min-detection-units))
    (not (players-unit-type-count target-player archer-line >= min-detection-units))
    (goal partial-ranged-blacksmith-investment 1)
=>
    (set-goal produce-skirmishers 1)
    (chat-local-to-self "COUNTER CAV ARCHERS WITH SKIRMS")
)
(defrule
    (players-unit-type-count target-player spearman-line >= min-detection-units)
    (not (players-unit-type-count target-player archer-line >= min-detection-units))
    (not (players-unit-type-count target-player skirmisher-line >= min-detection-units))
    (not (players-unit-type-count target-player cavalry-archer-line >= min-detection-units))
    (goal partial-ranged-blacksmith-investment 1)
=>
    (set-goal produce-skirmishers 1)
    (chat-local-to-self "COUNTER SPEARMEN WITH SKIRMS")
)
(defrule
    (players-unit-type-count target-player war-wagon-line >= min-detection-units)
    (not (players-unit-type-count target-player cavalry-archer-line >= min-detection-units))
    (not (players-unit-type-count target-player skirmisher-line >= min-detection-units))
    (not (players-unit-type-count target-player archer-line >= min-detection-units))
    (not (players-unit-type-count target-player spearman-line >= min-detection-units))
    (goal partial-ranged-blacksmith-investment 1)
=>
    (set-goal produce-skirmishers 1)
    (chat-local-to-self "COUNTER WAR WAGONS WITH SKIRMS")
)
(defrule
    (not (players-unit-type-count target-player spearman-line >= min-detection-units))
    (not (players-unit-type-count target-player archer-line >= min-detection-units))
    (not (players-unit-type-count target-player skirmisher-line >= min-detection-units))
    (not (players-unit-type-count target-player cavalry-archer-line >= min-detection-units))
    (not (players-unit-type-count target-player war-wagon-line >= min-detection-units))
    (goal partial-ranged-blacksmith-investment 1)
=>
    (set-goal produce-skirmishers 0)
)
(defrule
    (not (goal partial-ranged-blacksmith-investment 1))
=>
    (set-goal produce-skirmishers 0)
)
(defrule
    (players-unit-type-count target-player scout-cavalry-line >= min-detection-units)
    (and (goal partial-infantry-blacksmith-investment 1) (and (or (current-age == feudal-age) (or (research-available ri-pikeman) (research-completed ri-pikeman))) (goal produce-camels 0)))
=>
    (chat-local-to-self "COUNTER SCOUTS WITH SPEARMEN")
    (set-goal produce-spearmen 1)
)
(defrule
    (and (players-unit-type-count target-player knight-line >= min-detection-units) (goal produce-monks 0))
    (not (players-unit-type-count target-player scout-cavalry-line >= min-detection-units))
    (and (goal partial-infantry-blacksmith-investment 1) (and (or (current-age == feudal-age) (or (research-available ri-pikeman) (research-completed ri-pikeman))) (goal produce-camels 0)))
=>
    (chat-local-to-self "COUNTER KNIGHTS WITH SPEARMEN")
    (set-goal produce-spearmen 1)
)
(defrule
    (and (players-unit-type-count target-player battle-elephant-line >= min-detection-units) (goal produce-monks 0))
    (not (players-unit-type-count target-player scout-cavalry-line >= min-detection-units))
    (not (and (players-unit-type-count target-player knight-line >= min-detection-units) (goal produce-monks 0)))
    (and (goal partial-infantry-blacksmith-investment 1) (and (or (current-age == feudal-age) (or (research-available ri-pikeman) (research-completed ri-pikeman))) (goal produce-camels 0)))
=>
    (chat-local-to-self "COUNTER BATTLE ELEPHANTS WITH SPEARMEN")
    (set-goal produce-spearmen 1)
)
(defrule
    (and (players-unit-type-count target-player camel-line >= min-detection-units) (goal produce-monks 0))
    (not (and (players-unit-type-count target-player knight-line >= min-detection-units) (goal produce-monks 0)))
    (not (players-unit-type-count target-player scout-cavalry-line >= min-detection-units))
    (not (and (players-unit-type-count target-player battle-elephant-line >= min-detection-units) (goal produce-monks 0)))
    (and (goal partial-infantry-blacksmith-investment 1) (and (or (current-age == feudal-age) (or (research-available ri-pikeman) (research-completed ri-pikeman))) (goal produce-camels 0)))
=>
    (chat-local-to-self "COUNTER CAMELS WITH SPEARMEN")
    (set-goal produce-spearmen 1)
)
(defrule
    (and (players-unit-type-count target-player war-elephant-line >= min-detection-units) (goal produce-monks 0))
    (not (and (players-unit-type-count target-player battle-elephant-line >= min-detection-units) (goal produce-monks 0)))
    (not (players-unit-type-count target-player scout-cavalry-line >= min-detection-units))
    (not (and (players-unit-type-count target-player knight-line >= min-detection-units) (goal produce-monks 0)))
    (not (and (players-unit-type-count target-player camel-line >= min-detection-units) (goal produce-monks 0)))
    (and (goal partial-infantry-blacksmith-investment 1) (and (or (current-age == feudal-age) (or (research-available ri-pikeman) (research-completed ri-pikeman))) (goal produce-camels 0)))
=>
    (chat-local-to-self "COUNTER WAR ELEPHANTS WITH SPEARMEN")
    (set-goal produce-spearmen 1)
)
(defrule
    (not (and (players-unit-type-count target-player camel-line >= min-detection-units) (goal produce-monks 0)))
    (not (and (players-unit-type-count target-player knight-line >= min-detection-units) (goal produce-monks 0)))
    (not (players-unit-type-count target-player scout-cavalry-line >= min-detection-units))
    (not (and (players-unit-type-count target-player battle-elephant-line >= min-detection-units) (goal produce-monks 0)))
    (not (and (players-unit-type-count target-player war-elephant-line >= min-detection-units) (goal produce-monks 0)))
    (and (goal partial-infantry-blacksmith-investment 1) (and (or (current-age == feudal-age) (or (research-available ri-pikeman) (research-completed ri-pikeman))) (goal produce-camels 0)))
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (not (and (goal partial-infantry-blacksmith-investment 1) (and (or (current-age == feudal-age) (or (research-available ri-pikeman) (research-completed ri-pikeman))) (goal produce-camels 0))))
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (players-unit-type-count target-player scout-cavalry-line >= 2)
    (and (current-age == feudal-age) (goal produce-spearmen 0))
=>
    (chat-local-to-self "LIGHT COUNTER SCOUTS WITH SPEARMEN")
)
(defrule
    (can-train spearman-line)
    (unit-type-count-total spearman-line < 4)
    (players-unit-type-count target-player scout-cavalry-line >= 2)
    (and (current-age == feudal-age) (goal produce-spearmen 0))
=>
    (train spearman-line)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 10)
)
(defrule
    (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town))))
=>
    (set-goal produce-battering-rams 0)
    (set-goal produce-trebuchets 0)
    (set-goal produce-cannon-galleons 0)
)
(defrule
    (and (current-age == imperial-age) (and (unit-type-count-total cannon-galleon-line < max-trebs) (or (research-available ri-cannon-galleon) (unit-available cannon-galleon-line))))
    (goal full-water-map 1)
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
=>
    (set-goal produce-cannon-galleons 1)
)
(defrule
    (not (and (current-age == imperial-age) (and (unit-type-count-total cannon-galleon-line < max-trebs) (or (research-available ri-cannon-galleon) (unit-available cannon-galleon-line)))))
    (goal full-water-map 1)
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
=>
    (set-goal produce-cannon-galleons 0)
)
(defrule
    (or (and (unit-type-count-total battering-ram-line < max-castle-age-rams) (current-age == castle-age)) (and (unit-type-count-total battering-ram-line < max-imperial-age-rams) (current-age == imperial-age)))
    (or (military-population >= 20) (or (enemy-buildings-in-town) (goal threat-source castle)))
    (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1)))
    (not (goal full-water-map 1))
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
=>
    (set-goal produce-battering-rams 1)
)
(defrule
    (not (or (and (unit-type-count-total battering-ram-line < max-castle-age-rams) (current-age == castle-age)) (and (unit-type-count-total battering-ram-line < max-imperial-age-rams) (current-age == imperial-age))))
    (or (military-population >= 20) (or (enemy-buildings-in-town) (goal threat-source castle)))
    (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1)))
    (not (goal full-water-map 1))
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
=>
    (set-goal produce-battering-rams 0)
)
(defrule
    (not (or (military-population >= 20) (or (enemy-buildings-in-town) (goal threat-source castle))))
    (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1)))
    (not (goal full-water-map 1))
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
=>
    (set-goal produce-battering-rams 0)
)
(defrule
    (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1)))
    (not (goal full-water-map 1))
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
=>
    (set-goal produce-trebuchets 0)
)
(defrule
    (current-age == imperial-age)
    (not (goal full-water-map 1))
    (not (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1))))
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
=>
    (set-goal produce-battering-rams 0)
)
(defrule
    (and (unit-type-count-total trebuchet-set < max-trebs) (up-pending-objects c: trebuchet-set == 0))
    (current-age == imperial-age)
    (not (goal full-water-map 1))
    (not (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1))))
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
=>
    (set-goal produce-trebuchets 1)
)
(defrule
    (not (and (unit-type-count-total trebuchet-set < max-trebs) (up-pending-objects c: trebuchet-set == 0)))
    (current-age == imperial-age)
    (not (goal full-water-map 1))
    (not (or (current-age == castle-age) (or (building-type-count-total castle == 0) (goal good-battering-rams 1))))
    (not (and (goal attacking 0) (and (town-under-attack) (not (enemy-buildings-in-town)))))
=>
    (set-goal produce-trebuchets 0)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 2)
)
(defrule
    (unit-type-count-total transport-ship < 4)
    (and (goal full-water-map 1) (soldier-count > 5))
=>
    (set-goal produce-transport-ships 1)
)
(defrule
    (not (unit-type-count-total transport-ship < 4))
    (and (goal full-water-map 1) (soldier-count > 5))
=>
    (set-goal produce-transport-ships 0)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 3)
)
(defrule
    (and (or (goal produce-galleys 1) (or (goal produce-fire-ships 1) (goal full-water-map 1))) (cc-players-unit-type-count 0 sea-fish > 0))
=>
    (set-goal produce-fishing-ships 1)
)
(defrule
    (not (and (or (goal produce-galleys 1) (or (goal produce-fire-ships 1) (goal full-water-map 1))) (cc-players-unit-type-count 0 sea-fish > 0)))
=>
    (set-goal produce-fishing-ships 0)
)
(defrule
    (up-compare-goal population-space-remaining c:< 5)
    (not (and (or (goal produce-galleys 1) (or (goal produce-fire-ships 1) (goal full-water-map 1))) (cc-players-unit-type-count 0 sea-fish > 0)))
=>
    (delete-unit fishing-ship)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 4)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (and (goal team-game 1) (and (current-age >= castle-age) (or (goal full-water-map 0) (map-type team-islands))))
=>
    (build market)
)
(defrule
    (and (players-building-type-count any-ally market >= 1) (current-age >= imperial-age))
    (and (goal team-game 1) (and (current-age >= castle-age) (or (goal full-water-map 0) (map-type team-islands))))
=>
    (set-goal produce-trade-carts 1)
)
(defrule
    (not (and (players-building-type-count any-ally market >= 1) (current-age >= imperial-age)))
    (and (goal team-game 1) (and (current-age >= castle-age) (or (goal full-water-map 0) (map-type team-islands))))
=>
    (set-goal produce-trade-carts 0)
)
(defrule
    (up-compare-goal population-space-remaining c:< 5)
    (not (and (players-building-type-count any-ally market >= 1) (current-age >= imperial-age)))
    (and (goal team-game 1) (and (current-age >= castle-age) (or (goal full-water-map 0) (map-type team-islands))))
=>
    (delete-unit trade-cart)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 3)
)
(defrule
    (true)
=>
    (chat-local-to-self "attacking aggressively")
    (disable-self)
)
(defrule
    (and (or (up-compare-goal target-military-percentage c:>= 100) (up-compare-goal population-space-remaining c:<= 5)) (and (military-population >= 8) (goal attacking 0)))
=>
    (set-goal attacking 1)
)
(defrule
    (and (up-compare-goal target-military-percentage c:<= 80) (goal attacking 1))
    (not (and (or (up-compare-goal target-military-percentage c:>= 100) (up-compare-goal population-space-remaining c:<= 5)) (and (military-population >= 8) (goal attacking 0))))
=>
    (set-goal attacking 0)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 15)
)
(defrule
    (true)
=>
    (chat-local-to-self "being reckless, and then thoughtful")
    (set-goal balanced-aggressive 1)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal aggressive-override 0)
)
(defrule
    (true)
=>
    (enable-timer 5 300)
    (disable-self)
)
(defrule
    (timer-triggered 5)
=>
    (up-modify-goal balanced-aggressive c:+ 1)
    (up-modify-goal balanced-aggressive c:mod 2)
    (disable-timer 5)
    (enable-timer 5 300)
)
(defrule
    (and (up-compare-goal target-military-percentage c:> 100) (and (up-compare-goal target-military-percentage c:<= 150) (goal attacking 1)))
=>
    (set-goal aggressive-override 1)
    (chat-local-to-self "make military lead bigger")
)
(defrule
    (military-population < 10)
=>
    (set-goal aggressive-override 1)
    (chat-local-to-self "not enough units")
)
(defrule
    (not (or (goal balanced-aggressive 1) (goal aggressive-override 1)))
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (chat-local-to-self "being a little reckless")
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal produce-units 1)
    (set-goal do-research 1)
)
(defrule
    (not (not (or (goal balanced-aggressive 1) (goal aggressive-override 1))))
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (chat-local-to-self "being thoughtful")
    (disable-self)
)
(defrule
    (goal produce-units 0)
    (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0)))
=>
    (chat-local-to-self "go! (thoughtful)")
)
(defrule
    (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0)))
=>
    (set-goal produce-units 1)
    (set-goal do-research 1)
)
(defrule
    (goal produce-units 1)
    (not (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0))))
=>
    (chat-local-to-self "hold! (thoughtful)")
)
(defrule
    (not (or (goal attempted-researches 0) (and (town-under-attack) (goal attacking 0))))
=>
    (set-goal produce-units 0)
    (set-goal do-research 1)
)
(defrule
    (not (and (goal full-water-map 1) (goal attack-ready 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (set-goal allow-navy 1)
)
(defrule
    (goal produce-fishing-ships 1)
    (not (goal full-water-map 1))
    (goal attack-ready 1)
=>
    (set-goal 195 0)
    (disable-self)
    (generate-random-number 2)
)
(defrule
    (random-number == 1)
    (goal 195 0)
    (goal produce-fishing-ships 1)
    (not (goal full-water-map 1))
    (goal attack-ready 1)
=>
    (set-goal 195 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 195 0)
    (goal produce-fishing-ships 1)
    (not (goal full-water-map 1))
    (goal attack-ready 1)
=>
    (set-goal 195 2)
    (disable-self)
)
(defrule
    (not (and (goal 195 1) (and (goal produce-fishing-ships 1) (and (not (goal full-water-map 1)) (goal attack-ready 1)))))
=>
    (up-jump-rule 2)
)
(defrule
    (or (players-unit-type-count any-enemy fishing-ship > 0) (or (players-unit-type-count any-enemy dock > 0) (up-compare-goal largest-enemy-warboat-count c:> 0)))
=>
    (set-goal allow-navy 1)
)
(defrule
    (not (or (players-unit-type-count any-enemy fishing-ship > 0) (or (players-unit-type-count any-enemy dock > 0) (up-compare-goal largest-enemy-warboat-count c:> 0))))
=>
    (set-goal allow-navy 0)
)
(defrule
    (not (and (goal 195 2) (and (goal produce-fishing-ships 1) (and (not (goal full-water-map 1)) (goal attack-ready 1)))))
=>
    (up-jump-rule 2)
)
(defrule
    (up-compare-goal largest-enemy-warboat-count c:> 0)
=>
    (set-goal allow-navy 1)
)
(defrule
    (not (up-compare-goal largest-enemy-warboat-count c:> 0))
=>
    (set-goal allow-navy 0)
)
(defrule
    (not (goal produce-fishing-ships 1))
    (not (goal full-water-map 1))
    (goal attack-ready 1)
=>
    (set-goal allow-navy 0)
)
(defrule
    (not (goal attack-ready 1))
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (up-find-player enemy find-closest 196)
    (up-modify-sn sn-target-player-number g:= 196)
    (up-modify-sn sn-focus-player-number g:= 196)
    (up-send-scout group-type-land-explore scout-enemy)
    (disable-self)
)
(defrule
    (or (not (player-in-game target-player)) (not (stance-toward target-player enemy)))
=>
    (up-find-player enemy find-closest 197)
    (up-modify-sn sn-target-player-number g:= 197)
    (up-modify-sn sn-focus-player-number g:= 197)
    (up-send-scout group-type-land-explore scout-enemy)
    (up-chat-data-to-self "Retargeting to player %d" g: target-player)
)
(defrule
    (true)
=>
    (set-goal next-retarget 0)
    (disable-self)
)
(defrule
    (and (up-compare-goal threat-player s:!= sn-target-player-number) (and (up-compare-goal threat-player c:>= 1) (up-compare-goal threat-player c:<= 8)))
    (and (up-compare-goal game-time-goal g:>= next-retarget) (or (goal threat-target castle) (or (goal threat-target town-center) (or (goal threat-target mining-camp) (or (goal threat-target house) (or (goal threat-target barracks) (or (goal
threat-target archery-range) (or (goal threat-target stable) (goal threat-target siege-workshop)))))))))
=>
    (up-modify-sn sn-target-player-number g:= threat-player)
    (up-modify-sn sn-focus-player-number g:= threat-player)
    (up-reset-unit c: -1)
    (up-retreat-now)
    (up-modify-goal next-retarget g:= game-time-goal)
    (up-modify-goal next-retarget c:+ retarget-interval)
    (up-chat-data-to-self "Retaliating against player %d" g: threat-player)
)
(defrule
    (not (and (unit-type-count transport-ship > 0) (goal attack-ready 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (goal attacking 1)
=>
    (enable-timer 6 60)
    (disable-self)
)
(defrule
    (timer-triggered 6)
    (goal attacking 1)
=>
    (attack-now)
    (disable-timer 6)
    (enable-timer 6 60)
)
(defrule
    (not (goal attacking 1))
=>
    (up-reset-unit c: -1)
)
(defrule
    (goal do-backstep 1)
=>
    (set-goal do-backstep 0)
)
(defrule
    (not (and (not (unit-type-count transport-ship > 0)) (goal attack-ready 1)))
=>
    (up-jump-rule 3)
)
(defrule
    (goal attacking 1)
=>
    (set-strategic-number sn-maximum-town-size 255)
)
(defrule
    (strategic-number sn-maximum-town-size == 255)
    (not (goal attacking 1))
=>
    (up-modify-sn sn-maximum-town-size s:= sn-minimum-town-size)
)
(defrule
    (goal do-backstep 1)
=>
    (up-modify-sn sn-maximum-town-size s:= sn-minimum-town-size)
    (up-retreat-now)
    (set-goal do-backstep 0)
)
(defrule
    (not (goal attack-ready 1))
=>
    (set-goal do-research 1)
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal resign 0) (and (goal locked-teams 0) (or (goal team-game 1) (goal free-for-all 1)))))
=>
    (up-jump-rule 449)
)
(defrule
    (true)
=>
    (set-goal want-alliance 0)
    (set-goal accept-alliance-requests 1)
    (set-goal player-1-is-bad-egg 0)
    (set-goal player-1-alliance-request-time-stamp 0)
    (set-goal allied-with-1 0)
    (set-goal tried-alliance-with-1 0)
    (set-goal player-2-is-bad-egg 0)
    (set-goal player-2-alliance-request-time-stamp 0)
    (set-goal allied-with-2 0)
    (set-goal tried-alliance-with-2 0)
    (set-goal player-3-is-bad-egg 0)
    (set-goal player-3-alliance-request-time-stamp 0)
    (set-goal allied-with-3 0)
    (set-goal tried-alliance-with-3 0)
    (set-goal player-4-is-bad-egg 0)
    (set-goal player-4-alliance-request-time-stamp 0)
    (set-goal allied-with-4 0)
    (set-goal tried-alliance-with-4 0)
    (set-goal player-5-is-bad-egg 0)
    (set-goal player-5-alliance-request-time-stamp 0)
    (set-goal allied-with-5 0)
    (set-goal tried-alliance-with-5 0)
    (set-goal player-6-is-bad-egg 0)
    (set-goal player-6-alliance-request-time-stamp 0)
    (set-goal allied-with-6 0)
    (set-goal tried-alliance-with-6 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal player-7-is-bad-egg 0)
    (set-goal player-7-alliance-request-time-stamp 0)
    (set-goal allied-with-7 0)
    (set-goal tried-alliance-with-7 0)
    (set-goal player-8-is-bad-egg 0)
    (set-goal player-8-alliance-request-time-stamp 0)
    (set-goal allied-with-8 0)
    (set-goal tried-alliance-with-8 0)
    (set-stance every-enemy neutral)
    (set-goal no-enemies-stamp 0)
    (set-goal chat-betray-player -1)
    (set-goal chat-betrayed-by-player -1)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal suppress-final-betrayal 0)
)
(defrule
    (true)
=>
    (chat-local-to-self "Being backstabbing.")
    (set-goal team-game 0)
    (set-goal free-for-all 1)
    (set-goal accept-alliance-requests 1)
    (disable-self)
)
(defrule
    (up-compare-goal neutral-or-enemy-players-count c:> 0)
    (military-population < 30)
=>
    (set-goal want-alliance 1)
)
(defrule
    (military-population < 30)
=>
    (set-goal suppress-final-betrayal 1)
)
(defrule
    (up-compare-goal neutral-or-enemy-players-count c:>= 2)
    (not (military-population < 30))
=>
    (set-goal want-alliance 1)
)
(defrule
    (goal neutral-or-enemy-players-count 0)
    (not (up-compare-goal neutral-or-enemy-players-count c:>= 2))
    (not (military-population < 30))
=>
    (set-goal want-alliance -1)
)
(defrule
    (not (up-compare-goal neutral-or-enemy-players-count c:>= 2))
    (not (goal neutral-or-enemy-players-count 0))
    (not (military-population < 30))
=>
    (set-goal want-alliance 0)
)
(defrule
    (or (not (and (goal enemy-players-count 0) (goal neutral-players-count 0))) (goal suppress-final-betrayal 1))
=>
    (up-modify-goal no-enemies-stamp g:= game-time-goal)
)
(defrule
    (true)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- no-enemies-stamp)
)
(defrule
    (not (and (up-compare-goal temp c:>= allied-victory-timeout) (game-time >= 2400)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 237 0)
    (generate-random-number 3)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 237 0)
=>
    (set-goal 237 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 237 0)
=>
    (set-goal 237 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 237 0)
=>
    (set-goal 237 3)
    (disable-self)
)
(defrule
    (goal 237 1)
=>
    (chat-to-all "We aren't winning togther, then? What a shame.")
    (disable-self)
)
(defrule
    (goal 237 2)
=>
    (chat-to-all "I suppose now we should fight.")
    (disable-self)
)
(defrule
    (goal 237 3)
=>
    (chat-to-all "We did it, but the game is not over. This is just the beginning.")
    (disable-self)
)
(defrule
    (and (up-compare-goal temp c:>= allied-victory-timeout) (game-time >= 2400))
=>
    (set-goal player-1-is-bad-egg 1)
    (set-goal player-2-is-bad-egg 1)
    (set-goal player-3-is-bad-egg 1)
    (set-goal player-4-is-bad-egg 1)
    (set-goal player-5-is-bad-egg 1)
    (set-goal player-6-is-bad-egg 1)
    (set-goal player-7-is-bad-egg 1)
    (set-goal player-8-is-bad-egg 1)
    (set-goal team-game 0)
    (set-goal free-for-all 1)
    (set-goal locked-teams 1)
    (set-stance every-ally enemy)
    (disable-self)
)
(defrule
    (goal want-alliance 1)
=>
    (set-goal 238 0)
    (generate-random-number 8)
)
(defrule
    (random-number == 1)
    (goal 238 0)
    (goal want-alliance 1)
=>
    (set-goal 238 1)
)
(defrule
    (random-number == 2)
    (goal 238 0)
    (goal want-alliance 1)
=>
    (set-goal 238 2)
)
(defrule
    (random-number == 3)
    (goal 238 0)
    (goal want-alliance 1)
=>
    (set-goal 238 3)
)
(defrule
    (random-number == 4)
    (goal 238 0)
    (goal want-alliance 1)
=>
    (set-goal 238 4)
)
(defrule
    (random-number == 5)
    (goal 238 0)
    (goal want-alliance 1)
=>
    (set-goal 238 5)
)
(defrule
    (random-number == 6)
    (goal 238 0)
    (goal want-alliance 1)
=>
    (set-goal 238 6)
)
(defrule
    (random-number == 7)
    (goal 238 0)
    (goal want-alliance 1)
=>
    (set-goal 238 7)
)
(defrule
    (random-number == 8)
    (goal 238 0)
    (goal want-alliance 1)
=>
    (set-goal 238 8)
)
(defrule
    (not (and (goal 238 1) (goal want-alliance 1)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (and (player-in-game 1) (and (goal player-1-is-bad-egg 0) (and (not (stance-toward 1 ally)) (goal tried-alliance-with-1 0)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 239 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 239 0)
=>
    (set-goal 239 1)
)
(defrule
    (random-number == 2)
    (goal 239 0)
=>
    (set-goal 239 2)
)
(defrule
    (random-number == 3)
    (goal 239 0)
=>
    (set-goal 239 3)
)
(defrule
    (goal 239 1)
=>
    (chat-to-player 1 "Let's be allies.")
)
(defrule
    (goal 239 2)
=>
    (chat-to-player 1 "Want to work together?")
)
(defrule
    (goal 239 3)
=>
    (chat-to-player 1 "Want to team up?")
)
(defrule
    (and (player-in-game 1) (and (goal player-1-is-bad-egg 0) (and (not (stance-toward 1 ally)) (goal tried-alliance-with-1 0))))
=>
    (chat-local-to-self "requesting alliance from player 1")
    (set-stance 1 ally)
    (up-modify-goal player-1-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (not (and (goal 238 2) (goal want-alliance 1)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (and (player-in-game 2) (and (goal player-2-is-bad-egg 0) (and (not (stance-toward 2 ally)) (goal tried-alliance-with-2 0)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 240 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 240 0)
=>
    (set-goal 240 1)
)
(defrule
    (random-number == 2)
    (goal 240 0)
=>
    (set-goal 240 2)
)
(defrule
    (random-number == 3)
    (goal 240 0)
=>
    (set-goal 240 3)
)
(defrule
    (goal 240 1)
=>
    (chat-to-player 2 "Let's be allies.")
)
(defrule
    (goal 240 2)
=>
    (chat-to-player 2 "Want to work together?")
)
(defrule
    (goal 240 3)
=>
    (chat-to-player 2 "Want to team up?")
)
(defrule
    (and (player-in-game 2) (and (goal player-2-is-bad-egg 0) (and (not (stance-toward 2 ally)) (goal tried-alliance-with-2 0))))
=>
    (chat-local-to-self "requesting alliance from player 2")
    (set-stance 2 ally)
    (up-modify-goal player-2-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (not (and (goal 238 3) (goal want-alliance 1)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (and (player-in-game 3) (and (goal player-3-is-bad-egg 0) (and (not (stance-toward 3 ally)) (goal tried-alliance-with-3 0)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 241 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 241 0)
=>
    (set-goal 241 1)
)
(defrule
    (random-number == 2)
    (goal 241 0)
=>
    (set-goal 241 2)
)
(defrule
    (random-number == 3)
    (goal 241 0)
=>
    (set-goal 241 3)
)
(defrule
    (goal 241 1)
=>
    (chat-to-player 3 "Let's be allies.")
)
(defrule
    (goal 241 2)
=>
    (chat-to-player 3 "Want to work together?")
)
(defrule
    (goal 241 3)
=>
    (chat-to-player 3 "Want to team up?")
)
(defrule
    (and (player-in-game 3) (and (goal player-3-is-bad-egg 0) (and (not (stance-toward 3 ally)) (goal tried-alliance-with-3 0))))
=>
    (chat-local-to-self "requesting alliance from player 3")
    (set-stance 3 ally)
    (up-modify-goal player-3-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (not (and (goal 238 4) (goal want-alliance 1)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (and (player-in-game 4) (and (goal player-4-is-bad-egg 0) (and (not (stance-toward 4 ally)) (goal tried-alliance-with-4 0)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 242 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 242 0)
=>
    (set-goal 242 1)
)
(defrule
    (random-number == 2)
    (goal 242 0)
=>
    (set-goal 242 2)
)
(defrule
    (random-number == 3)
    (goal 242 0)
=>
    (set-goal 242 3)
)
(defrule
    (goal 242 1)
=>
    (chat-to-player 4 "Let's be allies.")
)
(defrule
    (goal 242 2)
=>
    (chat-to-player 4 "Want to work together?")
)
(defrule
    (goal 242 3)
=>
    (chat-to-player 4 "Want to team up?")
)
(defrule
    (and (player-in-game 4) (and (goal player-4-is-bad-egg 0) (and (not (stance-toward 4 ally)) (goal tried-alliance-with-4 0))))
=>
    (chat-local-to-self "requesting alliance from player 4")
    (set-stance 4 ally)
    (up-modify-goal player-4-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (not (and (goal 238 5) (goal want-alliance 1)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (and (player-in-game 5) (and (goal player-5-is-bad-egg 0) (and (not (stance-toward 5 ally)) (goal tried-alliance-with-5 0)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 243 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 243 0)
=>
    (set-goal 243 1)
)
(defrule
    (random-number == 2)
    (goal 243 0)
=>
    (set-goal 243 2)
)
(defrule
    (random-number == 3)
    (goal 243 0)
=>
    (set-goal 243 3)
)
(defrule
    (goal 243 1)
=>
    (chat-to-player 5 "Let's be allies.")
)
(defrule
    (goal 243 2)
=>
    (chat-to-player 5 "Want to work together?")
)
(defrule
    (goal 243 3)
=>
    (chat-to-player 5 "Want to team up?")
)
(defrule
    (and (player-in-game 5) (and (goal player-5-is-bad-egg 0) (and (not (stance-toward 5 ally)) (goal tried-alliance-with-5 0))))
=>
    (chat-local-to-self "requesting alliance from player 5")
    (set-stance 5 ally)
    (up-modify-goal player-5-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (not (and (goal 238 6) (goal want-alliance 1)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (and (player-in-game 6) (and (goal player-6-is-bad-egg 0) (and (not (stance-toward 6 ally)) (goal tried-alliance-with-6 0)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 244 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 244 0)
=>
    (set-goal 244 1)
)
(defrule
    (random-number == 2)
    (goal 244 0)
=>
    (set-goal 244 2)
)
(defrule
    (random-number == 3)
    (goal 244 0)
=>
    (set-goal 244 3)
)
(defrule
    (goal 244 1)
=>
    (chat-to-player 6 "Let's be allies.")
)
(defrule
    (goal 244 2)
=>
    (chat-to-player 6 "Want to work together?")
)
(defrule
    (goal 244 3)
=>
    (chat-to-player 6 "Want to team up?")
)
(defrule
    (and (player-in-game 6) (and (goal player-6-is-bad-egg 0) (and (not (stance-toward 6 ally)) (goal tried-alliance-with-6 0))))
=>
    (chat-local-to-self "requesting alliance from player 6")
    (set-stance 6 ally)
    (up-modify-goal player-6-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (not (and (goal 238 7) (goal want-alliance 1)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (and (player-in-game 7) (and (goal player-7-is-bad-egg 0) (and (not (stance-toward 7 ally)) (goal tried-alliance-with-7 0)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 245 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 245 0)
=>
    (set-goal 245 1)
)
(defrule
    (random-number == 2)
    (goal 245 0)
=>
    (set-goal 245 2)
)
(defrule
    (random-number == 3)
    (goal 245 0)
=>
    (set-goal 245 3)
)
(defrule
    (goal 245 1)
=>
    (chat-to-player 7 "Let's be allies.")
)
(defrule
    (goal 245 2)
=>
    (chat-to-player 7 "Want to work together?")
)
(defrule
    (goal 245 3)
=>
    (chat-to-player 7 "Want to team up?")
)
(defrule
    (and (player-in-game 7) (and (goal player-7-is-bad-egg 0) (and (not (stance-toward 7 ally)) (goal tried-alliance-with-7 0))))
=>
    (chat-local-to-self "requesting alliance from player 7")
    (set-stance 7 ally)
    (up-modify-goal player-7-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (not (and (goal 238 8) (goal want-alliance 1)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (and (player-in-game 8) (and (goal player-8-is-bad-egg 0) (and (not (stance-toward 8 ally)) (goal tried-alliance-with-8 0)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 246 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 246 0)
=>
    (set-goal 246 1)
)
(defrule
    (random-number == 2)
    (goal 246 0)
=>
    (set-goal 246 2)
)
(defrule
    (random-number == 3)
    (goal 246 0)
=>
    (set-goal 246 3)
)
(defrule
    (goal 246 1)
=>
    (chat-to-player 8 "Let's be allies.")
)
(defrule
    (goal 246 2)
=>
    (chat-to-player 8 "Want to work together?")
)
(defrule
    (goal 246 3)
=>
    (chat-to-player 8 "Want to team up?")
)
(defrule
    (and (player-in-game 8) (and (goal player-8-is-bad-egg 0) (and (not (stance-toward 8 ally)) (goal tried-alliance-with-8 0))))
=>
    (chat-local-to-self "requesting alliance from player 8")
    (set-stance 8 ally)
    (up-modify-goal player-8-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (and (goal enemy-players-count 0) (goal want-alliance 0))
=>
    (set-goal 247 0)
    (generate-random-number 8)
)
(defrule
    (random-number == 1)
    (goal 247 0)
    (and (goal enemy-players-count 0) (goal want-alliance 0))
=>
    (set-goal 247 1)
)
(defrule
    (random-number == 2)
    (goal 247 0)
    (and (goal enemy-players-count 0) (goal want-alliance 0))
=>
    (set-goal 247 2)
)
(defrule
    (random-number == 3)
    (goal 247 0)
    (and (goal enemy-players-count 0) (goal want-alliance 0))
=>
    (set-goal 247 3)
)
(defrule
    (random-number == 4)
    (goal 247 0)
    (and (goal enemy-players-count 0) (goal want-alliance 0))
=>
    (set-goal 247 4)
)
(defrule
    (random-number == 5)
    (goal 247 0)
    (and (goal enemy-players-count 0) (goal want-alliance 0))
=>
    (set-goal 247 5)
)
(defrule
    (random-number == 6)
    (goal 247 0)
    (and (goal enemy-players-count 0) (goal want-alliance 0))
=>
    (set-goal 247 6)
)
(defrule
    (random-number == 7)
    (goal 247 0)
    (and (goal enemy-players-count 0) (goal want-alliance 0))
=>
    (set-goal 247 7)
)
(defrule
    (random-number == 8)
    (goal 247 0)
    (and (goal enemy-players-count 0) (goal want-alliance 0))
=>
    (set-goal 247 8)
)
(defrule
    (not (and (goal 247 1) (and (goal enemy-players-count 0) (goal want-alliance 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 1) (stance-toward 1 neutral))
=>
    (chat-local-to-self "making neutral player 1 our enemy")
    (set-stance 1 enemy)
)
(defrule
    (not (and (goal 247 2) (and (goal enemy-players-count 0) (goal want-alliance 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 2) (stance-toward 2 neutral))
=>
    (chat-local-to-self "making neutral player 2 our enemy")
    (set-stance 2 enemy)
)
(defrule
    (not (and (goal 247 3) (and (goal enemy-players-count 0) (goal want-alliance 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 3) (stance-toward 3 neutral))
=>
    (chat-local-to-self "making neutral player 3 our enemy")
    (set-stance 3 enemy)
)
(defrule
    (not (and (goal 247 4) (and (goal enemy-players-count 0) (goal want-alliance 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 4) (stance-toward 4 neutral))
=>
    (chat-local-to-self "making neutral player 4 our enemy")
    (set-stance 4 enemy)
)
(defrule
    (not (and (goal 247 5) (and (goal enemy-players-count 0) (goal want-alliance 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 5) (stance-toward 5 neutral))
=>
    (chat-local-to-self "making neutral player 5 our enemy")
    (set-stance 5 enemy)
)
(defrule
    (not (and (goal 247 6) (and (goal enemy-players-count 0) (goal want-alliance 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 6) (stance-toward 6 neutral))
=>
    (chat-local-to-self "making neutral player 6 our enemy")
    (set-stance 6 enemy)
)
(defrule
    (not (and (goal 247 7) (and (goal enemy-players-count 0) (goal want-alliance 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 7) (stance-toward 7 neutral))
=>
    (chat-local-to-self "making neutral player 7 our enemy")
    (set-stance 7 enemy)
)
(defrule
    (not (and (goal 247 8) (and (goal enemy-players-count 0) (goal want-alliance 0))))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 8) (stance-toward 8 neutral))
=>
    (chat-local-to-self "making neutral player 8 our enemy")
    (set-stance 8 enemy)
)
(defrule
    (goal want-alliance -1)
=>
    (set-goal 248 0)
    (generate-random-number 8)
)
(defrule
    (random-number == 1)
    (goal 248 0)
    (goal want-alliance -1)
=>
    (set-goal 248 1)
)
(defrule
    (random-number == 2)
    (goal 248 0)
    (goal want-alliance -1)
=>
    (set-goal 248 2)
)
(defrule
    (random-number == 3)
    (goal 248 0)
    (goal want-alliance -1)
=>
    (set-goal 248 3)
)
(defrule
    (random-number == 4)
    (goal 248 0)
    (goal want-alliance -1)
=>
    (set-goal 248 4)
)
(defrule
    (random-number == 5)
    (goal 248 0)
    (goal want-alliance -1)
=>
    (set-goal 248 5)
)
(defrule
    (random-number == 6)
    (goal 248 0)
    (goal want-alliance -1)
=>
    (set-goal 248 6)
)
(defrule
    (random-number == 7)
    (goal 248 0)
    (goal want-alliance -1)
=>
    (set-goal 248 7)
)
(defrule
    (random-number == 8)
    (goal 248 0)
    (goal want-alliance -1)
=>
    (set-goal 248 8)
)
(defrule
    (not (and (goal 248 1) (goal want-alliance -1)))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 1) (goal allied-with-1 1))
=>
    (set-goal chat-betray-player 1)
    (set-stance 1 enemy)
    (set-goal player-1-is-bad-egg 1)
    (set-goal allied-with-1 0)
)
(defrule
    (not (and (goal 248 2) (goal want-alliance -1)))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 2) (goal allied-with-2 1))
=>
    (set-goal chat-betray-player 2)
    (set-stance 2 enemy)
    (set-goal player-2-is-bad-egg 1)
    (set-goal allied-with-2 0)
)
(defrule
    (not (and (goal 248 3) (goal want-alliance -1)))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 3) (goal allied-with-3 1))
=>
    (set-goal chat-betray-player 3)
    (set-stance 3 enemy)
    (set-goal player-3-is-bad-egg 1)
    (set-goal allied-with-3 0)
)
(defrule
    (not (and (goal 248 4) (goal want-alliance -1)))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 4) (goal allied-with-4 1))
=>
    (set-goal chat-betray-player 4)
    (set-stance 4 enemy)
    (set-goal player-4-is-bad-egg 1)
    (set-goal allied-with-4 0)
)
(defrule
    (not (and (goal 248 5) (goal want-alliance -1)))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 5) (goal allied-with-5 1))
=>
    (set-goal chat-betray-player 5)
    (set-stance 5 enemy)
    (set-goal player-5-is-bad-egg 1)
    (set-goal allied-with-5 0)
)
(defrule
    (not (and (goal 248 6) (goal want-alliance -1)))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 6) (goal allied-with-6 1))
=>
    (set-goal chat-betray-player 6)
    (set-stance 6 enemy)
    (set-goal player-6-is-bad-egg 1)
    (set-goal allied-with-6 0)
)
(defrule
    (not (and (goal 248 7) (goal want-alliance -1)))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 7) (goal allied-with-7 1))
=>
    (set-goal chat-betray-player 7)
    (set-stance 7 enemy)
    (set-goal player-7-is-bad-egg 1)
    (set-goal allied-with-7 0)
)
(defrule
    (not (and (goal 248 8) (goal want-alliance -1)))
=>
    (up-jump-rule 1)
)
(defrule
    (and (player-in-game 8) (goal allied-with-8 1))
=>
    (set-goal chat-betray-player 8)
    (set-stance 8 enemy)
    (set-goal player-8-is-bad-egg 1)
    (set-goal allied-with-8 0)
)
(defrule
    (not (and (goal accept-alliance-requests 1) (and (or (stance-toward 1 enemy) (stance-toward 1 neutral)) (and (players-stance 1 ally) (and (and (goal player-1-is-bad-egg 0) (goal allied-with-1 0)) (player-in-game 1))))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 249 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 249 0)
=>
    (set-goal 249 1)
)
(defrule
    (random-number == 2)
    (goal 249 0)
=>
    (set-goal 249 2)
)
(defrule
    (random-number == 3)
    (goal 249 0)
=>
    (set-goal 249 3)
)
(defrule
    (goal 249 1)
=>
    (chat-to-player 1 "Good idea.")
)
(defrule
    (goal 249 2)
=>
    (chat-to-player 1 "I was hoping you'd do that!")
)
(defrule
    (goal 249 3)
=>
    (chat-to-player 1 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or (stance-toward 1 enemy) (stance-toward 1 neutral))
    (players-stance 1 ally)
    (and (goal player-1-is-bad-egg 0) (goal allied-with-1 0))
    (player-in-game 1)
=>
    (chat-local-to-self "accepting alliance request from player 1")
    (set-stance 1 ally)
    (set-goal allied-with-1 1)
)
(defrule
    (not (and (not (or (stance-toward 1 enemy) (stance-toward 1 neutral))) (and (players-stance 1 ally) (and (and (goal player-1-is-bad-egg 0) (goal allied-with-1 0)) (player-in-game 1)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 250 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 250 0)
=>
    (set-goal 250 1)
)
(defrule
    (random-number == 2)
    (goal 250 0)
=>
    (set-goal 250 2)
)
(defrule
    (random-number == 3)
    (goal 250 0)
=>
    (set-goal 250 3)
)
(defrule
    (goal 250 1)
=>
    (chat-to-player 1 "Let's do this. Together.")
)
(defrule
    (goal 250 2)
=>
    (chat-to-player 1 "Nice to have you with me.")
)
(defrule
    (goal 250 3)
=>
    (chat-to-player 1 "Unstoppable team!")
)
(defrule
    (not (or (stance-toward 1 enemy) (stance-toward 1 neutral)))
    (players-stance 1 ally)
    (and (goal player-1-is-bad-egg 0) (goal allied-with-1 0))
    (player-in-game 1)
=>
    (chat-local-to-self "player 1 accepted our alliance request")
    (set-goal allied-with-1 1)
)
(defrule
    (and (goal allied-with-1 1) (not (players-stance 1 ally)))
    (player-in-game 1)
=>
    (set-goal chat-betrayed-by-player 1)
    (set-goal player-1-is-bad-egg 1)
    (set-goal allied-with-1 0)
    (set-stance 1 enemy)
)
(defrule
    (and (goal threat-player 1) (not (stance-toward 1 enemy)))
    (player-in-game 1)
=>
    (chat-local-to-self "attacked by player 1")
    (set-goal allied-with-1 0)
    (set-stance 1 enemy)
)
(defrule
    (and (goal allied-with-1 0) (and (stance-toward 1 ally) (goal player-1-is-bad-egg 0)))
    (player-in-game 1)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-1-alliance-request-time-stamp)
)
(defrule
    (not (and (up-compare-goal temp c:>= alliance-request-timeout) (and (and (goal allied-with-1 0) (and (stance-toward 1 ally) (goal player-1-is-bad-egg 0))) (player-in-game 1))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 251 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 251 0)
=>
    (set-goal 251 1)
)
(defrule
    (random-number == 2)
    (goal 251 0)
=>
    (set-goal 251 2)
)
(defrule
    (random-number == 3)
    (goal 251 0)
=>
    (set-goal 251 3)
)
(defrule
    (goal 251 1)
=>
    (chat-to-player 1 "Fine, have it your way.")
)
(defrule
    (goal 251 2)
=>
    (chat-to-player 1 "Would've been nice.")
)
(defrule
    (goal 251 3)
=>
    (chat-to-player 1 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (and (goal allied-with-1 0) (and (stance-toward 1 ally) (goal player-1-is-bad-egg 0)))
    (player-in-game 1)
=>
    (chat-local-to-self "alliance request to player 1 timed out")
    (set-stance 1 neutral)
    (set-goal tried-alliance-with-1 1)
)
(defrule
    (and (players-stance 1 ally) (not (stance-toward 1 ally)))
    (not (player-in-game 1))
=>
    (set-stance 1 ally)
)
(defrule
    (not (and (goal accept-alliance-requests 1) (and (or (stance-toward 2 enemy) (stance-toward 2 neutral)) (and (players-stance 2 ally) (and (and (goal player-2-is-bad-egg 0) (goal allied-with-2 0)) (player-in-game 2))))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 252 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 252 0)
=>
    (set-goal 252 1)
)
(defrule
    (random-number == 2)
    (goal 252 0)
=>
    (set-goal 252 2)
)
(defrule
    (random-number == 3)
    (goal 252 0)
=>
    (set-goal 252 3)
)
(defrule
    (goal 252 1)
=>
    (chat-to-player 2 "Good idea.")
)
(defrule
    (goal 252 2)
=>
    (chat-to-player 2 "I was hoping you'd do that!")
)
(defrule
    (goal 252 3)
=>
    (chat-to-player 2 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or (stance-toward 2 enemy) (stance-toward 2 neutral))
    (players-stance 2 ally)
    (and (goal player-2-is-bad-egg 0) (goal allied-with-2 0))
    (player-in-game 2)
=>
    (chat-local-to-self "accepting alliance request from player 2")
    (set-stance 2 ally)
    (set-goal allied-with-2 1)
)
(defrule
    (not (and (not (or (stance-toward 2 enemy) (stance-toward 2 neutral))) (and (players-stance 2 ally) (and (and (goal player-2-is-bad-egg 0) (goal allied-with-2 0)) (player-in-game 2)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 253 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 253 0)
=>
    (set-goal 253 1)
)
(defrule
    (random-number == 2)
    (goal 253 0)
=>
    (set-goal 253 2)
)
(defrule
    (random-number == 3)
    (goal 253 0)
=>
    (set-goal 253 3)
)
(defrule
    (goal 253 1)
=>
    (chat-to-player 2 "Let's do this. Together.")
)
(defrule
    (goal 253 2)
=>
    (chat-to-player 2 "Nice to have you with me.")
)
(defrule
    (goal 253 3)
=>
    (chat-to-player 2 "Unstoppable team!")
)
(defrule
    (not (or (stance-toward 2 enemy) (stance-toward 2 neutral)))
    (players-stance 2 ally)
    (and (goal player-2-is-bad-egg 0) (goal allied-with-2 0))
    (player-in-game 2)
=>
    (chat-local-to-self "player 2 accepted our alliance request")
    (set-goal allied-with-2 1)
)
(defrule
    (and (goal allied-with-2 1) (not (players-stance 2 ally)))
    (player-in-game 2)
=>
    (set-goal chat-betrayed-by-player 2)
    (set-goal player-2-is-bad-egg 1)
    (set-goal allied-with-2 0)
    (set-stance 2 enemy)
)
(defrule
    (and (goal threat-player 2) (not (stance-toward 2 enemy)))
    (player-in-game 2)
=>
    (chat-local-to-self "attacked by player 2")
    (set-goal allied-with-2 0)
    (set-stance 2 enemy)
)
(defrule
    (and (goal allied-with-2 0) (and (stance-toward 2 ally) (goal player-2-is-bad-egg 0)))
    (player-in-game 2)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-2-alliance-request-time-stamp)
)
(defrule
    (not (and (up-compare-goal temp c:>= alliance-request-timeout) (and (and (goal allied-with-2 0) (and (stance-toward 2 ally) (goal player-2-is-bad-egg 0))) (player-in-game 2))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 254 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 254 0)
=>
    (set-goal 254 1)
)
(defrule
    (random-number == 2)
    (goal 254 0)
=>
    (set-goal 254 2)
)
(defrule
    (random-number == 3)
    (goal 254 0)
=>
    (set-goal 254 3)
)
(defrule
    (goal 254 1)
=>
    (chat-to-player 2 "Fine, have it your way.")
)
(defrule
    (goal 254 2)
=>
    (chat-to-player 2 "Would've been nice.")
)
(defrule
    (goal 254 3)
=>
    (chat-to-player 2 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (and (goal allied-with-2 0) (and (stance-toward 2 ally) (goal player-2-is-bad-egg 0)))
    (player-in-game 2)
=>
    (chat-local-to-self "alliance request to player 2 timed out")
    (set-stance 2 neutral)
    (set-goal tried-alliance-with-2 1)
)
(defrule
    (and (players-stance 2 ally) (not (stance-toward 2 ally)))
    (not (player-in-game 2))
=>
    (set-stance 2 ally)
)
(defrule
    (not (and (goal accept-alliance-requests 1) (and (or (stance-toward 3 enemy) (stance-toward 3 neutral)) (and (players-stance 3 ally) (and (and (goal player-3-is-bad-egg 0) (goal allied-with-3 0)) (player-in-game 3))))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 255 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 255 0)
=>
    (set-goal 255 1)
)
(defrule
    (random-number == 2)
    (goal 255 0)
=>
    (set-goal 255 2)
)
(defrule
    (random-number == 3)
    (goal 255 0)
=>
    (set-goal 255 3)
)
(defrule
    (goal 255 1)
=>
    (chat-to-player 3 "Good idea.")
)
(defrule
    (goal 255 2)
=>
    (chat-to-player 3 "I was hoping you'd do that!")
)
(defrule
    (goal 255 3)
=>
    (chat-to-player 3 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or (stance-toward 3 enemy) (stance-toward 3 neutral))
    (players-stance 3 ally)
    (and (goal player-3-is-bad-egg 0) (goal allied-with-3 0))
    (player-in-game 3)
=>
    (chat-local-to-self "accepting alliance request from player 3")
    (set-stance 3 ally)
    (set-goal allied-with-3 1)
)
(defrule
    (not (and (not (or (stance-toward 3 enemy) (stance-toward 3 neutral))) (and (players-stance 3 ally) (and (and (goal player-3-is-bad-egg 0) (goal allied-with-3 0)) (player-in-game 3)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 256 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 256 0)
=>
    (set-goal 256 1)
)
(defrule
    (random-number == 2)
    (goal 256 0)
=>
    (set-goal 256 2)
)
(defrule
    (random-number == 3)
    (goal 256 0)
=>
    (set-goal 256 3)
)
(defrule
    (goal 256 1)
=>
    (chat-to-player 3 "Let's do this. Together.")
)
(defrule
    (goal 256 2)
=>
    (chat-to-player 3 "Nice to have you with me.")
)
(defrule
    (goal 256 3)
=>
    (chat-to-player 3 "Unstoppable team!")
)
(defrule
    (not (or (stance-toward 3 enemy) (stance-toward 3 neutral)))
    (players-stance 3 ally)
    (and (goal player-3-is-bad-egg 0) (goal allied-with-3 0))
    (player-in-game 3)
=>
    (chat-local-to-self "player 3 accepted our alliance request")
    (set-goal allied-with-3 1)
)
(defrule
    (and (goal allied-with-3 1) (not (players-stance 3 ally)))
    (player-in-game 3)
=>
    (set-goal chat-betrayed-by-player 3)
    (set-goal player-3-is-bad-egg 1)
    (set-goal allied-with-3 0)
    (set-stance 3 enemy)
)
(defrule
    (and (goal threat-player 3) (not (stance-toward 3 enemy)))
    (player-in-game 3)
=>
    (chat-local-to-self "attacked by player 3")
    (set-goal allied-with-3 0)
    (set-stance 3 enemy)
)
(defrule
    (and (goal allied-with-3 0) (and (stance-toward 3 ally) (goal player-3-is-bad-egg 0)))
    (player-in-game 3)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-3-alliance-request-time-stamp)
)
(defrule
    (not (and (up-compare-goal temp c:>= alliance-request-timeout) (and (and (goal allied-with-3 0) (and (stance-toward 3 ally) (goal player-3-is-bad-egg 0))) (player-in-game 3))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 257 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 257 0)
=>
    (set-goal 257 1)
)
(defrule
    (random-number == 2)
    (goal 257 0)
=>
    (set-goal 257 2)
)
(defrule
    (random-number == 3)
    (goal 257 0)
=>
    (set-goal 257 3)
)
(defrule
    (goal 257 1)
=>
    (chat-to-player 3 "Fine, have it your way.")
)
(defrule
    (goal 257 2)
=>
    (chat-to-player 3 "Would've been nice.")
)
(defrule
    (goal 257 3)
=>
    (chat-to-player 3 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (and (goal allied-with-3 0) (and (stance-toward 3 ally) (goal player-3-is-bad-egg 0)))
    (player-in-game 3)
=>
    (chat-local-to-self "alliance request to player 3 timed out")
    (set-stance 3 neutral)
    (set-goal tried-alliance-with-3 1)
)
(defrule
    (and (players-stance 3 ally) (not (stance-toward 3 ally)))
    (not (player-in-game 3))
=>
    (set-stance 3 ally)
)
(defrule
    (not (and (goal accept-alliance-requests 1) (and (or (stance-toward 4 enemy) (stance-toward 4 neutral)) (and (players-stance 4 ally) (and (and (goal player-4-is-bad-egg 0) (goal allied-with-4 0)) (player-in-game 4))))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 258 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 258 0)
=>
    (set-goal 258 1)
)
(defrule
    (random-number == 2)
    (goal 258 0)
=>
    (set-goal 258 2)
)
(defrule
    (random-number == 3)
    (goal 258 0)
=>
    (set-goal 258 3)
)
(defrule
    (goal 258 1)
=>
    (chat-to-player 4 "Good idea.")
)
(defrule
    (goal 258 2)
=>
    (chat-to-player 4 "I was hoping you'd do that!")
)
(defrule
    (goal 258 3)
=>
    (chat-to-player 4 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or (stance-toward 4 enemy) (stance-toward 4 neutral))
    (players-stance 4 ally)
    (and (goal player-4-is-bad-egg 0) (goal allied-with-4 0))
    (player-in-game 4)
=>
    (chat-local-to-self "accepting alliance request from player 4")
    (set-stance 4 ally)
    (set-goal allied-with-4 1)
)
(defrule
    (not (and (not (or (stance-toward 4 enemy) (stance-toward 4 neutral))) (and (players-stance 4 ally) (and (and (goal player-4-is-bad-egg 0) (goal allied-with-4 0)) (player-in-game 4)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 259 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 259 0)
=>
    (set-goal 259 1)
)
(defrule
    (random-number == 2)
    (goal 259 0)
=>
    (set-goal 259 2)
)
(defrule
    (random-number == 3)
    (goal 259 0)
=>
    (set-goal 259 3)
)
(defrule
    (goal 259 1)
=>
    (chat-to-player 4 "Let's do this. Together.")
)
(defrule
    (goal 259 2)
=>
    (chat-to-player 4 "Nice to have you with me.")
)
(defrule
    (goal 259 3)
=>
    (chat-to-player 4 "Unstoppable team!")
)
(defrule
    (not (or (stance-toward 4 enemy) (stance-toward 4 neutral)))
    (players-stance 4 ally)
    (and (goal player-4-is-bad-egg 0) (goal allied-with-4 0))
    (player-in-game 4)
=>
    (chat-local-to-self "player 4 accepted our alliance request")
    (set-goal allied-with-4 1)
)
(defrule
    (and (goal allied-with-4 1) (not (players-stance 4 ally)))
    (player-in-game 4)
=>
    (set-goal chat-betrayed-by-player 4)
    (set-goal player-4-is-bad-egg 1)
    (set-goal allied-with-4 0)
    (set-stance 4 enemy)
)
(defrule
    (and (goal threat-player 4) (not (stance-toward 4 enemy)))
    (player-in-game 4)
=>
    (chat-local-to-self "attacked by player 4")
    (set-goal allied-with-4 0)
    (set-stance 4 enemy)
)
(defrule
    (and (goal allied-with-4 0) (and (stance-toward 4 ally) (goal player-4-is-bad-egg 0)))
    (player-in-game 4)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-4-alliance-request-time-stamp)
)
(defrule
    (not (and (up-compare-goal temp c:>= alliance-request-timeout) (and (and (goal allied-with-4 0) (and (stance-toward 4 ally) (goal player-4-is-bad-egg 0))) (player-in-game 4))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 260 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 260 0)
=>
    (set-goal 260 1)
)
(defrule
    (random-number == 2)
    (goal 260 0)
=>
    (set-goal 260 2)
)
(defrule
    (random-number == 3)
    (goal 260 0)
=>
    (set-goal 260 3)
)
(defrule
    (goal 260 1)
=>
    (chat-to-player 4 "Fine, have it your way.")
)
(defrule
    (goal 260 2)
=>
    (chat-to-player 4 "Would've been nice.")
)
(defrule
    (goal 260 3)
=>
    (chat-to-player 4 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (and (goal allied-with-4 0) (and (stance-toward 4 ally) (goal player-4-is-bad-egg 0)))
    (player-in-game 4)
=>
    (chat-local-to-self "alliance request to player 4 timed out")
    (set-stance 4 neutral)
    (set-goal tried-alliance-with-4 1)
)
(defrule
    (and (players-stance 4 ally) (not (stance-toward 4 ally)))
    (not (player-in-game 4))
=>
    (set-stance 4 ally)
)
(defrule
    (not (and (goal accept-alliance-requests 1) (and (or (stance-toward 5 enemy) (stance-toward 5 neutral)) (and (players-stance 5 ally) (and (and (goal player-5-is-bad-egg 0) (goal allied-with-5 0)) (player-in-game 5))))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 261 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 261 0)
=>
    (set-goal 261 1)
)
(defrule
    (random-number == 2)
    (goal 261 0)
=>
    (set-goal 261 2)
)
(defrule
    (random-number == 3)
    (goal 261 0)
=>
    (set-goal 261 3)
)
(defrule
    (goal 261 1)
=>
    (chat-to-player 5 "Good idea.")
)
(defrule
    (goal 261 2)
=>
    (chat-to-player 5 "I was hoping you'd do that!")
)
(defrule
    (goal 261 3)
=>
    (chat-to-player 5 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or (stance-toward 5 enemy) (stance-toward 5 neutral))
    (players-stance 5 ally)
    (and (goal player-5-is-bad-egg 0) (goal allied-with-5 0))
    (player-in-game 5)
=>
    (chat-local-to-self "accepting alliance request from player 5")
    (set-stance 5 ally)
    (set-goal allied-with-5 1)
)
(defrule
    (not (and (not (or (stance-toward 5 enemy) (stance-toward 5 neutral))) (and (players-stance 5 ally) (and (and (goal player-5-is-bad-egg 0) (goal allied-with-5 0)) (player-in-game 5)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 262 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 262 0)
=>
    (set-goal 262 1)
)
(defrule
    (random-number == 2)
    (goal 262 0)
=>
    (set-goal 262 2)
)
(defrule
    (random-number == 3)
    (goal 262 0)
=>
    (set-goal 262 3)
)
(defrule
    (goal 262 1)
=>
    (chat-to-player 5 "Let's do this. Together.")
)
(defrule
    (goal 262 2)
=>
    (chat-to-player 5 "Nice to have you with me.")
)
(defrule
    (goal 262 3)
=>
    (chat-to-player 5 "Unstoppable team!")
)
(defrule
    (not (or (stance-toward 5 enemy) (stance-toward 5 neutral)))
    (players-stance 5 ally)
    (and (goal player-5-is-bad-egg 0) (goal allied-with-5 0))
    (player-in-game 5)
=>
    (chat-local-to-self "player 5 accepted our alliance request")
    (set-goal allied-with-5 1)
)
(defrule
    (and (goal allied-with-5 1) (not (players-stance 5 ally)))
    (player-in-game 5)
=>
    (set-goal chat-betrayed-by-player 5)
    (set-goal player-5-is-bad-egg 1)
    (set-goal allied-with-5 0)
    (set-stance 5 enemy)
)
(defrule
    (and (goal threat-player 5) (not (stance-toward 5 enemy)))
    (player-in-game 5)
=>
    (chat-local-to-self "attacked by player 5")
    (set-goal allied-with-5 0)
    (set-stance 5 enemy)
)
(defrule
    (and (goal allied-with-5 0) (and (stance-toward 5 ally) (goal player-5-is-bad-egg 0)))
    (player-in-game 5)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-5-alliance-request-time-stamp)
)
(defrule
    (not (and (up-compare-goal temp c:>= alliance-request-timeout) (and (and (goal allied-with-5 0) (and (stance-toward 5 ally) (goal player-5-is-bad-egg 0))) (player-in-game 5))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 263 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 263 0)
=>
    (set-goal 263 1)
)
(defrule
    (random-number == 2)
    (goal 263 0)
=>
    (set-goal 263 2)
)
(defrule
    (random-number == 3)
    (goal 263 0)
=>
    (set-goal 263 3)
)
(defrule
    (goal 263 1)
=>
    (chat-to-player 5 "Fine, have it your way.")
)
(defrule
    (goal 263 2)
=>
    (chat-to-player 5 "Would've been nice.")
)
(defrule
    (goal 263 3)
=>
    (chat-to-player 5 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (and (goal allied-with-5 0) (and (stance-toward 5 ally) (goal player-5-is-bad-egg 0)))
    (player-in-game 5)
=>
    (chat-local-to-self "alliance request to player 5 timed out")
    (set-stance 5 neutral)
    (set-goal tried-alliance-with-5 1)
)
(defrule
    (and (players-stance 5 ally) (not (stance-toward 5 ally)))
    (not (player-in-game 5))
=>
    (set-stance 5 ally)
)
(defrule
    (not (and (goal accept-alliance-requests 1) (and (or (stance-toward 6 enemy) (stance-toward 6 neutral)) (and (players-stance 6 ally) (and (and (goal player-6-is-bad-egg 0) (goal allied-with-6 0)) (player-in-game 6))))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 264 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 264 0)
=>
    (set-goal 264 1)
)
(defrule
    (random-number == 2)
    (goal 264 0)
=>
    (set-goal 264 2)
)
(defrule
    (random-number == 3)
    (goal 264 0)
=>
    (set-goal 264 3)
)
(defrule
    (goal 264 1)
=>
    (chat-to-player 6 "Good idea.")
)
(defrule
    (goal 264 2)
=>
    (chat-to-player 6 "I was hoping you'd do that!")
)
(defrule
    (goal 264 3)
=>
    (chat-to-player 6 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or (stance-toward 6 enemy) (stance-toward 6 neutral))
    (players-stance 6 ally)
    (and (goal player-6-is-bad-egg 0) (goal allied-with-6 0))
    (player-in-game 6)
=>
    (chat-local-to-self "accepting alliance request from player 6")
    (set-stance 6 ally)
    (set-goal allied-with-6 1)
)
(defrule
    (not (and (not (or (stance-toward 6 enemy) (stance-toward 6 neutral))) (and (players-stance 6 ally) (and (and (goal player-6-is-bad-egg 0) (goal allied-with-6 0)) (player-in-game 6)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 265 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 265 0)
=>
    (set-goal 265 1)
)
(defrule
    (random-number == 2)
    (goal 265 0)
=>
    (set-goal 265 2)
)
(defrule
    (random-number == 3)
    (goal 265 0)
=>
    (set-goal 265 3)
)
(defrule
    (goal 265 1)
=>
    (chat-to-player 6 "Let's do this. Together.")
)
(defrule
    (goal 265 2)
=>
    (chat-to-player 6 "Nice to have you with me.")
)
(defrule
    (goal 265 3)
=>
    (chat-to-player 6 "Unstoppable team!")
)
(defrule
    (not (or (stance-toward 6 enemy) (stance-toward 6 neutral)))
    (players-stance 6 ally)
    (and (goal player-6-is-bad-egg 0) (goal allied-with-6 0))
    (player-in-game 6)
=>
    (chat-local-to-self "player 6 accepted our alliance request")
    (set-goal allied-with-6 1)
)
(defrule
    (and (goal allied-with-6 1) (not (players-stance 6 ally)))
    (player-in-game 6)
=>
    (set-goal chat-betrayed-by-player 6)
    (set-goal player-6-is-bad-egg 1)
    (set-goal allied-with-6 0)
    (set-stance 6 enemy)
)
(defrule
    (and (goal threat-player 6) (not (stance-toward 6 enemy)))
    (player-in-game 6)
=>
    (chat-local-to-self "attacked by player 6")
    (set-goal allied-with-6 0)
    (set-stance 6 enemy)
)
(defrule
    (and (goal allied-with-6 0) (and (stance-toward 6 ally) (goal player-6-is-bad-egg 0)))
    (player-in-game 6)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-6-alliance-request-time-stamp)
)
(defrule
    (not (and (up-compare-goal temp c:>= alliance-request-timeout) (and (and (goal allied-with-6 0) (and (stance-toward 6 ally) (goal player-6-is-bad-egg 0))) (player-in-game 6))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 266 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 266 0)
=>
    (set-goal 266 1)
)
(defrule
    (random-number == 2)
    (goal 266 0)
=>
    (set-goal 266 2)
)
(defrule
    (random-number == 3)
    (goal 266 0)
=>
    (set-goal 266 3)
)
(defrule
    (goal 266 1)
=>
    (chat-to-player 6 "Fine, have it your way.")
)
(defrule
    (goal 266 2)
=>
    (chat-to-player 6 "Would've been nice.")
)
(defrule
    (goal 266 3)
=>
    (chat-to-player 6 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (and (goal allied-with-6 0) (and (stance-toward 6 ally) (goal player-6-is-bad-egg 0)))
    (player-in-game 6)
=>
    (chat-local-to-self "alliance request to player 6 timed out")
    (set-stance 6 neutral)
    (set-goal tried-alliance-with-6 1)
)
(defrule
    (and (players-stance 6 ally) (not (stance-toward 6 ally)))
    (not (player-in-game 6))
=>
    (set-stance 6 ally)
)
(defrule
    (not (and (goal accept-alliance-requests 1) (and (or (stance-toward 7 enemy) (stance-toward 7 neutral)) (and (players-stance 7 ally) (and (and (goal player-7-is-bad-egg 0) (goal allied-with-7 0)) (player-in-game 7))))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 267 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 267 0)
=>
    (set-goal 267 1)
)
(defrule
    (random-number == 2)
    (goal 267 0)
=>
    (set-goal 267 2)
)
(defrule
    (random-number == 3)
    (goal 267 0)
=>
    (set-goal 267 3)
)
(defrule
    (goal 267 1)
=>
    (chat-to-player 7 "Good idea.")
)
(defrule
    (goal 267 2)
=>
    (chat-to-player 7 "I was hoping you'd do that!")
)
(defrule
    (goal 267 3)
=>
    (chat-to-player 7 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or (stance-toward 7 enemy) (stance-toward 7 neutral))
    (players-stance 7 ally)
    (and (goal player-7-is-bad-egg 0) (goal allied-with-7 0))
    (player-in-game 7)
=>
    (chat-local-to-self "accepting alliance request from player 7")
    (set-stance 7 ally)
    (set-goal allied-with-7 1)
)
(defrule
    (not (and (not (or (stance-toward 7 enemy) (stance-toward 7 neutral))) (and (players-stance 7 ally) (and (and (goal player-7-is-bad-egg 0) (goal allied-with-7 0)) (player-in-game 7)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 268 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 268 0)
=>
    (set-goal 268 1)
)
(defrule
    (random-number == 2)
    (goal 268 0)
=>
    (set-goal 268 2)
)
(defrule
    (random-number == 3)
    (goal 268 0)
=>
    (set-goal 268 3)
)
(defrule
    (goal 268 1)
=>
    (chat-to-player 7 "Let's do this. Together.")
)
(defrule
    (goal 268 2)
=>
    (chat-to-player 7 "Nice to have you with me.")
)
(defrule
    (goal 268 3)
=>
    (chat-to-player 7 "Unstoppable team!")
)
(defrule
    (not (or (stance-toward 7 enemy) (stance-toward 7 neutral)))
    (players-stance 7 ally)
    (and (goal player-7-is-bad-egg 0) (goal allied-with-7 0))
    (player-in-game 7)
=>
    (chat-local-to-self "player 7 accepted our alliance request")
    (set-goal allied-with-7 1)
)
(defrule
    (and (goal allied-with-7 1) (not (players-stance 7 ally)))
    (player-in-game 7)
=>
    (set-goal chat-betrayed-by-player 7)
    (set-goal player-7-is-bad-egg 1)
    (set-goal allied-with-7 0)
    (set-stance 7 enemy)
)
(defrule
    (and (goal threat-player 7) (not (stance-toward 7 enemy)))
    (player-in-game 7)
=>
    (chat-local-to-self "attacked by player 7")
    (set-goal allied-with-7 0)
    (set-stance 7 enemy)
)
(defrule
    (and (goal allied-with-7 0) (and (stance-toward 7 ally) (goal player-7-is-bad-egg 0)))
    (player-in-game 7)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-7-alliance-request-time-stamp)
)
(defrule
    (not (and (up-compare-goal temp c:>= alliance-request-timeout) (and (and (goal allied-with-7 0) (and (stance-toward 7 ally) (goal player-7-is-bad-egg 0))) (player-in-game 7))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 269 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 269 0)
=>
    (set-goal 269 1)
)
(defrule
    (random-number == 2)
    (goal 269 0)
=>
    (set-goal 269 2)
)
(defrule
    (random-number == 3)
    (goal 269 0)
=>
    (set-goal 269 3)
)
(defrule
    (goal 269 1)
=>
    (chat-to-player 7 "Fine, have it your way.")
)
(defrule
    (goal 269 2)
=>
    (chat-to-player 7 "Would've been nice.")
)
(defrule
    (goal 269 3)
=>
    (chat-to-player 7 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (and (goal allied-with-7 0) (and (stance-toward 7 ally) (goal player-7-is-bad-egg 0)))
    (player-in-game 7)
=>
    (chat-local-to-self "alliance request to player 7 timed out")
    (set-stance 7 neutral)
    (set-goal tried-alliance-with-7 1)
)
(defrule
    (and (players-stance 7 ally) (not (stance-toward 7 ally)))
    (not (player-in-game 7))
=>
    (set-stance 7 ally)
)
(defrule
    (not (and (goal accept-alliance-requests 1) (and (or (stance-toward 8 enemy) (stance-toward 8 neutral)) (and (players-stance 8 ally) (and (and (goal player-8-is-bad-egg 0) (goal allied-with-8 0)) (player-in-game 8))))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 270 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 270 0)
=>
    (set-goal 270 1)
)
(defrule
    (random-number == 2)
    (goal 270 0)
=>
    (set-goal 270 2)
)
(defrule
    (random-number == 3)
    (goal 270 0)
=>
    (set-goal 270 3)
)
(defrule
    (goal 270 1)
=>
    (chat-to-player 8 "Good idea.")
)
(defrule
    (goal 270 2)
=>
    (chat-to-player 8 "I was hoping you'd do that!")
)
(defrule
    (goal 270 3)
=>
    (chat-to-player 8 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or (stance-toward 8 enemy) (stance-toward 8 neutral))
    (players-stance 8 ally)
    (and (goal player-8-is-bad-egg 0) (goal allied-with-8 0))
    (player-in-game 8)
=>
    (chat-local-to-self "accepting alliance request from player 8")
    (set-stance 8 ally)
    (set-goal allied-with-8 1)
)
(defrule
    (not (and (not (or (stance-toward 8 enemy) (stance-toward 8 neutral))) (and (players-stance 8 ally) (and (and (goal player-8-is-bad-egg 0) (goal allied-with-8 0)) (player-in-game 8)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 271 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 271 0)
=>
    (set-goal 271 1)
)
(defrule
    (random-number == 2)
    (goal 271 0)
=>
    (set-goal 271 2)
)
(defrule
    (random-number == 3)
    (goal 271 0)
=>
    (set-goal 271 3)
)
(defrule
    (goal 271 1)
=>
    (chat-to-player 8 "Let's do this. Together.")
)
(defrule
    (goal 271 2)
=>
    (chat-to-player 8 "Nice to have you with me.")
)
(defrule
    (goal 271 3)
=>
    (chat-to-player 8 "Unstoppable team!")
)
(defrule
    (not (or (stance-toward 8 enemy) (stance-toward 8 neutral)))
    (players-stance 8 ally)
    (and (goal player-8-is-bad-egg 0) (goal allied-with-8 0))
    (player-in-game 8)
=>
    (chat-local-to-self "player 8 accepted our alliance request")
    (set-goal allied-with-8 1)
)
(defrule
    (and (goal allied-with-8 1) (not (players-stance 8 ally)))
    (player-in-game 8)
=>
    (set-goal chat-betrayed-by-player 8)
    (set-goal player-8-is-bad-egg 1)
    (set-goal allied-with-8 0)
    (set-stance 8 enemy)
)
(defrule
    (and (goal threat-player 8) (not (stance-toward 8 enemy)))
    (player-in-game 8)
=>
    (chat-local-to-self "attacked by player 8")
    (set-goal allied-with-8 0)
    (set-stance 8 enemy)
)
(defrule
    (and (goal allied-with-8 0) (and (stance-toward 8 ally) (goal player-8-is-bad-egg 0)))
    (player-in-game 8)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-8-alliance-request-time-stamp)
)
(defrule
    (not (and (up-compare-goal temp c:>= alliance-request-timeout) (and (and (goal allied-with-8 0) (and (stance-toward 8 ally) (goal player-8-is-bad-egg 0))) (player-in-game 8))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 272 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 272 0)
=>
    (set-goal 272 1)
)
(defrule
    (random-number == 2)
    (goal 272 0)
=>
    (set-goal 272 2)
)
(defrule
    (random-number == 3)
    (goal 272 0)
=>
    (set-goal 272 3)
)
(defrule
    (goal 272 1)
=>
    (chat-to-player 8 "Fine, have it your way.")
)
(defrule
    (goal 272 2)
=>
    (chat-to-player 8 "Would've been nice.")
)
(defrule
    (goal 272 3)
=>
    (chat-to-player 8 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (and (goal allied-with-8 0) (and (stance-toward 8 ally) (goal player-8-is-bad-egg 0)))
    (player-in-game 8)
=>
    (chat-local-to-self "alliance request to player 8 timed out")
    (set-stance 8 neutral)
    (set-goal tried-alliance-with-8 1)
)
(defrule
    (and (players-stance 8 ally) (not (stance-toward 8 ally)))
    (not (player-in-game 8))
=>
    (set-stance 8 ally)
)
(defrule
    (not (not (goal chat-betrayed-by-player -1)))
=>
    (up-jump-rule 23)
)
(defrule
    (true)
=>
    (set-goal 273 0)
    (generate-random-number 11)
)
(defrule
    (random-number == 1)
    (goal 273 0)
=>
    (set-goal 273 1)
)
(defrule
    (random-number == 2)
    (goal 273 0)
=>
    (set-goal 273 2)
)
(defrule
    (random-number == 3)
    (goal 273 0)
=>
    (set-goal 273 3)
)
(defrule
    (random-number == 4)
    (goal 273 0)
=>
    (set-goal 273 4)
)
(defrule
    (random-number == 5)
    (goal 273 0)
=>
    (set-goal 273 5)
)
(defrule
    (random-number == 6)
    (goal 273 0)
=>
    (set-goal 273 6)
)
(defrule
    (random-number == 7)
    (goal 273 0)
=>
    (set-goal 273 7)
)
(defrule
    (random-number == 8)
    (goal 273 0)
=>
    (set-goal 273 8)
)
(defrule
    (random-number == 9)
    (goal 273 0)
=>
    (set-goal 273 9)
)
(defrule
    (random-number == 10)
    (goal 273 0)
=>
    (set-goal 273 10)
)
(defrule
    (random-number == 11)
    (goal 273 0)
=>
    (set-goal 273 11)
)
(defrule
    (goal 273 1)
=>
    (up-chat-data-to-all "Really %d?" g: chat-betrayed-by-player)
)
(defrule
    (goal 273 2)
=>
    (up-chat-data-to-all "I thought we were friends, player %d!" g: chat-betrayed-by-player)
)
(defrule
    (goal 273 3)
=>
    (up-chat-data-to-all "Player %d! You backstabber!" g: chat-betrayed-by-player)
)
(defrule
    (goal 273 4)
=>
    (up-chat-data-to-all "Player %d? What gives?!" g: chat-betrayed-by-player)
)
(defrule
    (goal 273 5)
=>
    (up-chat-data-to-all "I knew you were a bad egg, player %d." g: chat-betrayed-by-player)
)
(defrule
    (goal 273 6)
=>
    (up-chat-data-to-all "Player %d? But why?" g: chat-betrayed-by-player)
)
(defrule
    (goal 273 7)
=>
    (up-chat-data-to-all "Alright, player %d, bring it on!!" g: chat-betrayed-by-player)
)
(defrule
    (goal 273 8)
=>
    (up-chat-data-to-all "Don't bite off more than you can chew, player %d..." g: chat-betrayed-by-player)
)
(defrule
    (goal 273 9)
=>
    (up-chat-data-to-all "Why me, player %d?" g: chat-betrayed-by-player)
)
(defrule
    (goal 273 10)
=>
    (up-chat-data-to-all "Why now, player %d?" g: chat-betrayed-by-player)
)
(defrule
    (goal 273 11)
=>
    (up-chat-data-to-all "Shame. We could've been best frends, player %d." g: chat-betrayed-by-player)
)
(defrule
    (not (goal chat-betrayed-by-player -1))
=>
    (set-goal chat-betrayed-by-player -1)
)
(defrule
    (not (not (goal chat-betray-player -1)))
=>
    (up-jump-rule 15)
)
(defrule
    (true)
=>
    (set-goal 274 0)
    (generate-random-number 7)
)
(defrule
    (random-number == 1)
    (goal 274 0)
=>
    (set-goal 274 1)
)
(defrule
    (random-number == 2)
    (goal 274 0)
=>
    (set-goal 274 2)
)
(defrule
    (random-number == 3)
    (goal 274 0)
=>
    (set-goal 274 3)
)
(defrule
    (random-number == 4)
    (goal 274 0)
=>
    (set-goal 274 4)
)
(defrule
    (random-number == 5)
    (goal 274 0)
=>
    (set-goal 274 5)
)
(defrule
    (random-number == 6)
    (goal 274 0)
=>
    (set-goal 274 6)
)
(defrule
    (random-number == 7)
    (goal 274 0)
=>
    (set-goal 274 7)
)
(defrule
    (goal 274 1)
=>
    (up-chat-data-to-all "It could never have worked between us, player %d." g: chat-betray-player)
)
(defrule
    (goal 274 2)
=>
    (up-chat-data-to-all "I've had enough of you, player %d." g: chat-betray-player)
)
(defrule
    (goal 274 3)
=>
    (up-chat-data-to-all "You aren't needed anymore player %d." g: chat-betray-player)
)
(defrule
    (goal 274 4)
=>
    (up-chat-data-to-all "Time to die, player %d!" g: chat-betray-player)
)
(defrule
    (goal 274 5)
=>
    (up-chat-data-to-all "Player %d, we're done." g: chat-betray-player)
)
(defrule
    (goal 274 6)
=>
    (up-chat-data-to-all "Your days are numbered, player %d!" g: chat-betray-player)
)
(defrule
    (goal 274 7)
=>
    (up-chat-data-to-all "I'm sorry about this, player %d." g: chat-betray-player)
)
(defrule
    (not (goal chat-betray-player -1))
=>
    (set-goal chat-betray-player -1)
)
(defrule
    (goal resign 1)
    (not (and (goal resign 0) (and (goal locked-teams 0) (or (goal team-game 1) (goal free-for-all 1)))))
=>
    (set-stance every-enemy ally)
    (set-stance every-neutral ally)
)
(defrule
    (goal good-fire-ships 1)
    (taunt-detected any-ally 34)
=>
    (set-goal produce-fire-ships 1)
)
(defrule
    (not (goal good-fire-ships 1))
    (taunt-detected any-ally 34)
=>
    (set-goal produce-galleys 1)
)
(defrule
    (not (taunt-detected any-ally 34))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 275 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 275 0)
=>
    (set-goal 275 1)
)
(defrule
    (random-number == 2)
    (goal 275 0)
=>
    (set-goal 275 2)
)
(defrule
    (random-number == 3)
    (goal 275 0)
=>
    (set-goal 275 3)
)
(defrule
    (goal 275 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 275 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 275 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (taunt-detected any-ally 34)
=>
    (acknowledge-taunt this-any-ally 34)
)
(defrule
    (goal full-water-map 0)
    (taunt-detected any-ally 35)
=>
    (set-goal produce-fire-ships 0)
    (set-goal produce-galleys 0)
)
(defrule
    (not (and (goal full-water-map 0) (taunt-detected any-ally 35)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 276 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 276 0)
=>
    (set-goal 276 1)
)
(defrule
    (random-number == 2)
    (goal 276 0)
=>
    (set-goal 276 2)
)
(defrule
    (random-number == 3)
    (goal 276 0)
=>
    (set-goal 276 3)
)
(defrule
    (goal 276 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 276 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 276 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (not (and (not (goal full-water-map 0)) (taunt-detected any-ally 35)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 277 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 277 0)
=>
    (set-goal 277 1)
)
(defrule
    (random-number == 2)
    (goal 277 0)
=>
    (set-goal 277 2)
)
(defrule
    (random-number == 3)
    (goal 277 0)
=>
    (set-goal 277 3)
)
(defrule
    (goal 277 1)
=>
    (chat-to-player every-ally "2Sorry, no.")
)
(defrule
    (goal 277 2)
=>
    (chat-to-player every-ally "2Not right now, sorry.")
)
(defrule
    (goal 277 3)
=>
    (chat-to-player every-ally "2Sorry, no can do!")
)
(defrule
    (taunt-detected any-ally 35)
=>
    (acknowledge-taunt this-any-ally 35)
)
(defrule
    (and (goal resign 1) (or (and (building-type-count castle == 0) (building-type-count town-center == 0)) (goal team-game 1)))
=>
    (resign)
)
(defrule
    (and (population < 10) (population-cap >= 75))
    (game-time >= 1200)
=>
    (set-goal resign 1)
)
(defrule
    (and (goal full-water-map 1) (and (warboat-count == 0) (unit-type-count fishing-ship == 0)))
    (game-time >= 1200)
=>
    (set-goal resign 1)
)
(defrule
    (and (goal resign 1) (goal team-game 0))
=>
    (delete-building castle)
    (delete-building town-center)
)
(defrule
    (goal produce-archers 1)
=>
    (chat-local-to-self "produce-archers")
    (disable-self)
)
(defrule
    (goal produce-hand-cannoneers 1)
=>
    (chat-local-to-self "produce-hand-cannoneers")
    (disable-self)
)
(defrule
    (goal produce-skirmishers 1)
=>
    (chat-local-to-self "produce-skirmishers")
    (disable-self)
)
(defrule
    (goal produce-cavalry-archers 1)
=>
    (chat-local-to-self "produce-cavalry-archers")
    (disable-self)
)
(defrule
    (goal produce-militia 1)
=>
    (chat-local-to-self "produce-militia")
    (disable-self)
)
(defrule
    (goal produce-spearmen 1)
=>
    (chat-local-to-self "produce-spearmen")
    (disable-self)
)
(defrule
    (goal produce-eagles 1)
=>
    (chat-local-to-self "produce-eagles")
    (disable-self)
)
(defrule
    (goal produce-scouts 1)
=>
    (chat-local-to-self "produce-scouts")
    (disable-self)
)
(defrule
    (goal produce-knights 1)
=>
    (chat-local-to-self "produce-knights")
    (disable-self)
)
(defrule
    (goal produce-camels 1)
=>
    (chat-local-to-self "produce-camels")
    (disable-self)
)
(defrule
    (goal produce-battle-elephants 1)
=>
    (chat-local-to-self "produce-battle-elephants")
    (disable-self)
)
(defrule
    (goal produce-mangonels 1)
=>
    (chat-local-to-self "produce-mangonels")
    (disable-self)
)
(defrule
    (goal produce-scorpions 1)
=>
    (chat-local-to-self "produce-scorpions")
    (disable-self)
)
(defrule
    (goal produce-monks 1)
=>
    (chat-local-to-self "produce-monks")
    (disable-self)
)
(defrule
    (goal produce-unique-units 1)
=>
    (chat-local-to-self "produce-unique-units")
    (disable-self)
)
(defrule
    (goal produce-galleys 1)
=>
    (chat-local-to-self "produce-galleys")
    (disable-self)
)
(defrule
    (goal produce-fire-ships 1)
=>
    (chat-local-to-self "produce-fire-ships")
    (disable-self)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (and (current-age >= feudal-age) (unit-available villager)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-loom)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (up-research-status c: ri-loom < research-pending)
    (research-available ri-loom)
    (not (research-completed ri-loom))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-loom)
    (goal do-research 1)
    (research-available ri-loom)
    (not (research-completed ri-loom))
=>
    (research ri-loom)
)
(defrule
    (not (and (current-age == feudal-age) (unit-available villager)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-wheel-barrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (up-research-status c: ri-wheel-barrow < research-pending)
    (research-available ri-wheel-barrow)
    (not (research-completed ri-wheel-barrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-wheel-barrow)
    (goal do-research 1)
    (research-available ri-wheel-barrow)
    (not (research-completed ri-wheel-barrow))
=>
    (research ri-wheel-barrow)
)
(defrule
    (not (and (current-age == feudal-age) (unit-available villager)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-double-bit-axe)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (up-research-status c: ri-double-bit-axe < research-pending)
    (research-available ri-double-bit-axe)
    (not (research-completed ri-double-bit-axe))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-bit-axe)
    (goal do-research 1)
    (research-available ri-double-bit-axe)
    (not (research-completed ri-double-bit-axe))
=>
    (research ri-double-bit-axe)
)
(defrule
    (not (and (current-age == feudal-age) (unit-available villager)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-horse-collar)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: ri-horse-collar < research-pending)
    (research-available ri-horse-collar)
    (not (research-completed ri-horse-collar))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-horse-collar)
    (goal do-research 1)
    (research-available ri-horse-collar)
    (not (research-completed ri-horse-collar))
=>
    (research ri-horse-collar)
)
(defrule
    (not (and (current-age == feudal-age) (unit-available villager)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-gold-mining)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mining-camp)
    (up-pending-objects c: mining-camp < 5)
    (building-type-count-total mining-camp < 1)
    (building-type-count-total mining-camp == 0)
=>
    (build mining-camp)
)
(defrule
    (up-research-status c: ri-gold-mining < research-pending)
    (research-available ri-gold-mining)
    (not (research-completed ri-gold-mining))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-gold-mining)
    (goal do-research 1)
    (research-available ri-gold-mining)
    (not (research-completed ri-gold-mining))
=>
    (research ri-gold-mining)
)
(defrule
    (not (and (current-age == castle-age) (and (not (current-age == feudal-age)) (unit-available villager))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bow-saw)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed ri-bow-saw)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-double-bit-axe)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (up-research-status c: ri-double-bit-axe < research-pending)
    (research-available ri-double-bit-axe)
    (not (research-completed ri-double-bit-axe))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-bit-axe)
    (goal do-research 1)
    (research-available ri-double-bit-axe)
    (not (research-completed ri-double-bit-axe))
=>
    (research ri-double-bit-axe)
)
(defrule
    (up-research-status c: ri-bow-saw < research-pending)
    (research-available ri-bow-saw)
    (not (research-completed ri-bow-saw))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bow-saw)
    (goal do-research 1)
    (research-available ri-bow-saw)
    (not (research-completed ri-bow-saw))
=>
    (research ri-bow-saw)
)
(defrule
    (not (and (current-age == castle-age) (and (not (current-age == feudal-age)) (unit-available villager))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-heavy-plow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (not (research-completed ri-heavy-plow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-horse-collar)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: ri-horse-collar < research-pending)
    (research-available ri-horse-collar)
    (not (research-completed ri-horse-collar))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-horse-collar)
    (goal do-research 1)
    (research-available ri-horse-collar)
    (not (research-completed ri-horse-collar))
=>
    (research ri-horse-collar)
)
(defrule
    (up-research-status c: ri-heavy-plow < research-pending)
    (research-available ri-heavy-plow)
    (not (research-completed ri-heavy-plow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-plow)
    (goal do-research 1)
    (research-available ri-heavy-plow)
    (not (research-completed ri-heavy-plow))
=>
    (research ri-heavy-plow)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (unit-available villager)))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-hand-cart)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (not (not (research-completed ri-hand-cart)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-wheel-barrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (up-research-status c: ri-wheel-barrow < research-pending)
    (research-available ri-wheel-barrow)
    (not (research-completed ri-wheel-barrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-wheel-barrow)
    (goal do-research 1)
    (research-available ri-wheel-barrow)
    (not (research-completed ri-wheel-barrow))
=>
    (research ri-wheel-barrow)
)
(defrule
    (up-research-status c: ri-hand-cart < research-pending)
    (research-available ri-hand-cart)
    (not (research-completed ri-hand-cart))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-hand-cart)
    (goal do-research 1)
    (research-available ri-hand-cart)
    (not (research-completed ri-hand-cart))
=>
    (research ri-hand-cart)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (unit-available villager)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-two-man-saw)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed ri-two-man-saw)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bow-saw)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (not (not (research-completed ri-bow-saw)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-double-bit-axe)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (up-research-status c: ri-double-bit-axe < research-pending)
    (research-available ri-double-bit-axe)
    (not (research-completed ri-double-bit-axe))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-bit-axe)
    (goal do-research 1)
    (research-available ri-double-bit-axe)
    (not (research-completed ri-double-bit-axe))
=>
    (research ri-double-bit-axe)
)
(defrule
    (up-research-status c: ri-bow-saw < research-pending)
    (research-available ri-bow-saw)
    (not (research-completed ri-bow-saw))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bow-saw)
    (goal do-research 1)
    (research-available ri-bow-saw)
    (not (research-completed ri-bow-saw))
=>
    (research ri-bow-saw)
)
(defrule
    (up-research-status c: ri-two-man-saw < research-pending)
    (research-available ri-two-man-saw)
    (not (research-completed ri-two-man-saw))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-two-man-saw)
    (goal do-research 1)
    (research-available ri-two-man-saw)
    (not (research-completed ri-two-man-saw))
=>
    (research ri-two-man-saw)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (unit-available villager)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-crop-rotation)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (not (research-completed ri-crop-rotation)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-heavy-plow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (not (not (research-completed ri-heavy-plow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-horse-collar)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: ri-horse-collar < research-pending)
    (research-available ri-horse-collar)
    (not (research-completed ri-horse-collar))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-horse-collar)
    (goal do-research 1)
    (research-available ri-horse-collar)
    (not (research-completed ri-horse-collar))
=>
    (research ri-horse-collar)
)
(defrule
    (up-research-status c: ri-heavy-plow < research-pending)
    (research-available ri-heavy-plow)
    (not (research-completed ri-heavy-plow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-plow)
    (goal do-research 1)
    (research-available ri-heavy-plow)
    (not (research-completed ri-heavy-plow))
=>
    (research ri-heavy-plow)
)
(defrule
    (up-research-status c: ri-crop-rotation < research-pending)
    (research-available ri-crop-rotation)
    (not (research-completed ri-crop-rotation))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-crop-rotation)
    (goal do-research 1)
    (research-available ri-crop-rotation)
    (not (research-completed ri-crop-rotation))
=>
    (research ri-crop-rotation)
)
(defrule
    (not (and (current-age >= castle-age) (unit-available villager)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-gold-shaft-mining)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mining-camp)
    (up-pending-objects c: mining-camp < 5)
    (building-type-count-total mining-camp < 1)
    (building-type-count-total mining-camp == 0)
=>
    (build mining-camp)
)
(defrule
    (not (not (research-completed ri-gold-shaft-mining)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-gold-mining)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mining-camp)
    (up-pending-objects c: mining-camp < 5)
    (building-type-count-total mining-camp < 1)
    (building-type-count-total mining-camp == 0)
=>
    (build mining-camp)
)
(defrule
    (up-research-status c: ri-gold-mining < research-pending)
    (research-available ri-gold-mining)
    (not (research-completed ri-gold-mining))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-gold-mining)
    (goal do-research 1)
    (research-available ri-gold-mining)
    (not (research-completed ri-gold-mining))
=>
    (research ri-gold-mining)
)
(defrule
    (up-research-status c: ri-gold-shaft-mining < research-pending)
    (research-available ri-gold-shaft-mining)
    (not (research-completed ri-gold-shaft-mining))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-gold-shaft-mining)
    (goal do-research 1)
    (research-available ri-gold-shaft-mining)
    (not (research-completed ri-gold-shaft-mining))
=>
    (research ri-gold-shaft-mining)
)
(defrule
    (unit-available villager)
=>
    (set-goal desired-villagers-with-subtractions 0)
    (disable-self)
)
(defrule
    (unit-available villager)
=>
    (up-modify-goal desired-villagers-with-subtractions g:= desired-villagers)
)
(defrule
    (goal produce-trade-carts 1)
    (unit-available villager)
=>
    (up-modify-goal desired-villagers-with-subtractions g:- desired-trade-carts)
)
(defrule
    (goal produce-fishing-ships 1)
    (unit-available villager)
=>
    (up-modify-goal desired-villagers-with-subtractions g:- desired-fishing-ships)
)
(defrule
    (can-train villager)
    (up-compare-goal total-villagers g:< desired-villagers-with-subtractions)
    (unit-available villager)
=>
    (train villager)
)
(defrule
    (and (up-compare-goal total-villagers g:> desired-villagers-with-subtractions) (up-compare-goal population-space-remaining c:<= 10))
    (not (up-compare-goal total-villagers g:< desired-villagers-with-subtractions))
    (unit-available villager)
=>
    (delete-unit villager)
)
(defrule
    (not (and (game-time >= 60) (unit-available villager)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-loom)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (and (building-type-count-total town-center == 0) (building-type-count-total town-center-foundation == 0))
=>
    (build town-center)
)
(defrule
    (up-research-status c: ri-loom < research-pending)
    (research-available ri-loom)
    (not (research-completed ri-loom))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-loom)
    (goal do-research 1)
    (research-available ri-loom)
    (not (research-completed ri-loom))
=>
    (research ri-loom)
)
(defrule
    (not (goal produce-trade-carts 1))
=>
    (up-jump-rule 7)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
)
(defrule
    (not (unit-available trade-cart))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-caravan)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
)
(defrule
    (up-research-status c: ri-caravan < research-pending)
    (research-available ri-caravan)
    (not (research-completed ri-caravan))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-caravan)
    (goal do-research 1)
    (research-available ri-caravan)
    (not (research-completed ri-caravan))
=>
    (research ri-caravan)
)
(defrule
    (can-train trade-cart)
    (up-compare-goal total-trade-carts g:< desired-trade-carts)
    (unit-available trade-cart)
=>
    (train trade-cart)
)
(defrule
    (not (goal produce-fishing-ships 1))
=>
    (up-jump-rule 36)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (and (current-age >= castle-age) (unit-available fishing-ship)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-gillnets)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-gillnets < research-pending)
    (research-available ri-gillnets)
    (not (research-completed ri-gillnets))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-gillnets)
    (goal do-research 1)
    (research-available ri-gillnets)
    (not (research-completed ri-gillnets))
=>
    (research ri-gillnets)
)
(defrule
    (not (unit-available fishing-ship))
=>
    (up-jump-rule 28)
)
(defrule
    (not (current-age == castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-careening)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (research ri-careening)
)
(defrule
    (not (and (current-age == imperial-age) (not (current-age == castle-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (not (current-age == castle-age)))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-dry-dock)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (not (research-completed ri-dry-dock)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-careening)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (research ri-careening)
)
(defrule
    (up-research-status c: ri-dry-dock < research-pending)
    (research-available ri-dry-dock)
    (not (research-completed ri-dry-dock))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-dry-dock)
    (goal do-research 1)
    (research-available ri-dry-dock)
    (not (research-completed ri-dry-dock))
=>
    (research ri-dry-dock)
)
(defrule
    (not (and (civilian-population >= extortionate-tech-villagers) (and (current-age == imperial-age) (not (current-age == castle-age)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-shipwright)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-shipwright < research-pending)
    (research-available ri-shipwright)
    (not (research-completed ri-shipwright))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shipwright)
    (goal do-research 1)
    (research-available ri-shipwright)
    (not (research-completed ri-shipwright))
=>
    (research ri-shipwright)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (and (up-compare-goal dock-count g:< desired-military-buildings-per-type) (up-pending-objects c: dock < 1))
=>
    (build dock)
)
(defrule
    (can-train fishing-ship)
    (and (up-compare-goal total-fishing-ships g:< desired-fishing-ships) (wood-amount >= 100))
    (unit-available fishing-ship)
=>
    (train fishing-ship)
)
(defrule
    (true)
=>
    (set-goal old-produce-units 0)
    (set-goal current-unit-amount 0)
    (set-goal expected-units-per-type 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal total-type-production 0)
)
(defrule
    (not (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available archer-line)
=>
    (up-modify-goal total-type-production g:+ produce-archers)
)
(defrule
    (not (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available cavalry-archer-line)
=>
    (up-modify-goal total-type-production g:+ produce-cavalry-archers)
)
(defrule
    (not (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available battering-ram-line)
=>
    (up-modify-goal total-type-production g:+ produce-battering-rams)
)
(defrule
    (not (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available mangonel-line)
=>
    (up-modify-goal total-type-production g:+ produce-mangonels)
)
(defrule
    (not (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available scorpion-line)
=>
    (up-modify-goal total-type-production g:+ produce-scorpions)
)
(defrule
    (not (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available bombard-cannon)
=>
    (up-modify-goal total-type-production g:+ produce-bombard-cannons)
)
(defrule
    (not (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available trebuchet)
=>
    (up-modify-goal total-type-production g:+ produce-trebuchets)
)
(defrule
    (not (and (goal allow-navy 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1))))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available transport-ship)
=>
    (up-modify-goal total-type-production g:+ produce-transport-ships)
)
(defrule
    (not (and (goal allow-navy 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1))))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available galley-line)
=>
    (up-modify-goal total-type-production g:+ produce-galleys)
)
(defrule
    (not (and (goal allow-navy 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1))))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available fire-ship-line)
=>
    (up-modify-goal total-type-production g:+ produce-fire-ships)
)
(defrule
    (not (and (goal allow-navy 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1))))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available cannon-galleon-line)
=>
    (up-modify-goal total-type-production g:+ produce-cannon-galleons)
)
(defrule
    (not (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available hand-cannoneer)
=>
    (up-modify-goal total-type-production g:+ produce-hand-cannoneers)
)
(defrule
    (not (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available militiaman-line)
=>
    (up-modify-goal total-type-production g:+ produce-militia)
)
(defrule
    (not (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available eagle-warrior-line)
=>
    (up-modify-goal total-type-production g:+ produce-eagles)
)
(defrule
    (not (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available knight-line)
=>
    (up-modify-goal total-type-production g:+ produce-knights)
)
(defrule
    (not (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available camel-line)
=>
    (up-modify-goal total-type-production g:+ produce-camels)
)
(defrule
    (not (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available battle-elephant-line)
=>
    (up-modify-goal total-type-production g:+ produce-battle-elephants)
)
(defrule
    (not (goal enough-food-for-units 1))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available scout-cavalry-line)
=>
    (up-modify-goal total-type-production g:+ produce-scouts)
)
(defrule
    (not (and (goal enough-wood-for-units 1) (goal enough-food-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available skirmisher-line)
=>
    (up-modify-goal total-type-production g:+ produce-skirmishers)
)
(defrule
    (not (and (goal enough-wood-for-units 1) (goal enough-food-for-units 1)))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available spearman-line)
=>
    (up-modify-goal total-type-production g:+ produce-spearmen)
)
(defrule
    (not (and (goal enough-wood-for-units 1) (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1))))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available my-unique-unit-line)
=>
    (up-modify-goal total-type-production g:+ produce-unique-units)
)
(defrule
    (not (goal enough-gold-for-units 1))
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available monk)
=>
    (up-modify-goal total-type-production g:+ produce-monks)
)
(defrule
    (true)
=>
    (up-get-fact military-population 0 expected-units-per-type)
    (up-modify-goal expected-units-per-type g:/ total-type-production)
)
(defrule
    (not (or (goal produce-bombard-cannons 1) (goal produce-hand-cannoneers 1)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (goal produce-cannon-galleons 1))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-cannon-galleon)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (not (research-completed ri-cannon-galleon)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (up-research-status c: ri-cannon-galleon < research-pending)
    (research-available ri-cannon-galleon)
    (not (research-completed ri-cannon-galleon))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-cannon-galleon)
    (goal do-research 1)
    (research-available ri-cannon-galleon)
    (not (research-completed ri-cannon-galleon))
=>
    (research ri-cannon-galleon)
)
(defrule
    (and (goal produce-archers 1) (unit-available archer-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count archer-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-archers 1) (unit-available archer-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-archers 1) (unit-available archer-line)))
=>
    (up-jump-rule 112)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (not (and (current-age == castle-age) (unit-available archer-line)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-crossbow)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-crossbow < research-pending)
    (research-available ri-crossbow)
    (not (research-completed ri-crossbow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-crossbow)
    (goal do-research 1)
    (research-available ri-crossbow)
    (not (research-completed ri-crossbow))
=>
    (research ri-crossbow)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == castle-age)) (unit-available archer-line))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-arbalest)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (not (not (research-completed ri-arbalest)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-crossbow)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-crossbow < research-pending)
    (research-available ri-crossbow)
    (not (research-completed ri-crossbow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-crossbow)
    (goal do-research 1)
    (research-available ri-crossbow)
    (not (research-completed ri-crossbow))
=>
    (research ri-crossbow)
)
(defrule
    (up-research-status c: ri-arbalest < research-pending)
    (research-available ri-arbalest)
    (not (research-completed ri-arbalest))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arbalest)
    (goal do-research 1)
    (research-available ri-arbalest)
    (not (research-completed ri-arbalest))
=>
    (research ri-arbalest)
)
(defrule
    (not (and (and (current-age >= castle-age) (civilian-population >= expensive-tech-villagers)) (unit-available archer-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-yeomen)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-yeomen < research-pending)
    (and (research-available ri-yeomen) (building-type-count castle >= 1))
    (not (research-completed ri-yeomen))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-yeomen)
    (goal do-research 1)
    (and (research-available ri-yeomen) (building-type-count castle >= 1))
    (not (research-completed ri-yeomen))
=>
    (research ri-yeomen)
)
(defrule
    (not (unit-available archer-line))
=>
    (up-jump-rule 81)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (research ri-bracer)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-thumb-ring)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
=>
    (research ri-thumb-ring)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (can-train archer-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available archer-line)
=>
    (train archer-line)
)
(defrule
    (and (goal produce-archers 1) (unit-available archer-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-hand-cannoneers 1) (unit-available hand-cannoneer))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count hand-cannoneer current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-hand-cannoneers 1) (unit-available hand-cannoneer))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-hand-cannoneers 1) (unit-available hand-cannoneer)))
=>
    (up-jump-rule 24)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (not (unit-available hand-cannoneer))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (unit-available hand-cannoneer)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (unit-available hand-cannoneer)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
    (unit-available hand-cannoneer)
=>
    (build archery-range)
)
(defrule
    (not (unit-available hand-cannoneer))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (research ri-ring-archer-armor)
)
(defrule
    (can-train hand-cannoneer)
    (and (goal produce-units 1) (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available hand-cannoneer)
=>
    (train hand-cannoneer)
)
(defrule
    (and (goal produce-hand-cannoneers 1) (unit-available hand-cannoneer))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-skirmishers 1) (unit-available skirmisher-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count skirmisher-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-skirmishers 1) (unit-available skirmisher-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-skirmishers 1) (unit-available skirmisher-line)))
=>
    (up-jump-rule 107)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (not (and (current-age == castle-age) (unit-available skirmisher-line)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-elite-skirmisher)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-elite-skirmisher < research-pending)
    (research-available ri-elite-skirmisher)
    (not (research-completed ri-elite-skirmisher))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-skirmisher)
    (goal do-research 1)
    (research-available ri-elite-skirmisher)
    (not (research-completed ri-elite-skirmisher))
=>
    (research ri-elite-skirmisher)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == castle-age)) (unit-available skirmisher-line))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-imperial-skirmisher)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (not (not (research-completed ri-imperial-skirmisher)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-elite-skirmisher)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-elite-skirmisher < research-pending)
    (research-available ri-elite-skirmisher)
    (not (research-completed ri-elite-skirmisher))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-skirmisher)
    (goal do-research 1)
    (research-available ri-elite-skirmisher)
    (not (research-completed ri-elite-skirmisher))
=>
    (research ri-elite-skirmisher)
)
(defrule
    (up-research-status c: ri-imperial-skirmisher < research-pending)
    (research-available ri-imperial-skirmisher)
    (not (research-completed ri-imperial-skirmisher))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-imperial-skirmisher)
    (goal do-research 1)
    (research-available ri-imperial-skirmisher)
    (not (research-completed ri-imperial-skirmisher))
=>
    (research ri-imperial-skirmisher)
)
(defrule
    (not (unit-available skirmisher-line))
=>
    (up-jump-rule 81)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (research ri-bracer)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-thumb-ring)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
=>
    (research ri-thumb-ring)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (can-train skirmisher-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-food-for-units 1)))
    (unit-available skirmisher-line)
=>
    (train skirmisher-line)
)
(defrule
    (and (goal produce-skirmishers 1) (unit-available skirmisher-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-cavalry-archers 1) (unit-available cavalry-archer-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count cavalry-archer-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-cavalry-archers 1) (unit-available cavalry-archer-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-cavalry-archers 1) (unit-available cavalry-archer-line)))
=>
    (up-jump-rule 124)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (not (and (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers)) (unit-available cavalry-archer-line)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-heavy-cavalry-archer)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-heavy-cavalry-archer < research-pending)
    (research-available ri-heavy-cavalry-archer)
    (not (research-completed ri-heavy-cavalry-archer))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-cavalry-archer)
    (goal do-research 1)
    (research-available ri-heavy-cavalry-archer)
    (not (research-completed ri-heavy-cavalry-archer))
=>
    (research ri-heavy-cavalry-archer)
)
(defrule
    (not (and (current-age == imperial-age) (unit-available cavalry-archer-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-recurve-bow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-recurve-bow < research-pending)
    (and (research-available ri-recurve-bow) (building-type-count castle >= 1))
    (not (research-completed ri-recurve-bow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-recurve-bow)
    (goal do-research 1)
    (and (research-available ri-recurve-bow) (building-type-count castle >= 1))
    (not (research-completed ri-recurve-bow))
=>
    (research ri-recurve-bow)
)
(defrule
    (not (unit-available cavalry-archer-line))
=>
    (up-jump-rule 107)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (research ri-bracer)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-thumb-ring)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
=>
    (research ri-thumb-ring)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-parthian-tactics)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-parthian-tactics < research-pending)
    (research-available ri-parthian-tactics)
    (not (research-completed ri-parthian-tactics))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-parthian-tactics)
    (goal do-research 1)
    (research-available ri-parthian-tactics)
    (not (research-completed ri-parthian-tactics))
=>
    (research ri-parthian-tactics)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-sipahi)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-sipahi < research-pending)
    (and (research-available ri-sipahi) (building-type-count castle >= 1))
    (not (research-completed ri-sipahi))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-sipahi)
    (goal do-research 1)
    (and (research-available ri-sipahi) (building-type-count castle >= 1))
    (not (research-completed ri-sipahi))
=>
    (research ri-sipahi)
)
(defrule
    (can-train cavalry-archer-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available cavalry-archer-line)
=>
    (train cavalry-archer-line)
)
(defrule
    (and (goal produce-cavalry-archers 1) (unit-available cavalry-archer-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-militia 1) (unit-available militiaman-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count militiaman-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-militia 1) (unit-available militiaman-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-militia 1) (unit-available militiaman-line)))
=>
    (up-jump-rule 126)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (and (current-age == feudal-age) (unit-available militiaman-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-man-at-arms)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-man-at-arms < research-pending)
    (research-available ri-man-at-arms)
    (not (research-completed ri-man-at-arms))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-man-at-arms)
    (goal do-research 1)
    (research-available ri-man-at-arms)
    (not (research-completed ri-man-at-arms))
=>
    (research ri-man-at-arms)
)
(defrule
    (not (and (current-age == castle-age) (and (not (current-age == feudal-age)) (unit-available militiaman-line))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-long-swordsman)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-long-swordsman)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-man-at-arms)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-man-at-arms < research-pending)
    (research-available ri-man-at-arms)
    (not (research-completed ri-man-at-arms))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-man-at-arms)
    (goal do-research 1)
    (research-available ri-man-at-arms)
    (not (research-completed ri-man-at-arms))
=>
    (research ri-man-at-arms)
)
(defrule
    (up-research-status c: ri-long-swordsman < research-pending)
    (research-available ri-long-swordsman)
    (not (research-completed ri-long-swordsman))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-long-swordsman)
    (goal do-research 1)
    (research-available ri-long-swordsman)
    (not (research-completed ri-long-swordsman))
=>
    (research ri-long-swordsman)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (unit-available militiaman-line)))))
=>
    (up-jump-rule 19)
)
(defrule
    (not (not (research-completed ri-champion)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-champion)))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-two-handed-swordsman)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-two-handed-swordsman)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-long-swordsman)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-long-swordsman)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-man-at-arms)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-man-at-arms < research-pending)
    (research-available ri-man-at-arms)
    (not (research-completed ri-man-at-arms))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-man-at-arms)
    (goal do-research 1)
    (research-available ri-man-at-arms)
    (not (research-completed ri-man-at-arms))
=>
    (research ri-man-at-arms)
)
(defrule
    (up-research-status c: ri-long-swordsman < research-pending)
    (research-available ri-long-swordsman)
    (not (research-completed ri-long-swordsman))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-long-swordsman)
    (goal do-research 1)
    (research-available ri-long-swordsman)
    (not (research-completed ri-long-swordsman))
=>
    (research ri-long-swordsman)
)
(defrule
    (up-research-status c: ri-two-handed-swordsman < research-pending)
    (research-available ri-two-handed-swordsman)
    (not (research-completed ri-two-handed-swordsman))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-two-handed-swordsman)
    (goal do-research 1)
    (research-available ri-two-handed-swordsman)
    (not (research-completed ri-two-handed-swordsman))
=>
    (research ri-two-handed-swordsman)
)
(defrule
    (up-research-status c: ri-champion < research-pending)
    (research-available ri-champion)
    (not (research-completed ri-champion))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-champion)
    (goal do-research 1)
    (research-available ri-champion)
    (not (research-completed ri-champion))
=>
    (research ri-champion)
)
(defrule
    (not (unit-available militiaman-line))
=>
    (up-jump-rule 88)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (research ri-chain-mail)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (research ri-chain-mail)
)
(defrule
    (up-research-status c: ri-plate-mail < research-pending)
    (research-available ri-plate-mail)
    (not (research-completed ri-plate-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (goal do-research 1)
    (research-available ri-plate-mail)
    (not (research-completed ri-plate-mail))
=>
    (research ri-plate-mail)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age))))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-perfusion)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-perfusion < research-pending)
    (and (research-available ri-perfusion) (building-type-count castle >= 1))
    (not (research-completed ri-perfusion))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (goal do-research 1)
    (and (research-available ri-perfusion) (building-type-count castle >= 1))
    (not (research-completed ri-perfusion))
=>
    (research ri-perfusion)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-tracking)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-tracking < research-pending)
    (research-available ri-tracking)
    (not (research-completed ri-tracking))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (goal do-research 1)
    (research-available ri-tracking)
    (not (research-completed ri-tracking))
=>
    (research ri-tracking)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-squires)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-squires < research-pending)
    (research-available ri-squires)
    (not (research-completed ri-squires))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (goal do-research 1)
    (research-available ri-squires)
    (not (research-completed ri-squires))
=>
    (research ri-squires)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-arson)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-arson < research-pending)
    (research-available ri-arson)
    (not (research-completed ri-arson))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (goal do-research 1)
    (research-available ri-arson)
    (not (research-completed ri-arson))
=>
    (research ri-arson)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (current-age >= castle-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-garland-wars)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-garland-wars < research-pending)
    (and (research-available ri-garland-wars) (building-type-count castle >= 1))
    (not (research-completed ri-garland-wars))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (goal do-research 1)
    (and (research-available ri-garland-wars) (building-type-count castle >= 1))
    (not (research-completed ri-garland-wars))
=>
    (research ri-garland-wars)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (research ri-blast-furnace)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
)
(defrule
    (can-train militiaman-line)
    (and (goal produce-units 1) (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available militiaman-line)
=>
    (train militiaman-line)
)
(defrule
    (and (goal produce-militia 1) (unit-available militiaman-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-spearmen 1) (unit-available spearman-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count spearman-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-spearmen 1) (unit-available spearman-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-spearmen 1) (unit-available spearman-line)))
=>
    (up-jump-rule 106)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (and (current-age == castle-age) (unit-available spearman-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-pikeman)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-pikeman < research-pending)
    (research-available ri-pikeman)
    (not (research-completed ri-pikeman))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-pikeman)
    (goal do-research 1)
    (research-available ri-pikeman)
    (not (research-completed ri-pikeman))
=>
    (research ri-pikeman)
)
(defrule
    (not (and (and (current-age == imperial-age) (civilian-population >= expensive-tech-villagers)) (and (not (current-age == castle-age)) (unit-available spearman-line))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-halberdier)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-halberdier)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-pikeman)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-pikeman < research-pending)
    (research-available ri-pikeman)
    (not (research-completed ri-pikeman))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-pikeman)
    (goal do-research 1)
    (research-available ri-pikeman)
    (not (research-completed ri-pikeman))
=>
    (research ri-pikeman)
)
(defrule
    (up-research-status c: ri-halberdier < research-pending)
    (research-available ri-halberdier)
    (not (research-completed ri-halberdier))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-halberdier)
    (goal do-research 1)
    (research-available ri-halberdier)
    (not (research-completed ri-halberdier))
=>
    (research ri-halberdier)
)
(defrule
    (not (unit-available spearman-line))
=>
    (up-jump-rule 88)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (research ri-chain-mail)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (research ri-chain-mail)
)
(defrule
    (up-research-status c: ri-plate-mail < research-pending)
    (research-available ri-plate-mail)
    (not (research-completed ri-plate-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (goal do-research 1)
    (research-available ri-plate-mail)
    (not (research-completed ri-plate-mail))
=>
    (research ri-plate-mail)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age))))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-perfusion)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-perfusion < research-pending)
    (and (research-available ri-perfusion) (building-type-count castle >= 1))
    (not (research-completed ri-perfusion))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (goal do-research 1)
    (and (research-available ri-perfusion) (building-type-count castle >= 1))
    (not (research-completed ri-perfusion))
=>
    (research ri-perfusion)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-tracking)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-tracking < research-pending)
    (research-available ri-tracking)
    (not (research-completed ri-tracking))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (goal do-research 1)
    (research-available ri-tracking)
    (not (research-completed ri-tracking))
=>
    (research ri-tracking)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-squires)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-squires < research-pending)
    (research-available ri-squires)
    (not (research-completed ri-squires))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (goal do-research 1)
    (research-available ri-squires)
    (not (research-completed ri-squires))
=>
    (research ri-squires)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-arson)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-arson < research-pending)
    (research-available ri-arson)
    (not (research-completed ri-arson))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (goal do-research 1)
    (research-available ri-arson)
    (not (research-completed ri-arson))
=>
    (research ri-arson)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (current-age >= castle-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-garland-wars)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-garland-wars < research-pending)
    (and (research-available ri-garland-wars) (building-type-count castle >= 1))
    (not (research-completed ri-garland-wars))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (goal do-research 1)
    (and (research-available ri-garland-wars) (building-type-count castle >= 1))
    (not (research-completed ri-garland-wars))
=>
    (research ri-garland-wars)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (research ri-blast-furnace)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
)
(defrule
    (can-train spearman-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-food-for-units 1)))
    (unit-available spearman-line)
=>
    (train spearman-line)
)
(defrule
    (and (goal produce-spearmen 1) (unit-available spearman-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-eagles 1) (unit-available eagle-warrior-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count eagle-warrior-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-eagles 1) (unit-available eagle-warrior-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-eagles 1) (unit-available eagle-warrior-line)))
=>
    (up-jump-rule 116)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (and (current-age == castle-age) (unit-available eagle-warrior-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-eagle-warrior)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-eagle-warrior < research-pending)
    (research-available ri-eagle-warrior)
    (not (research-completed ri-eagle-warrior))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-eagle-warrior)
    (goal do-research 1)
    (research-available ri-eagle-warrior)
    (not (research-completed ri-eagle-warrior))
=>
    (research ri-eagle-warrior)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == castle-age)) (unit-available eagle-warrior-line))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-elite-eagle-warrior)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (not (not (research-completed ri-elite-eagle-warrior)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-eagle-warrior)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-eagle-warrior < research-pending)
    (research-available ri-eagle-warrior)
    (not (research-completed ri-eagle-warrior))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-eagle-warrior)
    (goal do-research 1)
    (research-available ri-eagle-warrior)
    (not (research-completed ri-eagle-warrior))
=>
    (research ri-eagle-warrior)
)
(defrule
    (up-research-status c: ri-elite-eagle-warrior < research-pending)
    (research-available ri-elite-eagle-warrior)
    (not (research-completed ri-elite-eagle-warrior))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-eagle-warrior)
    (goal do-research 1)
    (research-available ri-elite-eagle-warrior)
    (not (research-completed ri-elite-eagle-warrior))
=>
    (research ri-elite-eagle-warrior)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (and (not (current-age == castle-age)) (unit-available eagle-warrior-line)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-couriers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-couriers < research-pending)
    (and (research-available ri-couriers) (building-type-count castle >= 1))
    (not (research-completed ri-couriers))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-couriers)
    (goal do-research 1)
    (and (research-available ri-couriers) (building-type-count castle >= 1))
    (not (research-completed ri-couriers))
=>
    (research ri-couriers)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (and (not (current-age == castle-age)) (unit-available eagle-warrior-line)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-el-dorado)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-el-dorado < research-pending)
    (and (research-available ri-el-dorado) (building-type-count castle >= 1))
    (not (research-completed ri-el-dorado))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-el-dorado)
    (goal do-research 1)
    (and (research-available ri-el-dorado) (building-type-count castle >= 1))
    (not (research-completed ri-el-dorado))
=>
    (research ri-el-dorado)
)
(defrule
    (not (unit-available eagle-warrior-line))
=>
    (up-jump-rule 88)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (research ri-chain-mail)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (research ri-chain-mail)
)
(defrule
    (up-research-status c: ri-plate-mail < research-pending)
    (research-available ri-plate-mail)
    (not (research-completed ri-plate-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (goal do-research 1)
    (research-available ri-plate-mail)
    (not (research-completed ri-plate-mail))
=>
    (research ri-plate-mail)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age))))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-perfusion)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-perfusion < research-pending)
    (and (research-available ri-perfusion) (building-type-count castle >= 1))
    (not (research-completed ri-perfusion))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (goal do-research 1)
    (and (research-available ri-perfusion) (building-type-count castle >= 1))
    (not (research-completed ri-perfusion))
=>
    (research ri-perfusion)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-tracking)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-tracking < research-pending)
    (research-available ri-tracking)
    (not (research-completed ri-tracking))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (goal do-research 1)
    (research-available ri-tracking)
    (not (research-completed ri-tracking))
=>
    (research ri-tracking)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-squires)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-squires < research-pending)
    (research-available ri-squires)
    (not (research-completed ri-squires))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (goal do-research 1)
    (research-available ri-squires)
    (not (research-completed ri-squires))
=>
    (research ri-squires)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-arson)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-arson < research-pending)
    (research-available ri-arson)
    (not (research-completed ri-arson))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (goal do-research 1)
    (research-available ri-arson)
    (not (research-completed ri-arson))
=>
    (research ri-arson)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (current-age >= castle-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-garland-wars)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-garland-wars < research-pending)
    (and (research-available ri-garland-wars) (building-type-count castle >= 1))
    (not (research-completed ri-garland-wars))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (goal do-research 1)
    (and (research-available ri-garland-wars) (building-type-count castle >= 1))
    (not (research-completed ri-garland-wars))
=>
    (research ri-garland-wars)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (research ri-blast-furnace)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
)
(defrule
    (can-train eagle-warrior-line)
    (and (goal produce-units 1) (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available eagle-warrior-line)
=>
    (train eagle-warrior-line)
)
(defrule
    (and (goal produce-eagles 1) (unit-available eagle-warrior-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-scouts 1) (unit-available scout-cavalry-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count scout-cavalry-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-scouts 1) (unit-available scout-cavalry-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-scouts 1) (unit-available scout-cavalry-line)))
=>
    (up-jump-rule 119)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (not (and (current-age == castle-age) (unit-available scout-cavalry-line)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-light-cavalry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-light-cavalry < research-pending)
    (research-available ri-light-cavalry)
    (not (research-completed ri-light-cavalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-light-cavalry)
    (goal do-research 1)
    (research-available ri-light-cavalry)
    (not (research-completed ri-light-cavalry))
=>
    (research ri-light-cavalry)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == castle-age)) (unit-available scout-cavalry-line))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-hussar)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (not (not (research-completed ri-hussar)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-light-cavalry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-light-cavalry < research-pending)
    (research-available ri-light-cavalry)
    (not (research-completed ri-light-cavalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-light-cavalry)
    (goal do-research 1)
    (research-available ri-light-cavalry)
    (not (research-completed ri-light-cavalry))
=>
    (research ri-light-cavalry)
)
(defrule
    (up-research-status c: ri-hussar < research-pending)
    (research-available ri-hussar)
    (not (research-completed ri-hussar))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-hussar)
    (goal do-research 1)
    (research-available ri-hussar)
    (not (research-completed ri-hussar))
=>
    (research ri-hussar)
)
(defrule
    (not (unit-available scout-cavalry-line))
=>
    (up-jump-rule 93)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (research ri-plate-barding)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chivalry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-chivalry < research-pending)
    (and (research-available ri-chivalry) (building-type-count castle >= 1))
    (not (research-completed ri-chivalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chivalry)
    (goal do-research 1)
    (and (research-available ri-chivalry) (building-type-count castle >= 1))
    (not (research-completed ri-chivalry))
=>
    (research ri-chivalry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-manipur-cavalry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (and (research-available ri-manipur-cavalry) (building-type-count castle >= 1))
    (not (research-completed ri-manipur-cavalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (and (research-available ri-manipur-cavalry) (building-type-count castle >= 1))
    (not (research-completed ri-manipur-cavalry))
=>
    (research ri-manipur-cavalry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-farimba)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-farimba < research-pending)
    (and (research-available ri-farimba) (building-type-count castle >= 1))
    (not (research-completed ri-farimba))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-farimba)
    (goal do-research 1)
    (and (research-available ri-farimba) (building-type-count castle >= 1))
    (not (research-completed ri-farimba))
=>
    (research ri-farimba)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (research ri-blast-furnace)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
)
(defrule
    (can-train scout-cavalry-line)
    (and (goal produce-units 1) (goal enough-food-for-units 1))
    (unit-available scout-cavalry-line)
=>
    (train scout-cavalry-line)
)
(defrule
    (and (goal produce-scouts 1) (unit-available scout-cavalry-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-knights 1) (unit-available knight-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count knight-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-knights 1) (unit-available knight-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-knights 1) (unit-available knight-line)))
=>
    (up-jump-rule 119)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (not (and (civilian-population >= extortionate-tech-villagers) (and (current-age == imperial-age) (unit-available knight-line))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-paladin)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (not (not (research-completed ri-paladin)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-cavalier)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-cavalier < research-pending)
    (research-available ri-cavalier)
    (not (research-completed ri-cavalier))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-cavalier)
    (goal do-research 1)
    (research-available ri-cavalier)
    (not (research-completed ri-cavalier))
=>
    (research ri-cavalier)
)
(defrule
    (up-research-status c: ri-paladin < research-pending)
    (research-available ri-paladin)
    (not (research-completed ri-paladin))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-paladin)
    (goal do-research 1)
    (research-available ri-paladin)
    (not (research-completed ri-paladin))
=>
    (research ri-paladin)
)
(defrule
    (not (and (not (civilian-population >= extortionate-tech-villagers)) (and (current-age == imperial-age) (unit-available knight-line))))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-cavalier)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-cavalier < research-pending)
    (research-available ri-cavalier)
    (not (research-completed ri-cavalier))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-cavalier)
    (goal do-research 1)
    (research-available ri-cavalier)
    (not (research-completed ri-cavalier))
=>
    (research ri-cavalier)
)
(defrule
    (not (unit-available knight-line))
=>
    (up-jump-rule 93)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (research ri-plate-barding)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chivalry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-chivalry < research-pending)
    (and (research-available ri-chivalry) (building-type-count castle >= 1))
    (not (research-completed ri-chivalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chivalry)
    (goal do-research 1)
    (and (research-available ri-chivalry) (building-type-count castle >= 1))
    (not (research-completed ri-chivalry))
=>
    (research ri-chivalry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-manipur-cavalry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (and (research-available ri-manipur-cavalry) (building-type-count castle >= 1))
    (not (research-completed ri-manipur-cavalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (and (research-available ri-manipur-cavalry) (building-type-count castle >= 1))
    (not (research-completed ri-manipur-cavalry))
=>
    (research ri-manipur-cavalry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-farimba)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-farimba < research-pending)
    (and (research-available ri-farimba) (building-type-count castle >= 1))
    (not (research-completed ri-farimba))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-farimba)
    (goal do-research 1)
    (and (research-available ri-farimba) (building-type-count castle >= 1))
    (not (research-completed ri-farimba))
=>
    (research ri-farimba)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (research ri-blast-furnace)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
)
(defrule
    (can-train knight-line)
    (and (goal produce-units 1) (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available knight-line)
=>
    (train knight-line)
)
(defrule
    (and (goal produce-knights 1) (unit-available knight-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-camels 1) (unit-available camel-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count camel-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-camels 1) (unit-available camel-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-camels 1) (unit-available camel-line)))
=>
    (up-jump-rule 119)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (not (and (current-age == imperial-age) (unit-available camel-line)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-heavy-camel)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-heavy-camel < research-pending)
    (research-available ri-heavy-camel)
    (not (research-completed ri-heavy-camel))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-camel)
    (goal do-research 1)
    (research-available ri-heavy-camel)
    (not (research-completed ri-heavy-camel))
=>
    (research ri-heavy-camel)
)
(defrule
    (not (and (current-age == imperial-age) (unit-available camel-line)))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-imperial-camel)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (not (not (research-completed ri-imperial-camel)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-heavy-camel)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-heavy-camel < research-pending)
    (research-available ri-heavy-camel)
    (not (research-completed ri-heavy-camel))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-camel)
    (goal do-research 1)
    (research-available ri-heavy-camel)
    (not (research-completed ri-heavy-camel))
=>
    (research ri-heavy-camel)
)
(defrule
    (up-research-status c: ri-imperial-camel < research-pending)
    (research-available ri-imperial-camel)
    (not (research-completed ri-imperial-camel))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-imperial-camel)
    (goal do-research 1)
    (research-available ri-imperial-camel)
    (not (research-completed ri-imperial-camel))
=>
    (research ri-imperial-camel)
)
(defrule
    (not (unit-available camel-line))
=>
    (up-jump-rule 93)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (research ri-plate-barding)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chivalry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-chivalry < research-pending)
    (and (research-available ri-chivalry) (building-type-count castle >= 1))
    (not (research-completed ri-chivalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chivalry)
    (goal do-research 1)
    (and (research-available ri-chivalry) (building-type-count castle >= 1))
    (not (research-completed ri-chivalry))
=>
    (research ri-chivalry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-manipur-cavalry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (and (research-available ri-manipur-cavalry) (building-type-count castle >= 1))
    (not (research-completed ri-manipur-cavalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (and (research-available ri-manipur-cavalry) (building-type-count castle >= 1))
    (not (research-completed ri-manipur-cavalry))
=>
    (research ri-manipur-cavalry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-farimba)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-farimba < research-pending)
    (and (research-available ri-farimba) (building-type-count castle >= 1))
    (not (research-completed ri-farimba))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-farimba)
    (goal do-research 1)
    (and (research-available ri-farimba) (building-type-count castle >= 1))
    (not (research-completed ri-farimba))
=>
    (research ri-farimba)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (research ri-blast-furnace)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
)
(defrule
    (can-train camel-line)
    (and (goal produce-units 1) (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available camel-line)
=>
    (train camel-line)
)
(defrule
    (and (goal produce-camels 1) (unit-available camel-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-battle-elephants 1) (unit-available battle-elephant-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count battle-elephant-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-battle-elephants 1) (unit-available battle-elephant-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-battle-elephants 1) (unit-available battle-elephant-line)))
=>
    (up-jump-rule 120)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (not (and (current-age >= castle-age) (unit-available battle-elephant-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-howdah)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-howdah < research-pending)
    (and (research-available ri-howdah) (building-type-count castle >= 1))
    (not (research-completed ri-howdah))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-howdah)
    (goal do-research 1)
    (and (research-available ri-howdah) (building-type-count castle >= 1))
    (not (research-completed ri-howdah))
=>
    (research ri-howdah)
)
(defrule
    (not (and (current-age >= castle-age) (unit-available battle-elephant-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-tusk-swords)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-tusk-swords < research-pending)
    (and (research-available ri-tusk-swords) (building-type-count castle >= 1))
    (not (research-completed ri-tusk-swords))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tusk-swords)
    (goal do-research 1)
    (and (research-available ri-tusk-swords) (building-type-count castle >= 1))
    (not (research-completed ri-tusk-swords))
=>
    (research ri-tusk-swords)
)
(defrule
    (not (and (current-age >= castle-age) (unit-available battle-elephant-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chatras)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-chatras < research-pending)
    (and (research-available ri-chatras) (building-type-count castle >= 1))
    (not (research-completed ri-chatras))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chatras)
    (goal do-research 1)
    (and (research-available ri-chatras) (building-type-count castle >= 1))
    (not (research-completed ri-chatras))
=>
    (research ri-chatras)
)
(defrule
    (not (and (current-age == imperial-age) (unit-available battle-elephant-line)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-elite-battle-elephant)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-elite-battle-elephant < research-pending)
    (research-available ri-elite-battle-elephant)
    (not (research-completed ri-elite-battle-elephant))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-battle-elephant)
    (goal do-research 1)
    (research-available ri-elite-battle-elephant)
    (not (research-completed ri-elite-battle-elephant))
=>
    (research ri-elite-battle-elephant)
)
(defrule
    (not (unit-available battle-elephant-line))
=>
    (up-jump-rule 93)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (research ri-plate-barding)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chivalry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-chivalry < research-pending)
    (and (research-available ri-chivalry) (building-type-count castle >= 1))
    (not (research-completed ri-chivalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chivalry)
    (goal do-research 1)
    (and (research-available ri-chivalry) (building-type-count castle >= 1))
    (not (research-completed ri-chivalry))
=>
    (research ri-chivalry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-manipur-cavalry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (and (research-available ri-manipur-cavalry) (building-type-count castle >= 1))
    (not (research-completed ri-manipur-cavalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (and (research-available ri-manipur-cavalry) (building-type-count castle >= 1))
    (not (research-completed ri-manipur-cavalry))
=>
    (research ri-manipur-cavalry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-farimba)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-farimba < research-pending)
    (and (research-available ri-farimba) (building-type-count castle >= 1))
    (not (research-completed ri-farimba))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-farimba)
    (goal do-research 1)
    (and (research-available ri-farimba) (building-type-count castle >= 1))
    (not (research-completed ri-farimba))
=>
    (research ri-farimba)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (research ri-blast-furnace)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
)
(defrule
    (can-train battle-elephant-line)
    (and (goal produce-units 1) (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available battle-elephant-line)
=>
    (train battle-elephant-line)
)
(defrule
    (and (goal produce-battle-elephants 1) (unit-available battle-elephant-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-battering-rams 1) (unit-available battering-ram-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count battering-ram-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-battering-rams 1) (unit-available battering-ram-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-battering-rams 1) (unit-available battering-ram-line)))
=>
    (up-jump-rule 47)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (unit-available battering-ram-line))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-siege-ram)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (not (not (research-completed ri-siege-ram)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-capped-ram)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (up-research-status c: ri-capped-ram < research-pending)
    (research-available ri-capped-ram)
    (not (research-completed ri-capped-ram))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-capped-ram)
    (goal do-research 1)
    (research-available ri-capped-ram)
    (not (research-completed ri-capped-ram))
=>
    (research ri-capped-ram)
)
(defrule
    (up-research-status c: ri-siege-ram < research-pending)
    (research-available ri-siege-ram)
    (not (research-completed ri-siege-ram))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-ram)
    (goal do-research 1)
    (research-available ri-siege-ram)
    (not (research-completed ri-siege-ram))
=>
    (research ri-siege-ram)
)
(defrule
    (not (and (not (civilian-population >= expensive-tech-villagers)) (and (current-age == imperial-age) (unit-available battering-ram-line))))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-capped-ram)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (up-research-status c: ri-capped-ram < research-pending)
    (research-available ri-capped-ram)
    (not (research-completed ri-capped-ram))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-capped-ram)
    (goal do-research 1)
    (research-available ri-capped-ram)
    (not (research-completed ri-capped-ram))
=>
    (research ri-capped-ram)
)
(defrule
    (not (unit-available battering-ram-line))
=>
    (up-jump-rule 21)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (research ri-siege-engineers)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-furor-celtica)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-furor-celtica < research-pending)
    (and (research-available ri-furor-celtica) (building-type-count castle >= 1))
    (not (research-completed ri-furor-celtica))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-furor-celtica)
    (goal do-research 1)
    (and (research-available ri-furor-celtica) (building-type-count castle >= 1))
    (not (research-completed ri-furor-celtica))
=>
    (research ri-furor-celtica)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
)
(defrule
    (can-train battering-ram-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available battering-ram-line)
=>
    (train battering-ram-line)
)
(defrule
    (and (goal produce-battering-rams 1) (unit-available battering-ram-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-mangonels 1) (unit-available mangonel-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count mangonel-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-mangonels 1) (unit-available mangonel-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-mangonels 1) (unit-available mangonel-line)))
=>
    (up-jump-rule 52)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (not (and (civilian-population >= extortionate-tech-villagers) (and (current-age == imperial-age) (unit-available mangonel-line))))
=>
    (up-jump-rule 13)
)
(defrule
    (not (not (research-completed ri-siege-onager)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (not (not (research-completed ri-siege-onager)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-onager)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (up-research-status c: ri-onager < research-pending)
    (research-available ri-onager)
    (not (research-completed ri-onager))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-onager)
    (goal do-research 1)
    (research-available ri-onager)
    (not (research-completed ri-onager))
=>
    (research ri-onager)
)
(defrule
    (up-research-status c: ri-siege-onager < research-pending)
    (research-available ri-siege-onager)
    (not (research-completed ri-siege-onager))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-onager)
    (goal do-research 1)
    (research-available ri-siege-onager)
    (not (research-completed ri-siege-onager))
=>
    (research ri-siege-onager)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (not (civilian-population >= extortionate-tech-villagers)) (and (current-age == imperial-age) (unit-available mangonel-line)))))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-onager)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (up-research-status c: ri-onager < research-pending)
    (research-available ri-onager)
    (not (research-completed ri-onager))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-onager)
    (goal do-research 1)
    (research-available ri-onager)
    (not (research-completed ri-onager))
=>
    (research ri-onager)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (not (civilian-population >= extortionate-tech-villagers)) (and (current-age == imperial-age) (unit-available mangonel-line)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-shinkichon)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-shinkichon < research-pending)
    (and (research-available ri-shinkichon) (building-type-count castle >= 1))
    (not (research-completed ri-shinkichon))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shinkichon)
    (goal do-research 1)
    (and (research-available ri-shinkichon) (building-type-count castle >= 1))
    (not (research-completed ri-shinkichon))
=>
    (research ri-shinkichon)
)
(defrule
    (not (unit-available mangonel-line))
=>
    (up-jump-rule 21)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (research ri-siege-engineers)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-furor-celtica)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-furor-celtica < research-pending)
    (and (research-available ri-furor-celtica) (building-type-count castle >= 1))
    (not (research-completed ri-furor-celtica))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-furor-celtica)
    (goal do-research 1)
    (and (research-available ri-furor-celtica) (building-type-count castle >= 1))
    (not (research-completed ri-furor-celtica))
=>
    (research ri-furor-celtica)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
)
(defrule
    (can-train mangonel-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available mangonel-line)
=>
    (train mangonel-line)
)
(defrule
    (and (goal produce-mangonels 1) (unit-available mangonel-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-scorpions 1) (unit-available scorpion-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count scorpion-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-scorpions 1) (unit-available scorpion-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-scorpions 1) (unit-available scorpion-line)))
=>
    (up-jump-rule 43)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (not (and (civilian-population >= extortionate-tech-villagers) (and (current-age == imperial-age) (unit-available scorpion-line))))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-heavy-scorpion)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (up-research-status c: ri-heavy-scorpion < research-pending)
    (research-available ri-heavy-scorpion)
    (not (research-completed ri-heavy-scorpion))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-scorpion)
    (goal do-research 1)
    (research-available ri-heavy-scorpion)
    (not (research-completed ri-heavy-scorpion))
=>
    (research ri-heavy-scorpion)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (unit-available scorpion-line))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-rocketry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-rocketry < research-pending)
    (and (research-available ri-rocketry) (building-type-count castle >= 1))
    (not (research-completed ri-rocketry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-rocketry)
    (goal do-research 1)
    (and (research-available ri-rocketry) (building-type-count castle >= 1))
    (not (research-completed ri-rocketry))
=>
    (research ri-rocketry)
)
(defrule
    (not (and (current-age == imperial-age) (unit-available scorpion-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-double-crossbow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-double-crossbow < research-pending)
    (and (research-available ri-double-crossbow) (building-type-count castle >= 1))
    (not (research-completed ri-double-crossbow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-crossbow)
    (goal do-research 1)
    (and (research-available ri-double-crossbow) (building-type-count castle >= 1))
    (not (research-completed ri-double-crossbow))
=>
    (research ri-double-crossbow)
)
(defrule
    (not (unit-available scorpion-line))
=>
    (up-jump-rule 21)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (research ri-siege-engineers)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-furor-celtica)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-furor-celtica < research-pending)
    (and (research-available ri-furor-celtica) (building-type-count castle >= 1))
    (not (research-completed ri-furor-celtica))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-furor-celtica)
    (goal do-research 1)
    (and (research-available ri-furor-celtica) (building-type-count castle >= 1))
    (not (research-completed ri-furor-celtica))
=>
    (research ri-furor-celtica)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
)
(defrule
    (can-train scorpion-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available scorpion-line)
=>
    (train scorpion-line)
)
(defrule
    (and (goal produce-scorpions 1) (unit-available scorpion-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-bombard-cannons 1) (unit-available bombard-cannon))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count bombard-cannon current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-bombard-cannons 1) (unit-available bombard-cannon))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-bombard-cannons 1) (unit-available bombard-cannon)))
=>
    (up-jump-rule 26)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (not (unit-available bombard-cannon))
=>
    (up-jump-rule 21)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (research ri-siege-engineers)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-furor-celtica)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-furor-celtica < research-pending)
    (and (research-available ri-furor-celtica) (building-type-count castle >= 1))
    (not (research-completed ri-furor-celtica))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-furor-celtica)
    (goal do-research 1)
    (and (research-available ri-furor-celtica) (building-type-count castle >= 1))
    (not (research-completed ri-furor-celtica))
=>
    (research ri-furor-celtica)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
)
(defrule
    (can-train bombard-cannon)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available bombard-cannon)
=>
    (train bombard-cannon)
)
(defrule
    (and (goal produce-bombard-cannons 1) (unit-available bombard-cannon))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-trebuchets 1) (unit-available trebuchet-set))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count trebuchet-set current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-trebuchets 1) (unit-available trebuchet-set))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-trebuchets 1) (unit-available trebuchet-set)))
=>
    (up-jump-rule 24)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (not (unit-available trebuchet))
=>
    (up-jump-rule 21)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (research ri-siege-engineers)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age == imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-furor-celtica)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-furor-celtica < research-pending)
    (and (research-available ri-furor-celtica) (building-type-count castle >= 1))
    (not (research-completed ri-furor-celtica))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-furor-celtica)
    (goal do-research 1)
    (and (research-available ri-furor-celtica) (building-type-count castle >= 1))
    (not (research-completed ri-furor-celtica))
=>
    (research ri-furor-celtica)
)
(defrule
    (not (building-type-count-total siege-workshop == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
)
(defrule
    (can-train trebuchet)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available trebuchet)
=>
    (train trebuchet)
)
(defrule
    (and (goal produce-trebuchets 1) (unit-available trebuchet-set))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-unique-units 1) (unit-available my-unique-unit-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count my-unique-unit-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-unique-units 1) (unit-available my-unique-unit-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-unique-units 1) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 521)
)
(defrule
    (true)
=>
    (set-goal castle-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total castle castle-count)
)
(defrule
    (not (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
)
(defrule
    (wood-amount >= 400)
    (can-sell-commodity wood)
    (building-type-count-total castle == 0)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
=>
    (sell-commodity wood)
)
(defrule
    (food-amount >= 400)
    (can-sell-commodity food)
    (building-type-count-total castle == 0)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
=>
    (sell-commodity food)
)
(defrule
    (stone-amount < 650)
    (can-buy-commodity stone)
    (building-type-count-total castle == 0)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
=>
    (buy-commodity stone)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
=>
    (build castle)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage < 8)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage < 8)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-gold-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage < 8)
    (and (up-compare-goal castle-count g:< desired-military-buildings-per-type) (current-age >= castle-age))
=>
    (up-modify-sn sn-gold-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (not (and (and (current-age == imperial-age) (and (or (not (civ-selected byzantine)) (civilian-population >= extortionate-tech-villagers)) (civilian-population >= expensive-tech-villagers))) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed my-unique-unit-upgrade)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: my-unique-unit-upgrade < research-pending)
    (and (research-available my-unique-unit-upgrade) (building-type-count castle >= 1))
    (not (research-completed my-unique-unit-upgrade))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research my-unique-unit-upgrade)
    (goal do-research 1)
    (and (research-available my-unique-unit-upgrade) (building-type-count castle >= 1))
    (not (research-completed my-unique-unit-upgrade))
=>
    (research my-unique-unit-upgrade)
)
(defrule
    (unit-available my-unique-unit-line)
=>
    (set-goal old-desired-military-buildings-per-type 0)
    (disable-self)
)
(defrule
    (unit-available my-unique-unit-line)
=>
    (up-modify-goal old-desired-military-buildings-per-type g:= desired-military-buildings-per-type)
    (set-goal desired-military-buildings-per-type 0)
)
(defrule
    (not (and (or (civ-selected aztec) (or (civ-selected celtic) (or (civ-selected ethiopian) (or (civ-selected frankish) (or (civ-selected gothic) (or (civ-selected incan) (or (civ-selected japanese) (or (civ-selected malay) (or (civ-selected malian)
(or (civ-selected teutonic) (civ-selected viking))))))))))) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 88)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (research ri-chain-mail)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-mail)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-mail)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-mail)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not (research-completed ri-scale-mail))
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not (research-completed ri-chain-mail))
=>
    (research ri-chain-mail)
)
(defrule
    (up-research-status c: ri-plate-mail < research-pending)
    (research-available ri-plate-mail)
    (not (research-completed ri-plate-mail))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (goal do-research 1)
    (research-available ri-plate-mail)
    (not (research-completed ri-plate-mail))
=>
    (research ri-plate-mail)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age))))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-perfusion)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-perfusion < research-pending)
    (and (research-available ri-perfusion) (building-type-count castle >= 1))
    (not (research-completed ri-perfusion))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (goal do-research 1)
    (and (research-available ri-perfusion) (building-type-count castle >= 1))
    (not (research-completed ri-perfusion))
=>
    (research ri-perfusion)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-tracking)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-tracking < research-pending)
    (research-available ri-tracking)
    (not (research-completed ri-tracking))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (goal do-research 1)
    (research-available ri-tracking)
    (not (research-completed ri-tracking))
=>
    (research ri-tracking)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-squires)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-squires < research-pending)
    (research-available ri-squires)
    (not (research-completed ri-squires))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (goal do-research 1)
    (research-available ri-squires)
    (not (research-completed ri-squires))
=>
    (research ri-squires)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-arson)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (up-research-status c: ri-arson < research-pending)
    (research-available ri-arson)
    (not (research-completed ri-arson))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (goal do-research 1)
    (research-available ri-arson)
    (not (research-completed ri-arson))
=>
    (research ri-arson)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (current-age >= castle-age)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-garland-wars)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-garland-wars < research-pending)
    (and (research-available ri-garland-wars) (building-type-count castle >= 1))
    (not (research-completed ri-garland-wars))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (goal do-research 1)
    (and (research-available ri-garland-wars) (building-type-count castle >= 1))
    (not (research-completed ri-garland-wars))
=>
    (research ri-garland-wars)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (research ri-blast-furnace)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
)
(defrule
    (not (and (or (civ-selected berbers) (or (civ-selected indian) (or (civ-selected korean) (or (civ-selected mongol) (civ-selected burmese))))) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 107)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (research ri-bracer)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-thumb-ring)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
=>
    (research ri-thumb-ring)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-parthian-tactics)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-parthian-tactics < research-pending)
    (research-available ri-parthian-tactics)
    (not (research-completed ri-parthian-tactics))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-parthian-tactics)
    (goal do-research 1)
    (research-available ri-parthian-tactics)
    (not (research-completed ri-parthian-tactics))
=>
    (research ri-parthian-tactics)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-sipahi)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-sipahi < research-pending)
    (and (research-available ri-sipahi) (building-type-count castle >= 1))
    (not (research-completed ri-sipahi))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-sipahi)
    (goal do-research 1)
    (and (research-available ri-sipahi) (building-type-count castle >= 1))
    (not (research-completed ri-sipahi))
=>
    (research ri-sipahi)
)
(defrule
    (not (and (or (civ-selected briton) (or (civ-selected chinese) (or (civ-selected italian) (or (civ-selected mayan) (civ-selected vietnamese))))) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 81)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (research ri-bracer)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-thumb-ring)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (and (up-research-status c: feudal-age >= research-pending) (building-type-count-total archery-range == 0)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not (research-completed ri-thumb-ring))
=>
    (research ri-thumb-ring)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
)
(defrule
    (not (and (or (civ-selected byzantine) (or (civ-selected hun) (or (civ-selected magyar) (or (civ-selected persian) (or (civ-selected saracen) (civ-selected slavic)))))) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 93)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (research ri-plate-barding)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (research ri-bloodlines)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (research ri-husbandry)
)
(defrule
    (not (current-age >= castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chivalry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-chivalry < research-pending)
    (and (research-available ri-chivalry) (building-type-count castle >= 1))
    (not (research-completed ri-chivalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chivalry)
    (goal do-research 1)
    (and (research-available ri-chivalry) (building-type-count castle >= 1))
    (not (research-completed ri-chivalry))
=>
    (research ri-chivalry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-manipur-cavalry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (and (research-available ri-manipur-cavalry) (building-type-count castle >= 1))
    (not (research-completed ri-manipur-cavalry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (and (research-available ri-manipur-cavalry) (building-type-count castle >= 1))
    (not (research-completed ri-manipur-cavalry))
=>
    (research ri-manipur-cavalry)
)
(defrule
    (not (current-age >= imperial-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-farimba)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-farimba < research-pending)
    (and (research-available ri-farimba) (building-type-count castle >= 1))
    (not (research-completed ri-farimba))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-farimba)
    (goal do-research 1)
    (and (research-available ri-farimba) (building-type-count castle >= 1))
    (not (research-completed ri-farimba))
=>
    (research ri-farimba)
)
(defrule
    (not (current-age == feudal-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (not (and (current-age == castle-age) (not (current-age == feudal-age))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (not (current-age == castle-age)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-blast-furnace)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-iron-casting)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-forging)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not (research-completed ri-forging))
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not (research-completed ri-iron-casting))
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not (research-completed ri-blast-furnace))
=>
    (research ri-blast-furnace)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
)
(defrule
    (not (and (and (civ-selected briton) (and (current-age >= castle-age) (civilian-population >= expensive-tech-villagers))) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-yeomen)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-yeomen < research-pending)
    (and (research-available ri-yeomen) (building-type-count castle >= 1))
    (not (research-completed ri-yeomen))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-yeomen)
    (goal do-research 1)
    (and (research-available ri-yeomen) (building-type-count castle >= 1))
    (not (research-completed ri-yeomen))
=>
    (research ri-yeomen)
)
(defrule
    (not (and (and (or (civ-selected viking) (civ-selected byzantine)) (and (current-age >= imperial-age) (civilian-population >= expensive-tech-villagers))) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-beserkergang)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-beserkergang < research-pending)
    (and (research-available ri-beserkergang) (building-type-count castle >= 1))
    (not (research-completed ri-beserkergang))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-beserkergang)
    (goal do-research 1)
    (and (research-available ri-beserkergang) (building-type-count castle >= 1))
    (not (research-completed ri-beserkergang))
=>
    (research ri-beserkergang)
)
(defrule
    (not (and (and (or (civ-selected viking) (civ-selected byzantine)) (and (current-age >= imperial-age) (civilian-population >= expensive-tech-villagers))) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-logistica)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-logistica < research-pending)
    (and (research-available ri-logistica) (building-type-count castle >= 1))
    (not (research-completed ri-logistica))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-logistica)
    (goal do-research 1)
    (and (research-available ri-logistica) (building-type-count castle >= 1))
    (not (research-completed ri-logistica))
=>
    (research ri-logistica)
)
(defrule
    (not (and (civ-selected persian) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-mahouts)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-mahouts < research-pending)
    (and (research-available ri-mahouts) (building-type-count castle >= 1))
    (not (research-completed ri-mahouts))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-mahouts)
    (goal do-research 1)
    (and (research-available ri-mahouts) (building-type-count castle >= 1))
    (not (research-completed ri-mahouts))
=>
    (research ri-mahouts)
)
(defrule
    (not (and (and (civ-selected chinese) (civilian-population >= expensive-tech-villagers)) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-rocketry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-rocketry < research-pending)
    (and (research-available ri-rocketry) (building-type-count castle >= 1))
    (not (research-completed ri-rocketry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-rocketry)
    (goal do-research 1)
    (and (research-available ri-rocketry) (building-type-count castle >= 1))
    (not (research-completed ri-rocketry))
=>
    (research ri-rocketry)
)
(defrule
    (not (and (and (civ-selected frankish) (civilian-population >= expensive-tech-villagers)) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-bearded-axe)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-bearded-axe < research-pending)
    (and (research-available ri-bearded-axe) (building-type-count castle >= 1))
    (not (research-completed ri-bearded-axe))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bearded-axe)
    (goal do-research 1)
    (and (research-available ri-bearded-axe) (building-type-count castle >= 1))
    (not (research-completed ri-bearded-axe))
=>
    (research ri-bearded-axe)
)
(defrule
    (not (and (and (civ-selected khmer) (current-age == imperial-age)) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-double-crossbow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-double-crossbow < research-pending)
    (and (research-available ri-double-crossbow) (building-type-count castle >= 1))
    (not (research-completed ri-double-crossbow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-crossbow)
    (goal do-research 1)
    (and (research-available ri-double-crossbow) (building-type-count castle >= 1))
    (not (research-completed ri-double-crossbow))
=>
    (research ri-double-crossbow)
)
(defrule
    (not (and (civ-selected magyar) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-mercenaries)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-mercenaries < research-pending)
    (and (research-available ri-mercenaries) (building-type-count castle >= 1))
    (not (research-completed ri-mercenaries))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-mercenaries)
    (goal do-research 1)
    (and (research-available ri-mercenaries) (building-type-count castle >= 1))
    (not (research-completed ri-mercenaries))
=>
    (research ri-mercenaries)
)
(defrule
    (unit-available my-unique-unit-line)
=>
    (up-modify-goal desired-military-buildings-per-type g:= old-desired-military-buildings-per-type)
)
(defrule
    (not (and (civ-selected portuguese) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (research ri-siege-engineers)
)
(defrule
    (not (and (civ-selected khmer) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-siege-engineers)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not (research-completed ri-siege-engineers))
=>
    (research ri-siege-engineers)
)
(defrule
    (not (and (civ-selected khmer) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (research ri-ballistics)
)
(defrule
    (not (and (civ-selected khmer) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (research ri-husbandry)
)
(defrule
    (not (and (civ-selected khmer) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (research ri-bloodlines)
)
(defrule
    (not (and (civ-selected khmer) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-plate-barding)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-chain-barding)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-scale-barding)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not (research-completed ri-scale-barding))
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not (research-completed ri-chain-barding))
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not (research-completed ri-plate-barding))
=>
    (research ri-plate-barding)
)
(defrule
    (not (and (civ-selected spanish) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (research ri-ring-archer-armor)
)
(defrule
    (not (and (civ-selected spanish) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-husbandry)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not (research-completed ri-husbandry))
=>
    (research ri-husbandry)
)
(defrule
    (not (and (civ-selected spanish) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 6)
)
(defrule
    (not (not (research-completed ri-bloodlines)))
=>
    (up-jump-rule 3)
)
(defrule
    (not (building-type-count-total stable == 0))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not (research-completed ri-bloodlines))
=>
    (research ri-bloodlines)
)
(defrule
    (not (and (civ-selected turkish) (unit-available my-unique-unit-line)))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-ring-archer-armor)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-leather-archer-armor)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-padded-archer-armor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not (research-completed ri-padded-archer-armor))
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not (research-completed ri-leather-archer-armor))
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not (research-completed ri-ring-archer-armor))
=>
    (research ri-ring-archer-armor)
)
(defrule
    (can-train my-unique-unit-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (and (goal enough-food-for-units 1) (goal enough-gold-for-units 1))))
    (unit-available my-unique-unit-line)
=>
    (train my-unique-unit-line)
)
(defrule
    (and (goal produce-unique-units 1) (unit-available my-unique-unit-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (and (goal produce-monks 1) (unit-available monk-set))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count monk-set current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-monks 1) (unit-available monk-set))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-monks 1) (unit-available monk-set)))
=>
    (up-jump-rule 45)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-theocracy)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (up-research-status c: ri-theocracy < research-pending)
    (research-available ri-theocracy)
    (not (research-completed ri-theocracy))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-theocracy)
    (goal do-research 1)
    (research-available ri-theocracy)
    (not (research-completed ri-theocracy))
=>
    (research ri-theocracy)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-illumination)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (up-research-status c: ri-illumination < research-pending)
    (research-available ri-illumination)
    (not (research-completed ri-illumination))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-illumination)
    (goal do-research 1)
    (research-available ri-illumination)
    (not (research-completed ri-illumination))
=>
    (research ri-illumination)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-block-printing)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (up-research-status c: ri-block-printing < research-pending)
    (research-available ri-block-printing)
    (not (research-completed ri-block-printing))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-block-printing)
    (goal do-research 1)
    (research-available ri-block-printing)
    (not (research-completed ri-block-printing))
=>
    (research ri-block-printing)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-redemption)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (up-research-status c: ri-redemption < research-pending)
    (research-available ri-redemption)
    (not (research-completed ri-redemption))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-redemption)
    (goal do-research 1)
    (research-available ri-redemption)
    (not (research-completed ri-redemption))
=>
    (research ri-redemption)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-sanctity)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (up-research-status c: ri-sanctity < research-pending)
    (research-available ri-sanctity)
    (not (research-completed ri-sanctity))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-sanctity)
    (goal do-research 1)
    (research-available ri-sanctity)
    (not (research-completed ri-sanctity))
=>
    (research ri-sanctity)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fervor)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (up-research-status c: ri-fervor < research-pending)
    (research-available ri-fervor)
    (not (research-completed ri-fervor))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fervor)
    (goal do-research 1)
    (research-available ri-fervor)
    (not (research-completed ri-fervor))
=>
    (research ri-fervor)
)
(defrule
    (not (and (players-unit-type-count any-enemy monk >= 2) (unit-available monk)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-atonement)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
)
(defrule
    (up-research-status c: ri-atonement < research-pending)
    (research-available ri-atonement)
    (not (research-completed ri-atonement))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-atonement)
    (goal do-research 1)
    (research-available ri-atonement)
    (not (research-completed ri-atonement))
=>
    (research ri-atonement)
)
(defrule
    (not (unit-available monk))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-inquisition)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 1)
    (building-type-count-total castle == 0)
=>
    (build castle)
)
(defrule
    (up-research-status c: ri-inquisition < research-pending)
    (and (research-available ri-inquisition) (building-type-count castle >= 1))
    (not (research-completed ri-inquisition))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-inquisition)
    (goal do-research 1)
    (and (research-available ri-inquisition) (building-type-count castle >= 1))
    (not (research-completed ri-inquisition))
=>
    (research ri-inquisition)
)
(defrule
    (unit-available monk)
=>
    (set-goal monastery-count 0)
    (disable-self)
)
(defrule
    (unit-available monk)
=>
    (up-get-fact building-type-count-total monastery monastery-count)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (up-compare-goal monastery-count g:< desired-military-buildings-per-type)
    (unit-available monk)
=>
    (build monastery)
)
(defrule
    (can-train monk)
    (and (goal produce-units 1) (goal enough-gold-for-units 1))
    (unit-available monk)
=>
    (train monk)
)
(defrule
    (and (goal produce-monks 1) (unit-available monk-set))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not (goal allow-navy 1))
=>
    (up-jump-rule 35)
)
(defrule
    (and (goal produce-transport-ships 1) (unit-available transport-ship))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count transport-ship current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-transport-ships 1) (unit-available transport-ship))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-transport-ships 1) (unit-available transport-ship)))
=>
    (up-jump-rule 31)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (unit-available transport-ship))
=>
    (up-jump-rule 28)
)
(defrule
    (not (current-age == castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-careening)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (research ri-careening)
)
(defrule
    (not (and (current-age == imperial-age) (not (current-age == castle-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (not (current-age == castle-age)))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-dry-dock)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (not (research-completed ri-dry-dock)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-careening)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (research ri-careening)
)
(defrule
    (up-research-status c: ri-dry-dock < research-pending)
    (research-available ri-dry-dock)
    (not (research-completed ri-dry-dock))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-dry-dock)
    (goal do-research 1)
    (research-available ri-dry-dock)
    (not (research-completed ri-dry-dock))
=>
    (research ri-dry-dock)
)
(defrule
    (not (and (civilian-population >= extortionate-tech-villagers) (and (current-age == imperial-age) (not (current-age == castle-age)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-shipwright)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-shipwright < research-pending)
    (research-available ri-shipwright)
    (not (research-completed ri-shipwright))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shipwright)
    (goal do-research 1)
    (research-available ri-shipwright)
    (not (research-completed ri-shipwright))
=>
    (research ri-shipwright)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (and (up-compare-goal dock-count g:< desired-military-buildings-per-type) (up-pending-objects c: dock < 1))
=>
    (build dock)
)
(defrule
    (can-train transport-ship)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available transport-ship)
=>
    (train transport-ship)
)
(defrule
    (and (goal produce-transport-ships 1) (unit-available transport-ship))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not (goal allow-navy 1))
=>
    (up-jump-rule 85)
)
(defrule
    (and (goal produce-galleys 1) (unit-available galley-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count galley-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-galleys 1) (unit-available galley-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-galleys 1) (unit-available galley-line)))
=>
    (up-jump-rule 81)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (and (current-age == feudal-age) (unit-available galley-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (not (and (current-age == castle-age) (and (not (current-age == feudal-age)) (unit-available galley-line))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (not (and (current-age == castle-age) (and (not (current-age == feudal-age)) (unit-available galley-line))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-war-galley)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-war-galley < research-pending)
    (research-available ri-war-galley)
    (not (research-completed ri-war-galley))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-war-galley)
    (goal do-research 1)
    (research-available ri-war-galley)
    (not (research-completed ri-war-galley))
=>
    (research ri-war-galley)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (unit-available galley-line)))))
=>
    (up-jump-rule 14)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bracer)))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (not (not (research-completed ri-bodkin-arrow)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-fletching)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not (research-completed ri-fletching))
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not (research-completed ri-bodkin-arrow))
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not (research-completed ri-bracer))
=>
    (research ri-bracer)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == feudal-age)) (and (not (current-age == castle-age)) (unit-available galley-line)))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-galleon)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (not (research-completed ri-galleon)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-war-galley)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-war-galley < research-pending)
    (research-available ri-war-galley)
    (not (research-completed ri-war-galley))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-war-galley)
    (goal do-research 1)
    (research-available ri-war-galley)
    (not (research-completed ri-war-galley))
=>
    (research ri-war-galley)
)
(defrule
    (up-research-status c: ri-galleon < research-pending)
    (research-available ri-galleon)
    (not (research-completed ri-galleon))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-galleon)
    (goal do-research 1)
    (research-available ri-galleon)
    (not (research-completed ri-galleon))
=>
    (research ri-galleon)
)
(defrule
    (not (and (current-age >= castle-age) (unit-available galley-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-ballistics)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not (research-completed ri-ballistics))
=>
    (research ri-ballistics)
)
(defrule
    (not (unit-available galley-line))
=>
    (up-jump-rule 28)
)
(defrule
    (not (current-age == castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-careening)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (research ri-careening)
)
(defrule
    (not (and (current-age == imperial-age) (not (current-age == castle-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (not (current-age == castle-age)))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-dry-dock)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (not (research-completed ri-dry-dock)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-careening)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (research ri-careening)
)
(defrule
    (up-research-status c: ri-dry-dock < research-pending)
    (research-available ri-dry-dock)
    (not (research-completed ri-dry-dock))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-dry-dock)
    (goal do-research 1)
    (research-available ri-dry-dock)
    (not (research-completed ri-dry-dock))
=>
    (research ri-dry-dock)
)
(defrule
    (not (and (civilian-population >= extortionate-tech-villagers) (and (current-age == imperial-age) (not (current-age == castle-age)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-shipwright)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-shipwright < research-pending)
    (research-available ri-shipwright)
    (not (research-completed ri-shipwright))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shipwright)
    (goal do-research 1)
    (research-available ri-shipwright)
    (not (research-completed ri-shipwright))
=>
    (research ri-shipwright)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (and (up-compare-goal dock-count g:< desired-military-buildings-per-type) (up-pending-objects c: dock < 1))
=>
    (build dock)
)
(defrule
    (can-train galley-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available galley-line)
=>
    (train galley-line)
)
(defrule
    (and (goal produce-galleys 1) (unit-available galley-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not (goal allow-navy 1))
=>
    (up-jump-rule 50)
)
(defrule
    (and (goal produce-fire-ships 1) (unit-available fire-ship-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count fire-ship-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-fire-ships 1) (unit-available fire-ship-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-fire-ships 1) (unit-available fire-ship-line)))
=>
    (up-jump-rule 46)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (and (current-age == castle-age) (unit-available fire-ship-line)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-war-galley)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-war-galley < research-pending)
    (research-available ri-war-galley)
    (not (research-completed ri-war-galley))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-war-galley)
    (goal do-research 1)
    (research-available ri-war-galley)
    (not (research-completed ri-war-galley))
=>
    (research ri-war-galley)
)
(defrule
    (not (and (current-age == imperial-age) (and (not (current-age == castle-age)) (unit-available fire-ship-line))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-fast-fire-ship)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (not (research-completed ri-fast-fire-ship)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-war-galley)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-war-galley < research-pending)
    (research-available ri-war-galley)
    (not (research-completed ri-war-galley))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-war-galley)
    (goal do-research 1)
    (research-available ri-war-galley)
    (not (research-completed ri-war-galley))
=>
    (research ri-war-galley)
)
(defrule
    (up-research-status c: ri-fast-fire-ship < research-pending)
    (research-available ri-fast-fire-ship)
    (not (research-completed ri-fast-fire-ship))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fast-fire-ship)
    (goal do-research 1)
    (research-available ri-fast-fire-ship)
    (not (research-completed ri-fast-fire-ship))
=>
    (research ri-fast-fire-ship)
)
(defrule
    (not (unit-available fire-ship-line))
=>
    (up-jump-rule 28)
)
(defrule
    (not (current-age == castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-careening)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (research ri-careening)
)
(defrule
    (not (and (current-age == imperial-age) (not (current-age == castle-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (not (current-age == castle-age)))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-dry-dock)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (not (research-completed ri-dry-dock)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-careening)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (research ri-careening)
)
(defrule
    (up-research-status c: ri-dry-dock < research-pending)
    (research-available ri-dry-dock)
    (not (research-completed ri-dry-dock))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-dry-dock)
    (goal do-research 1)
    (research-available ri-dry-dock)
    (not (research-completed ri-dry-dock))
=>
    (research ri-dry-dock)
)
(defrule
    (not (and (civilian-population >= extortionate-tech-villagers) (and (current-age == imperial-age) (not (current-age == castle-age)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-shipwright)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-shipwright < research-pending)
    (research-available ri-shipwright)
    (not (research-completed ri-shipwright))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shipwright)
    (goal do-research 1)
    (research-available ri-shipwright)
    (not (research-completed ri-shipwright))
=>
    (research ri-shipwright)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (and (up-compare-goal dock-count g:< desired-military-buildings-per-type) (up-pending-objects c: dock < 1))
=>
    (build dock)
)
(defrule
    (can-train fire-ship-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available fire-ship-line)
=>
    (train fire-ship-line)
)
(defrule
    (and (goal produce-fire-ships 1) (unit-available fire-ship-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not (goal allow-navy 1))
=>
    (up-jump-rule 35)
)
(defrule
    (and (goal produce-cannon-galleons 1) (unit-available cannon-galleon-line))
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count cannon-galleon-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (and (goal produce-cannon-galleons 1) (unit-available cannon-galleon-line))
=>
    (set-goal produce-units 0)
)
(defrule
    (not (and (goal produce-cannon-galleons 1) (unit-available cannon-galleon-line)))
=>
    (up-jump-rule 31)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (unit-available cannon-galleon-line))
=>
    (up-jump-rule 28)
)
(defrule
    (not (current-age == castle-age))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-careening)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (research ri-careening)
)
(defrule
    (not (and (current-age == imperial-age) (not (current-age == castle-age))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-chemistry)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not (research-completed ri-chemistry))
=>
    (research ri-chemistry)
)
(defrule
    (not (and (civilian-population >= expensive-tech-villagers) (and (current-age == imperial-age) (not (current-age == castle-age)))))
=>
    (up-jump-rule 9)
)
(defrule
    (not (not (research-completed ri-dry-dock)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not (not (research-completed ri-dry-dock)))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-careening)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not (research-completed ri-careening))
=>
    (research ri-careening)
)
(defrule
    (up-research-status c: ri-dry-dock < research-pending)
    (research-available ri-dry-dock)
    (not (research-completed ri-dry-dock))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-dry-dock)
    (goal do-research 1)
    (research-available ri-dry-dock)
    (not (research-completed ri-dry-dock))
=>
    (research ri-dry-dock)
)
(defrule
    (not (and (civilian-population >= extortionate-tech-villagers) (and (current-age == imperial-age) (not (current-age == castle-age)))))
=>
    (up-jump-rule 4)
)
(defrule
    (not (not (research-completed ri-shipwright)))
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-shipwright < research-pending)
    (research-available ri-shipwright)
    (not (research-completed ri-shipwright))
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shipwright)
    (goal do-research 1)
    (research-available ri-shipwright)
    (not (research-completed ri-shipwright))
=>
    (research ri-shipwright)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (and (up-compare-goal dock-count g:< desired-military-buildings-per-type) (up-pending-objects c: dock < 1))
=>
    (build dock)
)
(defrule
    (can-train cannon-galleon-line)
    (and (goal produce-units 1) (and (goal enough-wood-for-units 1) (goal enough-gold-for-units 1)))
    (unit-available cannon-galleon-line)
=>
    (train cannon-galleon-line)
)
(defrule
    (and (goal produce-cannon-galleons 1) (unit-available cannon-galleon-line))
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not (current-age >= feudal-age))
=>
    (up-jump-rule 126)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount > 200)
=>
    (build market)
)
(defrule
    (true)
=>
    (set-goal did-tribute 0)
)
(defrule
    (not (goal team-game 1))
=>
    (up-jump-rule 1)
)
(defrule
    (and (up-allied-resource-amount any-ally wood < wood-threshold) (up-compare-goal non-escrowed-wood c:> max-wood))
=>
    (tribute-to-player this-any-ally wood 100)
    (set-goal did-tribute 1)
    (chat-local-to-self "sending wood to ally")
)
(defrule
    (not (goal team-game 1))
=>
    (up-jump-rule 1)
)
(defrule
    (and (up-allied-resource-amount any-ally food < food-threshold) (up-compare-goal non-escrowed-food c:> max-food))
=>
    (tribute-to-player this-any-ally food 100)
    (set-goal did-tribute 1)
    (chat-local-to-self "sending food to ally")
)
(defrule
    (not (goal team-game 1))
=>
    (up-jump-rule 1)
)
(defrule
    (and (up-allied-resource-amount any-ally gold < gold-threshold) (up-compare-goal non-escrowed-gold c:> max-gold))
=>
    (tribute-to-player this-any-ally gold 100)
    (set-goal did-tribute 1)
    (chat-local-to-self "sending gold to ally")
)
(defrule
    (not (goal team-game 1))
=>
    (up-jump-rule 1)
)
(defrule
    (and (up-allied-resource-amount any-ally stone < stone-threshold) (up-compare-goal non-escrowed-stone c:> max-stone))
=>
    (tribute-to-player this-any-ally stone 100)
    (set-goal did-tribute 1)
    (chat-local-to-self "sending stone to ally")
)
(defrule
    (not (goal team-game 1))
=>
    (up-jump-rule 18)
)
(defrule
    (and (up-compare-goal non-escrowed-food c:> food-threshold) (building-type-count market >= 1))
    (taunt-detected any-ally 3)
=>
    (tribute-to-player this-any-ally food 100)
    (set-goal did-tribute 1)
)
(defrule
    (not (and (and (up-compare-goal non-escrowed-food c:> food-threshold) (building-type-count market >= 1)) (taunt-detected any-ally 3)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 292 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 292 0)
=>
    (set-goal 292 1)
)
(defrule
    (random-number == 2)
    (goal 292 0)
=>
    (set-goal 292 2)
)
(defrule
    (random-number == 3)
    (goal 292 0)
=>
    (set-goal 292 3)
)
(defrule
    (goal 292 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 292 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 292 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (not (and (not (and (up-compare-goal non-escrowed-food c:> food-threshold) (building-type-count market >= 1))) (taunt-detected any-ally 3)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 293 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 293 0)
=>
    (set-goal 293 1)
)
(defrule
    (random-number == 2)
    (goal 293 0)
=>
    (set-goal 293 2)
)
(defrule
    (random-number == 3)
    (goal 293 0)
=>
    (set-goal 293 3)
)
(defrule
    (goal 293 1)
=>
    (chat-to-player every-ally "2Sorry, no.")
)
(defrule
    (goal 293 2)
=>
    (chat-to-player every-ally "2Not right now, sorry.")
)
(defrule
    (goal 293 3)
=>
    (chat-to-player every-ally "2Sorry, no can do!")
)
(defrule
    (taunt-detected any-ally 3)
=>
    (acknowledge-taunt this-any-ally 3)
)
(defrule
    (not (goal team-game 1))
=>
    (up-jump-rule 18)
)
(defrule
    (and (up-compare-goal non-escrowed-wood c:> wood-threshold) (building-type-count market >= 1))
    (taunt-detected any-ally 4)
=>
    (tribute-to-player this-any-ally wood 100)
    (set-goal did-tribute 1)
)
(defrule
    (not (and (and (up-compare-goal non-escrowed-wood c:> wood-threshold) (building-type-count market >= 1)) (taunt-detected any-ally 4)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 294 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 294 0)
=>
    (set-goal 294 1)
)
(defrule
    (random-number == 2)
    (goal 294 0)
=>
    (set-goal 294 2)
)
(defrule
    (random-number == 3)
    (goal 294 0)
=>
    (set-goal 294 3)
)
(defrule
    (goal 294 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 294 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 294 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (not (and (not (and (up-compare-goal non-escrowed-wood c:> wood-threshold) (building-type-count market >= 1))) (taunt-detected any-ally 4)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 295 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 295 0)
=>
    (set-goal 295 1)
)
(defrule
    (random-number == 2)
    (goal 295 0)
=>
    (set-goal 295 2)
)
(defrule
    (random-number == 3)
    (goal 295 0)
=>
    (set-goal 295 3)
)
(defrule
    (goal 295 1)
=>
    (chat-to-player every-ally "2Sorry, no.")
)
(defrule
    (goal 295 2)
=>
    (chat-to-player every-ally "2Not right now, sorry.")
)
(defrule
    (goal 295 3)
=>
    (chat-to-player every-ally "2Sorry, no can do!")
)
(defrule
    (taunt-detected any-ally 4)
=>
    (acknowledge-taunt this-any-ally 4)
)
(defrule
    (not (goal team-game 1))
=>
    (up-jump-rule 18)
)
(defrule
    (and (up-compare-goal non-escrowed-gold c:> gold-threshold) (building-type-count market >= 1))
    (taunt-detected any-ally 5)
=>
    (tribute-to-player this-any-ally gold 100)
    (set-goal did-tribute 1)
)
(defrule
    (not (and (and (up-compare-goal non-escrowed-gold c:> gold-threshold) (building-type-count market >= 1)) (taunt-detected any-ally 5)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 296 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 296 0)
=>
    (set-goal 296 1)
)
(defrule
    (random-number == 2)
    (goal 296 0)
=>
    (set-goal 296 2)
)
(defrule
    (random-number == 3)
    (goal 296 0)
=>
    (set-goal 296 3)
)
(defrule
    (goal 296 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 296 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 296 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (not (and (not (and (up-compare-goal non-escrowed-gold c:> gold-threshold) (building-type-count market >= 1))) (taunt-detected any-ally 5)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 297 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 297 0)
=>
    (set-goal 297 1)
)
(defrule
    (random-number == 2)
    (goal 297 0)
=>
    (set-goal 297 2)
)
(defrule
    (random-number == 3)
    (goal 297 0)
=>
    (set-goal 297 3)
)
(defrule
    (goal 297 1)
=>
    (chat-to-player every-ally "2Sorry, no.")
)
(defrule
    (goal 297 2)
=>
    (chat-to-player every-ally "2Not right now, sorry.")
)
(defrule
    (goal 297 3)
=>
    (chat-to-player every-ally "2Sorry, no can do!")
)
(defrule
    (taunt-detected any-ally 5)
=>
    (acknowledge-taunt this-any-ally 5)
)
(defrule
    (not (goal team-game 1))
=>
    (up-jump-rule 18)
)
(defrule
    (and (up-compare-goal non-escrowed-stone c:> stone-threshold) (building-type-count market >= 1))
    (taunt-detected any-ally 6)
=>
    (tribute-to-player this-any-ally stone 100)
    (set-goal did-tribute 1)
)
(defrule
    (not (and (and (up-compare-goal non-escrowed-stone c:> stone-threshold) (building-type-count market >= 1)) (taunt-detected any-ally 6)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 298 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 298 0)
=>
    (set-goal 298 1)
)
(defrule
    (random-number == 2)
    (goal 298 0)
=>
    (set-goal 298 2)
)
(defrule
    (random-number == 3)
    (goal 298 0)
=>
    (set-goal 298 3)
)
(defrule
    (goal 298 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 298 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 298 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (not (and (not (and (up-compare-goal non-escrowed-stone c:> stone-threshold) (building-type-count market >= 1))) (taunt-detected any-ally 6)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 299 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 299 0)
=>
    (set-goal 299 1)
)
(defrule
    (random-number == 2)
    (goal 299 0)
=>
    (set-goal 299 2)
)
(defrule
    (random-number == 3)
    (goal 299 0)
=>
    (set-goal 299 3)
)
(defrule
    (goal 299 1)
=>
    (chat-to-player every-ally "2Sorry, no.")
)
(defrule
    (goal 299 2)
=>
    (chat-to-player every-ally "2Not right now, sorry.")
)
(defrule
    (goal 299 3)
=>
    (chat-to-player every-ally "2Sorry, no can do!")
)
(defrule
    (taunt-detected any-ally 6)
=>
    (acknowledge-taunt this-any-ally 6)
)
(defrule
    (or (goal team-game 0) (goal did-tribute 0))
=>
    (up-get-fact resource-amount wood 300)
    (up-get-fact escrow-amount wood 301)
    (up-modify-goal 300 g:- 301)
    (up-get-fact resource-amount food 302)
    (up-get-fact escrow-amount food 303)
    (up-modify-goal 302 g:- 303)
    (up-get-fact resource-amount gold 304)
    (up-get-fact escrow-amount gold 305)
    (up-modify-goal 304 g:- 305)
)
(defrule
    (up-compare-goal 300 c:> max-gold)
    (can-sell-commodity wood)
    (up-compare-goal 304 c:< max-gold)
    (or (goal team-game 0) (goal did-tribute 0))
=>
    (sell-commodity wood)
)
(defrule
    (up-compare-goal 302 c:> max-gold)
    (can-sell-commodity food)
    (up-compare-goal 304 c:< max-gold)
    (or (goal team-game 0) (goal did-tribute 0))
=>
    (sell-commodity food)
)
(defrule
    (up-compare-goal 300 c:< max-gold)
    (up-compare-goal 304 c:> max-gold)
    (can-buy-commodity wood)
    (or (goal team-game 0) (goal did-tribute 0))
=>
    (buy-commodity wood)
)
(defrule
    (up-compare-goal 302 c:< max-gold)
    (up-compare-goal 304 c:> max-gold)
    (can-buy-commodity food)
    (or (goal team-game 0) (goal did-tribute 0))
=>
    (buy-commodity food)
)
(defrule
    (or (commodity-buying-price wood <= good-wood-price) (and (town-under-attack) (goal attacking 0)))
=>
    (set-goal can-buy-wood 1)
)
(defrule
    (not (or (commodity-buying-price wood <= good-wood-price) (and (town-under-attack) (goal attacking 0))))
=>
    (set-goal can-buy-wood 0)
)
(defrule
    (or (commodity-buying-price food <= good-food-price) (and (town-under-attack) (goal attacking 0)))
=>
    (set-goal can-buy-food 1)
)
(defrule
    (not (or (commodity-buying-price food <= good-food-price) (and (town-under-attack) (goal attacking 0))))
=>
    (set-goal can-buy-food 0)
)
(defrule
    (or (commodity-selling-price wood >= good-wood-sell-price) (and (town-under-attack) (goal attacking 0)))
=>
    (set-goal can-sell-wood 1)
)
(defrule
    (not (or (commodity-selling-price wood >= good-wood-sell-price) (and (town-under-attack) (goal attacking 0))))
=>
    (set-goal can-sell-wood 0)
)
(defrule
    (or (commodity-selling-price food >= good-food-sell-price) (and (town-under-attack) (goal attacking 0)))
=>
    (set-goal can-sell-food 1)
)
(defrule
    (not (or (commodity-selling-price food >= good-food-sell-price) (and (town-under-attack) (goal attacking 0))))
=>
    (set-goal can-sell-food 0)
)
(defrule
    (and (commodity-buying-price wood <= excellent-wood-price) (and (or (up-compare-goal non-escrowed-wood c:< wood-threshold) (up-compare-goal non-escrowed-gold c:> gold-threshold)) (and (up-compare-goal non-escrowed-gold c:> gold-threshold)
(wood-amount < half-max-wood))))
=>
    (chat-local-to-self "buy wood, excellent price.")
)
(defrule
    (can-buy-commodity wood)
    (and (commodity-buying-price wood <= excellent-wood-price) (and (or (up-compare-goal non-escrowed-wood c:< wood-threshold) (up-compare-goal non-escrowed-gold c:> gold-threshold)) (and (up-compare-goal non-escrowed-gold c:> gold-threshold)
(wood-amount < half-max-wood))))
=>
    (buy-commodity wood)
)
(defrule
    (and (commodity-buying-price food <= excellent-food-price) (and (or (up-compare-goal non-escrowed-food c:< food-threshold) (up-compare-goal non-escrowed-gold c:> gold-threshold)) (and (up-compare-goal non-escrowed-gold c:> gold-threshold)
(food-amount < half-max-food))))
=>
    (chat-local-to-self "buy food, excellent price.")
)
(defrule
    (can-buy-commodity food)
    (and (commodity-buying-price food <= excellent-food-price) (and (or (up-compare-goal non-escrowed-food c:< food-threshold) (up-compare-goal non-escrowed-gold c:> gold-threshold)) (and (up-compare-goal non-escrowed-gold c:> gold-threshold)
(food-amount < half-max-food))))
=>
    (buy-commodity food)
)
(defrule
    (and (commodity-selling-price wood >= excellent-wood-sell-price) (and (or (up-compare-goal non-escrowed-wood c:> wood-threshold) (up-compare-goal non-escrowed-gold c:< gold-threshold)) (and (up-compare-goal non-escrowed-wood c:> wood-threshold)
(gold-amount < half-max-gold))))
=>
    (chat-local-to-self "sell wood, excellent price.")
)
(defrule
    (can-sell-commodity wood)
    (and (commodity-selling-price wood >= excellent-wood-sell-price) (and (or (up-compare-goal non-escrowed-wood c:> wood-threshold) (up-compare-goal non-escrowed-gold c:< gold-threshold)) (and (up-compare-goal non-escrowed-wood c:> wood-threshold)
(gold-amount < half-max-gold))))
=>
    (sell-commodity wood)
)
(defrule
    (and (commodity-selling-price food >= excellent-food-sell-price) (and (or (up-compare-goal non-escrowed-food c:> food-threshold) (up-compare-goal non-escrowed-gold c:< gold-threshold)) (and (up-compare-goal non-escrowed-food c:> food-threshold)
(gold-amount < half-max-gold))))
=>
    (chat-local-to-self "sell food, excellent price.")
)
(defrule
    (can-sell-commodity food)
    (and (commodity-selling-price food >= excellent-food-sell-price) (and (or (up-compare-goal non-escrowed-food c:> food-threshold) (up-compare-goal non-escrowed-gold c:< gold-threshold)) (and (up-compare-goal non-escrowed-food c:> food-threshold)
(gold-amount < half-max-gold))))
=>
    (sell-commodity food)
)
(defrule
    (and (up-compare-goal non-escrowed-wood c:< wood-threshold) (goal can-buy-wood 1))
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
=>
    (chat-local-to-self "buy wood, good price.")
)
(defrule
    (can-buy-commodity wood)
    (and (up-compare-goal non-escrowed-wood c:< wood-threshold) (goal can-buy-wood 1))
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
=>
    (buy-commodity wood)
)
(defrule
    (and (up-compare-goal non-escrowed-food c:< food-threshold) (goal can-buy-food 1))
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
=>
    (chat-local-to-self "buy food, good price.")
)
(defrule
    (can-buy-commodity food)
    (and (up-compare-goal non-escrowed-food c:< food-threshold) (goal can-buy-food 1))
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
=>
    (buy-commodity food)
)
(defrule
    (and (up-compare-goal non-escrowed-wood c:> wood-threshold) (goal can-sell-wood 1))
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
=>
    (chat-local-to-self "sell wood, good price.")
)
(defrule
    (can-sell-commodity wood)
    (and (up-compare-goal non-escrowed-wood c:> wood-threshold) (goal can-sell-wood 1))
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
=>
    (sell-commodity wood)
)
(defrule
    (and (up-compare-goal non-escrowed-food c:> food-threshold) (goal can-sell-food 1))
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
=>
    (chat-local-to-self "sell food, good price.")
)
(defrule
    (can-sell-commodity food)
    (and (up-compare-goal non-escrowed-food c:> food-threshold) (goal can-sell-food 1))
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
=>
    (sell-commodity food)
)
(defrule
    (true)
=>
    (enable-timer 7 60)
    (disable-self)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 2)
    (strategic-number sn-food-gatherer-percentage >= 2)
    (strategic-number sn-gold-gatherer-percentage <= 96)
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (timer-triggered 7)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 2)
    (up-modify-sn sn-food-gatherer-percentage c:- 2)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 4)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 2)
    (strategic-number sn-gold-gatherer-percentage >= 2)
    (strategic-number sn-food-gatherer-percentage <= 96)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (not (up-compare-goal non-escrowed-food c:> food-threshold))
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (timer-triggered 7)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 2)
    (up-modify-sn sn-gold-gatherer-percentage c:- 2)
    (up-modify-sn sn-food-gatherer-percentage c:+ 4)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 4)
    (strategic-number sn-food-gatherer-percentage <= 98)
    (strategic-number sn-gold-gatherer-percentage <= 98)
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
    (not (up-compare-goal non-escrowed-food c:> food-threshold))
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (timer-triggered 7)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 4)
    (up-modify-sn sn-food-gatherer-percentage c:+ 2)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 2)
    (strategic-number sn-gold-gatherer-percentage >= 2)
    (strategic-number sn-wood-gatherer-percentage <= 96)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (not (up-compare-goal non-escrowed-wood c:> wood-threshold))
    (timer-triggered 7)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 2)
    (up-modify-sn sn-gold-gatherer-percentage c:- 2)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 4)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 4)
    (strategic-number sn-wood-gatherer-percentage <= 98)
    (strategic-number sn-gold-gatherer-percentage <= 98)
    (not (up-compare-goal non-escrowed-gold c:> gold-threshold))
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (not (up-compare-goal non-escrowed-wood c:> wood-threshold))
    (timer-triggered 7)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 4)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 2)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-gold-gatherer-percentage >= 4)
    (strategic-number sn-wood-gatherer-percentage <= 98)
    (strategic-number sn-food-gatherer-percentage <= 98)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (not (up-compare-goal non-escrowed-food c:> food-threshold))
    (not (up-compare-goal non-escrowed-wood c:> wood-threshold))
    (timer-triggered 7)
=>
    (up-modify-sn sn-gold-gatherer-percentage c:- 4)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 2)
    (up-modify-sn sn-food-gatherer-percentage c:+ 2)
)
(defrule
    (timer-triggered 7)
=>
    (disable-timer 7)
    (enable-timer 7 60)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 1)
    (strategic-number sn-gold-gatherer-percentage >= 1)
    (strategic-number sn-wood-gatherer-percentage <= 98)
    (strategic-number sn-wood-gatherer-percentage < minimum-wood-gatherer-percentage)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 1)
    (up-modify-sn sn-gold-gatherer-percentage c:- 1)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 1)
    (strategic-number sn-gold-gatherer-percentage >= 1)
    (strategic-number sn-food-gatherer-percentage <= 98)
    (strategic-number sn-food-gatherer-percentage < minimum-food-gatherer-percentage)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 1)
    (up-modify-sn sn-gold-gatherer-percentage c:- 1)
    (up-modify-sn sn-food-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 1)
    (strategic-number sn-food-gatherer-percentage >= 1)
    (strategic-number sn-gold-gatherer-percentage <= 98)
    (strategic-number sn-gold-gatherer-percentage < minimum-gold-gatherer-percentage)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 1)
    (up-modify-sn sn-food-gatherer-percentage c:- 1)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 2)
)
(defrule
    (not (taunt-detected any-ally 42))
=>
    (up-jump-rule 7)
)
(defrule
    (up-research-status c: feudal-age < research-pending)
=>
    (chat-to-player every-ally "Dark age.")
)
(defrule
    (up-research-status c: feudal-age == research-pending)
    (not (up-research-status c: feudal-age < research-pending))
=>
    (chat-to-player every-ally "On my way to feudal.")
)
(defrule
    (up-research-status c: castle-age < research-pending)
    (not (up-research-status c: feudal-age < research-pending))
    (not (up-research-status c: feudal-age == research-pending))
=>
    (chat-to-player every-ally "Feudal age.")
)
(defrule
    (up-research-status c: castle-age == research-pending)
    (not (up-research-status c: feudal-age == research-pending))
    (not (up-research-status c: feudal-age < research-pending))
    (not (up-research-status c: castle-age < research-pending))
=>
    (chat-to-player every-ally "On my way to castle.")
)
(defrule
    (up-research-status c: imperial-age < research-pending)
    (not (up-research-status c: castle-age < research-pending))
    (not (up-research-status c: feudal-age < research-pending))
    (not (up-research-status c: feudal-age == research-pending))
    (not (up-research-status c: castle-age == research-pending))
=>
    (chat-to-player every-ally "Castle age.")
)
(defrule
    (up-research-status c: imperial-age == research-pending)
    (not (up-research-status c: castle-age == research-pending))
    (not (up-research-status c: feudal-age == research-pending))
    (not (up-research-status c: feudal-age < research-pending))
    (not (up-research-status c: castle-age < research-pending))
    (not (up-research-status c: imperial-age < research-pending))
=>
    (chat-to-player every-ally "On my way to imperial.")
)
(defrule
    (not (up-research-status c: imperial-age < research-pending))
    (not (up-research-status c: castle-age < research-pending))
    (not (up-research-status c: feudal-age < research-pending))
    (not (up-research-status c: feudal-age == research-pending))
    (not (up-research-status c: castle-age == research-pending))
    (not (up-research-status c: imperial-age == research-pending))
=>
    (chat-to-player every-ally "Imperial age.")
)
(defrule
    (taunt-detected any-ally 42)
=>
    (acknowledge-taunt this-any-ally 42)
)
(defrule
    (not (and (goal water-map 0) (taunt-detected any-enemy 34)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 310 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 310 0)
=>
    (set-goal 310 1)
)
(defrule
    (random-number == 2)
    (goal 310 0)
=>
    (set-goal 310 2)
)
(defrule
    (random-number == 3)
    (goal 310 0)
=>
    (set-goal 310 3)
)
(defrule
    (goal 310 1)
=>
    (chat-to-all "2Absolutely not.")
)
(defrule
    (goal 310 2)
=>
    (chat-to-all "2Are you out of your mind?")
)
(defrule
    (goal 310 3)
=>
    (chat-to-all "2As if!")
)
(defrule
    (taunt-detected any-enemy 34)
=>
    (acknowledge-taunt this-any-enemy 34)
)
(defrule
    (not (and (goal full-water-map 1) (taunt-detected any-enemy 35)))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 311 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 311 0)
=>
    (set-goal 311 1)
)
(defrule
    (random-number == 2)
    (goal 311 0)
=>
    (set-goal 311 2)
)
(defrule
    (random-number == 3)
    (goal 311 0)
=>
    (set-goal 311 3)
)
(defrule
    (goal 311 1)
=>
    (chat-to-all "2Absolutely not.")
)
(defrule
    (goal 311 2)
=>
    (chat-to-all "2Are you out of your mind?")
)
(defrule
    (goal 311 3)
=>
    (chat-to-all "2As if!")
)
(defrule
    (taunt-detected any-enemy 35)
=>
    (acknowledge-taunt this-any-enemy 35)
)
(defrule
    (not (taunt-detected any-enemy 38))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 312 0)
    (generate-random-number 3)
)
(defrule
    (random-number == 1)
    (goal 312 0)
=>
    (set-goal 312 1)
)
(defrule
    (random-number == 2)
    (goal 312 0)
=>
    (set-goal 312 2)
)
(defrule
    (random-number == 3)
    (goal 312 0)
=>
    (set-goal 312 3)
)
(defrule
    (goal 312 1)
=>
    (chat-to-all "2Absolutely not.")
)
(defrule
    (goal 312 2)
=>
    (chat-to-all "2Are you out of your mind?")
)
(defrule
    (goal 312 3)
=>
    (chat-to-all "2As if!")
)
(defrule
    (taunt-detected any-enemy 38)
=>
    (acknowledge-taunt this-any-enemy 38)
)
(defrule
    (not (game-time < 5))
=>
    (up-jump-rule 25)
)
(defrule
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (set-goal 313 0)
    (generate-random-number 4)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 313 0)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (set-goal 313 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 313 0)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (set-goal 313 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 313 0)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (set-goal 313 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 313 0)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (set-goal 313 4)
    (disable-self)
)
(defrule
    (goal 313 1)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (chat-to-all "Good luck and have fun everyone!")
    (disable-self)
)
(defrule
    (goal free-for-all 1)
    (goal 313 2)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (chat-to-all "May the best ruler win!")
    (disable-self)
)
(defrule
    (not (goal free-for-all 1))
    (goal 313 2)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (chat-to-all "May the best team win!")
    (disable-self)
)
(defrule
    (goal 313 3)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (chat-to-all "GL everyone!!!")
    (disable-self)
)
(defrule
    (goal 313 4)
    (or (goal free-for-all 1) (goal team-game 1))
=>
    (chat-to-all "Let's do this!")
    (disable-self)
)
(defrule
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 314 0)
    (generate-random-number 7)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 314 0)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 314 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 314 0)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 314 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 314 0)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 314 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 314 0)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 314 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 314 0)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 314 5)
    (disable-self)
)
(defrule
    (random-number == 6)
    (goal 314 0)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 314 6)
    (disable-self)
)
(defrule
    (random-number == 7)
    (goal 314 0)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (set-goal 314 7)
    (disable-self)
)
(defrule
    (goal 314 1)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (chat-to-all "Hi! Go easy on me, okay?")
    (disable-self)
)
(defrule
    (goal 314 2)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (chat-to-all "Looking forward to this. Let's go.")
    (disable-self)
)
(defrule
    (goal 314 3)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (chat-to-all "Good luck, have fun!")
    (disable-self)
)
(defrule
    (goal 314 4)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (chat-to-all "GL!")
    (disable-self)
)
(defrule
    (goal 314 5)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (chat-to-all "HF!")
    (disable-self)
)
(defrule
    (goal 314 6)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (chat-to-all "Good luck!")
    (disable-self)
)
(defrule
    (goal 314 7)
    (not (or (goal free-for-all 1) (goal team-game 1)))
=>
    (chat-to-all "Have fun!")
    (disable-self)
)
(defrule
    (goal locked-teams 1)
=>
    (enable-timer 8 1800)
    (disable-self)
)
(defrule
    (not (and (goal free-for-all 1) (and (up-compare-goal score-percentage c:<= 70) (and (timer-triggered 8) (goal locked-teams 1)))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 315 0)
    (generate-random-number 3)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 315 0)
=>
    (set-goal 315 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 315 0)
=>
    (set-goal 315 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 315 0)
=>
    (set-goal 315 3)
    (disable-self)
)
(defrule
    (goal 315 1)
=>
    (chat-to-all "I'm having some trouble with this one.")
    (disable-self)
)
(defrule
    (goal 315 2)
=>
    (chat-to-all "This is a tough game.")
    (disable-self)
)
(defrule
    (goal 315 3)
=>
    (chat-to-all "I don't like my chances here.")
    (disable-self)
)
(defrule
    (not (and (goal team-game 1) (and (not (goal free-for-all 1)) (and (up-compare-goal score-percentage c:<= 70) (and (timer-triggered 8) (goal locked-teams 1))))))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 316 0)
    (generate-random-number 3)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 316 0)
=>
    (set-goal 316 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 316 0)
=>
    (set-goal 316 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 316 0)
=>
    (set-goal 316 3)
    (disable-self)
)
(defrule
    (goal 316 1)
=>
    (chat-to-all "We may need a different strategy...")
    (disable-self)
)
(defrule
    (goal 316 2)
=>
    (chat-to-all "I'm crumbling... Hopefully we still have a shot?")
    (disable-self)
)
(defrule
    (goal 316 3)
=>
    (chat-to-all "This is hard.")
    (disable-self)
)
(defrule
    (not (and (not (goal free-for-all 1)) (and (not (goal team-game 1)) (and (up-compare-goal score-percentage c:<= 70) (and (timer-triggered 8) (goal locked-teams 1))))))
=>
    (up-jump-rule 11)
)
(defrule
    (true)
=>
    (set-goal 317 0)
    (generate-random-number 5)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 317 0)
=>
    (set-goal 317 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 317 0)
=>
    (set-goal 317 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 317 0)
=>
    (set-goal 317 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 317 0)
=>
    (set-goal 317 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 317 0)
=>
    (set-goal 317 5)
    (disable-self)
)
(defrule
    (goal 317 1)
=>
    (chat-to-all "I feel vastly outpaced, you're playing a good game.")
    (disable-self)
)
(defrule
    (goal 317 2)
=>
    (chat-to-all "I'm not doing very well...")
    (disable-self)
)
(defrule
    (goal 317 3)
=>
    (chat-to-all "This could have gone better, oh well.")
    (disable-self)
)
(defrule
    (goal 317 4)
=>
    (chat-to-all "You're playing quite well.")
    (disable-self)
)
(defrule
    (goal 317 5)
=>
    (chat-to-all "I'm not sure I can best you.")
    (disable-self)
)
(defrule
    (not (and (goal free-for-all 1) (and (up-compare-goal score-percentage c:>= 140) (and (not (up-compare-goal score-percentage c:<= 70)) (and (timer-triggered 8) (goal locked-teams 1))))))
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (set-goal 318 0)
    (generate-random-number 2)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 318 0)
=>
    (set-goal 318 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 318 0)
=>
    (set-goal 318 2)
    (disable-self)
)
(defrule
    (goal 318 1)
=>
    (chat-to-all "I'm pretty sure I've got this game.")
    (disable-self)
)
(defrule
    (goal 318 2)
=>
    (chat-to-all "It was tough, but I got there in the end.")
    (disable-self)
)
(defrule
    (not (and (goal team-game 1) (and (not (goal free-for-all 1)) (and (up-compare-goal score-percentage c:>= 140) (and (not (up-compare-goal score-percentage c:<= 70)) (and (timer-triggered 8) (goal locked-teams 1)))))))
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (chat-to-all "Looks like we're close to getting this squared off.")
    (disable-self)
)
(defrule
    (not (and (not (goal free-for-all 1)) (and (not (goal team-game 1)) (and (up-compare-goal score-percentage c:>= 140) (and (not (up-compare-goal score-percentage c:<= 70)) (and (timer-triggered 8) (goal locked-teams 1)))))))
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (chat-to-all "I'm winning this one. You played well though!")
    (disable-self)
)
(defrule
    (not (and (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0)) (and (military-population >= 20) (and (timer-triggered 8) (goal locked-teams 1)))))
=>
    (up-jump-rule 14)
)
(defrule
    (true)
=>
    (set-goal 319 0)
    (generate-random-number 6)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 319 0)
=>
    (set-goal 319 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 319 0)
=>
    (set-goal 319 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 319 0)
=>
    (set-goal 319 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 319 0)
=>
    (set-goal 319 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 319 0)
=>
    (set-goal 319 5)
    (disable-self)
)
(defrule
    (random-number == 6)
    (goal 319 0)
=>
    (set-goal 319 6)
    (disable-self)
)
(defrule
    (goal 319 1)
=>
    (chat-to-all "I don't like this...")
    (disable-self)
)
(defrule
    (goal 319 2)
=>
    (chat-to-all "Dicey.")
    (disable-self)
)
(defrule
    (goal 319 3)
=>
    (chat-to-all "I'd better step on the pedal a bit, sheesh.")
    (disable-self)
)
(defrule
    (goal 319 4)
=>
    (chat-to-all "...please don't hurt me!")
    (disable-self)
)
(defrule
    (or (goal team-game 1) (goal free-for-all 1))
    (goal 319 5)
=>
    (chat-to-all "It's looking scary out there...")
    (disable-self)
)
(defrule
    (not (or (goal team-game 1) (goal free-for-all 1)))
    (goal 319 5)
=>
    (chat-to-all "You're looking scary...")
    (disable-self)
)
(defrule
    (goal 319 6)
=>
    (chat-to-all "That's a lot of stuff.")
    (disable-self)
)
(defrule
    (not (and (goal attacking 1) (and (up-compare-goal largest-enemy-military-percentage c:>= 170) (and (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))) (and (military-population >= 20) (and (timer-triggered 8)
(goal locked-teams 1)))))))
=>
    (up-jump-rule 20)
)
(defrule
    (true)
=>
    (set-goal 320 0)
    (generate-random-number 8)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 320 0)
=>
    (set-goal 320 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 320 0)
=>
    (set-goal 320 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 320 0)
=>
    (set-goal 320 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 320 0)
=>
    (set-goal 320 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 320 0)
=>
    (set-goal 320 5)
    (disable-self)
)
(defrule
    (random-number == 6)
    (goal 320 0)
=>
    (set-goal 320 6)
    (disable-self)
)
(defrule
    (random-number == 7)
    (goal 320 0)
=>
    (set-goal 320 7)
    (disable-self)
)
(defrule
    (random-number == 8)
    (goal 320 0)
=>
    (set-goal 320 8)
    (disable-self)
)
(defrule
    (or (goal team-game 1) (goal free-for-all 1))
    (goal 320 1)
=>
    (chat-to-all "Let's crush 'em!")
    (disable-self)
)
(defrule
    (not (or (goal team-game 1) (goal free-for-all 1)))
    (goal 320 1)
=>
    (chat-to-all "It's time for some violence!")
    (disable-self)
)
(defrule
    (goal 320 2)
=>
    (chat-to-all "Oh yeah, this is good.")
    (disable-self)
)
(defrule
    (or (goal team-game 1) (goal free-for-all 1))
    (goal 320 3)
=>
    (chat-to-all "You lot aren't prepared for this.")
    (disable-self)
)
(defrule
    (not (or (goal team-game 1) (goal free-for-all 1)))
    (goal 320 3)
=>
    (chat-to-all "You aren't prepared for this.")
    (disable-self)
)
(defrule
    (goal 320 4)
=>
    (chat-to-all "[cracks knuckles]")
    (disable-self)
)
(defrule
    (goal 320 5)
=>
    (chat-to-all "I'm pumped! Let's go!!!")
    (disable-self)
)
(defrule
    (goal 320 6)
=>
    (chat-to-all "Allow me to show you some numbers.")
    (disable-self)
)
(defrule
    (goal team-game 1)
    (goal 320 7)
=>
    (chat-to-all "We're bringing the pain.")
    (disable-self)
)
(defrule
    (not (goal team-game 1))
    (goal 320 7)
=>
    (chat-to-all "I'm bringing the pain.")
    (disable-self)
)
(defrule
    (goal 320 8)
=>
    (chat-to-all "It'll all be over soon.")
    (disable-self)
)
(defrule
    (not (and (not (goal attacking 1)) (and (up-compare-goal largest-enemy-military-percentage c:>= 170) (and (not (and (up-compare-goal largest-enemy-military-percentage c:<= 50) (goal attacking 0))) (and (military-population >= 20) (and
(timer-triggered 8) (goal locked-teams 1)))))))
=>
    (up-jump-rule 12)
)
(defrule
    (true)
=>
    (set-goal 321 0)
    (generate-random-number 5)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 321 0)
=>
    (set-goal 321 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 321 0)
=>
    (set-goal 321 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 321 0)
=>
    (set-goal 321 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 321 0)
=>
    (set-goal 321 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 321 0)
=>
    (set-goal 321 5)
    (disable-self)
)
(defrule
    (or (goal team-game 1) (goal free-for-all 1))
    (goal 321 1)
=>
    (chat-to-all "Come at me.")
    (disable-self)
)
(defrule
    (not (or (goal team-game 1) (goal free-for-all 1)))
    (goal 321 1)
=>
    (chat-to-all "I'm ready for what you've got.")
    (disable-self)
)
(defrule
    (goal 321 2)
=>
    (chat-to-all "Feeling confident.")
    (disable-self)
)
(defrule
    (goal 321 3)
=>
    (chat-to-all "Feeling good.")
    (disable-self)
)
(defrule
    (goal 321 4)
=>
    (chat-to-all "I am prepared.")
    (disable-self)
)
(defrule
    (goal 321 5)
=>
    (chat-to-all "Are you ready?")
    (disable-self)
)
(defrule
    (not (goal resign 1))
=>
    (up-jump-rule 9)
)
(defrule
    (true)
=>
    (set-goal 322 0)
    (generate-random-number 4)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 322 0)
=>
    (set-goal 322 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 322 0)
=>
    (set-goal 322 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 322 0)
=>
    (set-goal 322 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 322 0)
=>
    (set-goal 322 4)
    (disable-self)
)
(defrule
    (goal 322 1)
=>
    (chat-to-all "My heart's not really in this anymore, sorry.")
    (disable-self)
)
(defrule
    (goal 322 2)
=>
    (chat-to-all "It was a good game, I think I'm out though.")
    (disable-self)
)
(defrule
    (goal 322 3)
=>
    (chat-to-all "Good game, well played.")
    (disable-self)
)
(defrule
    (goal 322 4)
=>
    (chat-to-all "I'm done.")
    (disable-self)
)
(defrule
    (not (up-research-status c: castle-age == research-pending))
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 323 0)
    (generate-random-number 3)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 323 0)
=>
    (set-goal 323 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 323 0)
=>
    (set-goal 323 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 323 0)
=>
    (set-goal 323 3)
    (disable-self)
)
(defrule
    (goal 323 1)
=>
    (chat-to-allies "On my way up.")
    (disable-self)
)
(defrule
    (goal 323 2)
=>
    (chat-to-allies "I've clicked up.")
    (disable-self)
)
(defrule
    (goal 323 3)
=>
    (chat-to-allies "Going castle.")
    (disable-self)
)
(defrule
    (not (and (goal attacking 0) (and (goal threat-source watch-tower) (and (current-age == feudal-age) (enemy-buildings-in-town)))))
=>
    (up-jump-rule 12)
)
(defrule
    (true)
=>
    (set-goal 324 0)
    (generate-random-number 5)
    (disable-self)
)
(defrule
    (random-number == 1)
    (goal 324 0)
=>
    (set-goal 324 1)
    (disable-self)
)
(defrule
    (random-number == 2)
    (goal 324 0)
=>
    (set-goal 324 2)
    (disable-self)
)
(defrule
    (random-number == 3)
    (goal 324 0)
=>
    (set-goal 324 3)
    (disable-self)
)
(defrule
    (random-number == 4)
    (goal 324 0)
=>
    (set-goal 324 4)
    (disable-self)
)
(defrule
    (random-number == 5)
    (goal 324 0)
=>
    (set-goal 324 5)
    (disable-self)
)
(defrule
    (goal 324 1)
=>
    (chat-to-all "Why must you do this?")
    (disable-self)
)
(defrule
    (goal team-game 1)
    (goal 324 2)
=>
    (chat-to-all "Your teammate is a real piece of work.")
    (disable-self)
)
(defrule
    (not (goal team-game 1))
    (goal 324 2)
=>
    (chat-to-all "I don't think I like you very much...")
    (disable-self)
)
(defrule
    (goal 324 3)
=>
    (chat-to-all "[sigh]")
    (disable-self)
)
(defrule
    (goal 324 4)
=>
    (chat-to-all "Why can't we just have fun?")
    (disable-self)
)
(defrule
    (goal 324 5)
=>
    (chat-to-all "You know I can't deal with this. It's unfair.")
    (disable-self)
)