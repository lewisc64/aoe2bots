;Translated by https://github.com/lewisc64/aoe2ai
(defconst max-wood 1600)
(defconst max-food 1600)
(defconst max-gold 1600)
(defconst max-stone 1600)
(defconst half-max-wood 800)
(defconst half-max-food 800)
(defconst half-max-gold 800)
(defconst minimum-wood-gatherer-percentage 30)
(defconst minimum-food-gatherer-percentage 30)
(defconst minimum-gold-gatherer-percentage 10)
(defconst wood-threshold 300)
(defconst food-threshold 300)
(defconst gold-threshold 300)
(defconst stone-threshold 300)
(defconst good-wood-price 75)
(defconst good-food-price 75)
(defconst good-wood-sell-price 150)
(defconst good-food-sell-price 150)
(defconst excellent-wood-price 50)
(defconst excellent-food-price 50)
(defconst excellent-wood-sell-price 200)
(defconst excellent-food-sell-price 200)
(defconst did-tribute 327)
(defconst attack-ready 171)
(defconst do-backstep 172)
(defconst emergency-trash 173)
(defconst dead-female-builders 175)
(defconst dead-builders 174)
(defconst enemy-good-missionaries 203)
(defconst enemy-good-condottiero 202)
(defconst enemy-good-genitours 201)
(defconst enemy-good-monks 200)
(defconst enemy-good-unique-units 199)
(defconst enemy-good-trebuchets 198)
(defconst enemy-good-bombard-cannons 197)
(defconst enemy-good-scorpions 196)
(defconst enemy-good-mangonels 195)
(defconst enemy-good-battering-rams 194)
(defconst enemy-good-battle-elephants 193)
(defconst enemy-good-camels 192)
(defconst enemy-good-knights 191)
(defconst enemy-good-scouts 190)
(defconst enemy-good-eagles 189)
(defconst enemy-good-spearmen 188)
(defconst enemy-good-militia 187)
(defconst enemy-good-cavalry-archers 186)
(defconst enemy-good-skirmishers 185)
(defconst enemy-good-hand-cannoneers 184)
(defconst enemy-good-archers 183)
(defconst enemy-good-trade-carts 182)
(defconst enemy-good-villagers 181)
(defconst enemy-good-demolition-ships 209)
(defconst enemy-good-cannon-galleons 208)
(defconst enemy-good-fire-ships 207)
(defconst enemy-good-galleys 206)
(defconst enemy-good-transport-ships 205)
(defconst enemy-good-fishing-ships 204)
(defconst enemy-good-speamen 210)
(defconst enemy-good-miltia 211)
(defconst good-speamen 179)
(defconst good-miltia 180)
(defconst produce-unique-unit 214)
(defconst militia-trash 213)
(defconst unique-unit-cavalry-trash 212)
(defconst total-units-selected 215)
(defconst max-demolition-ships 5)
(defconst max-defensive-mangonels 4)
(defconst max-cannon-galleons 8)
(defconst max-trebs 4)
(defconst max-imperial-age-rams 10)
(defconst max-castle-age-rams 5)
(defconst passive-override 221)
(defconst aggressive-override 220)
(defconst balanced-aggressive 219)
(defconst threatening-important 225)
(defconst next-retarget 224)
(defconst retarget-interval 300)
(defconst did-reset 226)
(defconst chat-betrayed-by-player 263)
(defconst chat-betray-player 262)
(defconst no-enemies-stamp 261)
(defconst player-8-is-bad-egg 257)
(defconst player-8-alliance-request-time-stamp 258)
(defconst allied-with-8 259)
(defconst tried-alliance-with-8 260)
(defconst player-7-is-bad-egg 253)
(defconst player-7-alliance-request-time-stamp 254)
(defconst allied-with-7 255)
(defconst tried-alliance-with-7 256)
(defconst player-6-is-bad-egg 249)
(defconst player-6-alliance-request-time-stamp 250)
(defconst allied-with-6 251)
(defconst tried-alliance-with-6 252)
(defconst player-5-is-bad-egg 245)
(defconst player-5-alliance-request-time-stamp 246)
(defconst allied-with-5 247)
(defconst tried-alliance-with-5 248)
(defconst player-4-is-bad-egg 241)
(defconst player-4-alliance-request-time-stamp 242)
(defconst allied-with-4 243)
(defconst tried-alliance-with-4 244)
(defconst player-3-is-bad-egg 237)
(defconst player-3-alliance-request-time-stamp 238)
(defconst allied-with-3 239)
(defconst tried-alliance-with-3 240)
(defconst player-2-is-bad-egg 233)
(defconst player-2-alliance-request-time-stamp 234)
(defconst allied-with-2 235)
(defconst tried-alliance-with-2 236)
(defconst player-1-is-bad-egg 229)
(defconst player-1-alliance-request-time-stamp 230)
(defconst allied-with-1 231)
(defconst tried-alliance-with-1 232)
(defconst accept-alliance-requests 228)
(defconst want-alliance 227)
(defconst allied-victory-timeout 120)
(defconst alliance-request-timeout 60)
(defconst feitoria-pop-usage 158)
(defconst desired-villagers-with-subtractions 157)
(defconst dock-count 159)
(defconst old-produce-units 160)
(defconst current-unit-amount 161)
(defconst expected-units-per-type 162)
(defconst total-type-production 163)
(defconst archery-range-count 164)
(defconst barracks-count 165)
(defconst stable-count 166)
(defconst siege-workshop-count 167)
(defconst castle-count 168)
(defconst old-desired-military-buildings-per-type 169)
(defconst monastery-count 170)
(defconst ri-yeomen 3)
(defconst ri-el-dorado 4)
(defconst ri-garland-wars 24)
(defconst ri-beserkergang 49)
(defconst ri-perfusion 457)
(defconst ri-logistica 61)
(defconst ri-mahouts 7)
(defconst ri-sipahi 491)
(defconst ri-rocketry 52)
(defconst ri-chivalry 493)
(defconst ri-bearded-axe 83)
(defconst ri-shinkichon 445)
(defconst ri-howdah 626)
(defconst ri-manipur-cavalry 627)
(defconst ri-furor-celtica 5)
(defconst ri-tusk-swords 622)
(defconst ri-double-crossbow 623)
(defconst ri-mercenaries 514)
(defconst ri-farimba 577)
(defconst ri-chatras 628)
(defconst ri-recurve-bow 515)
(defconst ri-inquisition 492)
(defconst ri-atlatl 460)
(defconst ri-greek-fire 464)
(defconst ri-andean-sling 516)
(defconst ri-sultans 506)
(defconst ri-pavise 494)
(defconst ri-silk-road 499)
(defconst ri-thalassocracy 624)
(defconst ri-carrack 572)
(defconst ri-shatagni 507)
(defconst ri-forced-levy 625)
(defconst ri-elite-genitour 599)
(defconst genitour-line 1079)
(defconst condottiero 184)
(defconst live-sheep 958)
(defconst sea-fish 905)
(defconst tc-arrow 54)
(defconst watch-tower-arrow 786)
(defconst castle-arrow 746)
(defconst castle-arrow-chemistry 747)
(defconst ranged-unit-class 900)
(defconst infantry-unit-class 906)
(defconst cavalry-unit-class 912)
(defconst dead-trade-cart 178)
(defconst dead-trade-cart-loaded 205)
(defconst dead-male-builder 213)
(defconst dead-female-builder 225)
(defconst max-town-centers 3)
(defconst dark-age-military-buildings 1)
(defconst feudal-age-military-buildings 3)
(defconst castle-age-military-buildings 4)
(defconst imperial-age-military-buildings 5)
(defconst min-detection-units 5)
(defconst wood-unit-threshold 200)
(defconst food-unit-threshold 0)
(defconst gold-unit-threshold 0)
(defconst resign 2)
(defconst full-water-map 3)
(defconst partial-water-map 4)
(defconst water-map 5)
(defconst desired-military-buildings-per-type 6)
(defconst desired-town-centers 7)
(defconst desired-villagers 8)
(defconst desired-trade-carts 9)
(defconst desired-fishing-ships 10)
(defconst desired-units-per-type 12)
(defconst pop-cap-goal 13)
(defconst desired-age 14)
(defconst produce-units 15)
(defconst allow-land-units 16)
(defconst allow-naval-units 17)
(defconst do-research 18)
(defconst attacking 19)
(defconst temp 20)
(defconst do-stone-mining 22)
(defconst produce-missionaries 45)
(defconst produce-condottiero 44)
(defconst produce-genitours 43)
(defconst produce-monks 42)
(defconst produce-unique-units 41)
(defconst produce-trebuchets 40)
(defconst produce-bombard-cannons 39)
(defconst produce-scorpions 38)
(defconst produce-mangonels 37)
(defconst produce-battering-rams 36)
(defconst produce-battle-elephants 35)
(defconst produce-camels 34)
(defconst produce-knights 33)
(defconst produce-scouts 32)
(defconst produce-eagles 31)
(defconst produce-spearmen 30)
(defconst produce-militia 29)
(defconst produce-cavalry-archers 28)
(defconst produce-skirmishers 27)
(defconst produce-hand-cannoneers 26)
(defconst produce-archers 25)
(defconst produce-trade-carts 24)
(defconst produce-villagers 23)
(defconst produce-demolition-ships 51)
(defconst produce-cannon-galleons 50)
(defconst produce-fire-ships 49)
(defconst produce-galleys 48)
(defconst produce-transport-ships 47)
(defconst produce-fishing-ships 46)
(defconst good-missionaries 74)
(defconst good-condottiero 73)
(defconst good-genitours 72)
(defconst good-monks 71)
(defconst good-unique-units 70)
(defconst good-trebuchets 69)
(defconst good-bombard-cannons 68)
(defconst good-scorpions 67)
(defconst good-mangonels 66)
(defconst good-battering-rams 65)
(defconst good-battle-elephants 64)
(defconst good-camels 63)
(defconst good-knights 62)
(defconst good-scouts 61)
(defconst good-eagles 60)
(defconst good-spearmen 59)
(defconst good-militia 58)
(defconst good-cavalry-archers 57)
(defconst good-skirmishers 56)
(defconst good-hand-cannoneers 55)
(defconst good-archers 54)
(defconst good-trade-carts 53)
(defconst good-villagers 52)
(defconst good-demolition-ships 80)
(defconst good-cannon-galleons 79)
(defconst good-fire-ships 78)
(defconst good-galleys 77)
(defconst good-transport-ships 76)
(defconst good-fishing-ships 75)
(defconst neutral-or-enemy-players-count 149)
(defconst enemy-players-count 148)
(defconst neutral-players-count 147)
(defconst ally-players-count 146)
(defconst unique-unit-is-cavalry 136)
(defconst unique-unit-is-infantry 137)
(defconst unique-unit-is-ranged 138)
(defconst unique-unit-is-cavalry-archer 139)
(defconst unique-unit-is-expensive 140)
(defconst unique-unit-counters-cavalry 141)
(defconst unique-unit-counters-infantry 142)
(defconst unique-unit-counters-ranged 143)
(defconst unique-unit-counters-cavalry-archer 144)
(defconst unique-unit-counters-unique-unit 145)
(defconst full-infantry-blacksmith-investment 135)
(defconst partial-infantry-blacksmith-investment 134)
(defconst full-cavalry-blacksmith-investment 133)
(defconst partial-cavalry-blacksmith-investment 132)
(defconst full-ranged-blacksmith-investment 131)
(defconst partial-ranged-blacksmith-investment 130)
(defconst infantry-blacksmith-techs-done 129)
(defconst cavalry-blacksmith-techs-done 128)
(defconst ranged-blacksmith-techs-done 127)
(defconst threat-target 126)
(defconst threat-source 125)
(defconst threat-player 124)
(defconst threat-time 123)
(defconst my-warboat-count 117)
(defconst target-warboat-count 118)
(defconst target-warboat-percentage 119)
(defconst largest-enemy-warboat-count 120)
(defconst largest-neutral-warboat-count 121)
(defconst largest-enemy-warboat-percentage 122)
(defconst my-civilian-population 111)
(defconst target-civilian-population 112)
(defconst target-civilian-percentage 113)
(defconst largest-enemy-civilian-population 114)
(defconst largest-neutral-civilian-population 115)
(defconst largest-enemy-civilian-percentage 116)
(defconst my-military-population 105)
(defconst target-military-population 106)
(defconst target-military-percentage 107)
(defconst largest-enemy-military-population 108)
(defconst largest-neutral-military-population 109)
(defconst largest-enemy-military-percentage 110)
(defconst target-player-score-delta 104)
(defconst target-player-score 103)
(defconst previous-target-player-score 102)
(defconst score-percentage 101)
(defconst lowest-enemy-score 100)
(defconst highest-enemy-score 99)
(defconst my-score 98)
(defconst town-center-count 97)
(defconst total-fishing-ships 96)
(defconst total-trade-carts 95)
(defconst total-villagers 94)
(defconst current-population-goal 93)
(defconst population-space-remaining 92)
(defconst no-gold-mining-start 91)
(defconst no-gold-mining-time 90)
(defconst game-time-goal 89)
(defconst non-escrowed-stone 88)
(defconst non-escrowed-gold 87)
(defconst non-escrowed-food 86)
(defconst non-escrowed-wood 85)
(defconst escrowed-stone 84)
(defconst escrowed-gold 83)
(defconst escrowed-food 82)
(defconst escrowed-wood 81)
(defconst team-game 150)
(defconst free-for-all 151)
(defconst locked-teams 152)
(defconst enough-wood-for-units 153)
(defconst enough-food-for-units 154)
(defconst enough-gold-for-units 155)
(defconst attempted-researches 156)
(defrule
    (true)
=>
    (set-goal 1 1)
    (disable-self)
)
(defrule
    (goal 1 1)
=>
    (set-strategic-number sn-enable-new-building-system 1)
    (set-strategic-number sn-percent-building-cancellation 20)
    (set-strategic-number sn-cap-civilian-builders 200)
    (set-difficulty-parameter ability-to-maintain-distance 0)
    (set-difficulty-parameter ability-to-dodge-missiles 100)
    (set-strategic-number sn-percent-attack-soldiers 100)
    (set-strategic-number sn-percent-attack-boats 100)
    (set-strategic-number sn-attack-intelligence 1)
    (set-strategic-number sn-livestock-to-town-center 1)
    (set-strategic-number sn-enable-patrol-attack 1)
    (set-strategic-number sn-intelligent-gathering 1)
    (set-strategic-number sn-local-targeting-mode 1)
    (set-strategic-number sn-retask-gather-amount 0)
    (set-strategic-number sn-target-evaluation-siege-weapon 500)
    (set-strategic-number sn-percent-enemy-sighted-response 100)
    (set-strategic-number sn-task-ungrouped-soldiers 0)
    (set-strategic-number sn-gather-defense-units 1)
    (set-strategic-number sn-defer-dropsite-update 1)
    (set-strategic-number sn-do-not-scale-for-difficulty-level 1)
    (set-strategic-number sn-number-build-attempts-before-skip 5)
    (set-strategic-number sn-max-skips-per-attempt 5)
    (set-strategic-number sn-dropsite-separation-distance 8)
    (set-strategic-number sn-wall-targeting-mode 1)
    (set-strategic-number sn-minimum-water-body-size-for-dock 999)
    (disable-self)
)
(defrule
    (goal 1 1)
=>
    (set-strategic-number sn-maximum-wood-drop-distance -1)
    (set-strategic-number sn-maximum-food-drop-distance 8)
    (set-strategic-number sn-maximum-gold-drop-distance 8)
    (set-strategic-number sn-maximum-stone-drop-distance 8)
    (set-strategic-number sn-maximum-hunt-drop-distance 48)
    (set-strategic-number sn-mill-max-distance 25)
    (set-strategic-number sn-camp-max-distance 25)
    (set-strategic-number sn-dropsite-separation-distance 5)
    (set-strategic-number sn-percent-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
    (set-strategic-number sn-total-number-explorers 1)
    (set-strategic-number sn-number-explore-groups 1)
    (set-strategic-number sn-initial-exploration-required 0)
    (set-strategic-number sn-wall-targeting-mode 1)
    (enable-wall-placement 1)
    (enable-wall-placement 2)
    (set-goal resign 0)
    (set-strategic-number sn-maximum-attack-group-size 1)
    (set-strategic-number sn-minimum-attack-group-size 1)
    (set-strategic-number sn-maximum-boat-attack-group-size 1)
    (set-strategic-number sn-minimum-boat-attack-group-size 1)
    (set-strategic-number sn-garrison-rams 0)
    (set-strategic-number sn-group-form-distance 30)
    (set-strategic-number sn-special-attack-type2 villager)
    (set-goal full-water-map 0)
    (set-goal partial-water-map 0)
    (disable-self)
)
(defrule
    (building-type-count stone-wall-line == 0)
    (building-type-count palisade-wall == 0)
    (wall-completed-percentage 2 == 100)
    (cc-players-unit-type-count 0 sea-fish >= 1)
    (game-time < 5)
    (goal 1 1)
=>
    (set-goal full-water-map 1)
    (disable-self)
)
(defrule
    (nand
      (building-type-count stone-wall-line == 0)
      (and
        (building-type-count palisade-wall == 0)
        (wall-completed-percentage 2 == 100)
      )
    )
    (cc-players-unit-type-count 0 sea-fish >= 1)
    (game-time < 5)
    (goal 1 1)
=>
    (set-goal partial-water-map 1)
    (disable-self)
)
(defrule
    (or
      (goal full-water-map 1)
      (goal partial-water-map 1)
    )
    (goal 1 1)
=>
    (set-goal water-map 1)
    (disable-self)
)
(defrule
    (not
      (goal full-water-map 1)
    )
    (not
      (goal partial-water-map 1)
    )
    (goal 1 1)
=>
    (set-goal water-map 0)
    (disable-self)
)
(defrule
    (goal 1 1)
=>
    (set-goal desired-military-buildings-per-type 2)
    (set-goal desired-town-centers max-town-centers)
    (set-goal desired-villagers 120)
    (set-goal desired-trade-carts 30)
    (set-goal desired-fishing-ships 10)
    (set-goal 11 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 11)
    (disable-self)
)
(defrule
    (goal 11 1)
    (goal 1 1)
=>
    (set-goal desired-units-per-type 1)
    (disable-self)
)
(defrule
    (goal 11 2)
    (goal 1 1)
=>
    (set-goal desired-units-per-type 2)
    (disable-self)
)
(defrule
    (goal 1 1)
=>
    (set-goal pop-cap-goal 0)
    (up-get-fact population-cap 0 pop-cap-goal)
    (up-modify-goal desired-villagers g:* pop-cap-goal)
    (up-modify-goal desired-villagers c:/ 200)
    (up-modify-goal desired-fishing-ships g:* pop-cap-goal)
    (up-modify-goal desired-fishing-ships c:/ 200)
    (set-goal desired-age 0)
    (up-modify-goal desired-age c:= dark-age)
    (set-goal produce-units 1)
    (set-goal allow-land-units 1)
    (set-goal allow-naval-units 1)
    (set-goal do-research 1)
    (set-goal attacking 0)
    (up-assign-builders c: castle c: 8)
    (up-assign-builders c: town-center-foundation c: 4)
    (set-goal temp 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal 1 0)
    (set-strategic-number sn-percent-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
    (set-strategic-number sn-total-number-explorers 1)
    (set-strategic-number sn-number-explore-groups 1)
    (set-strategic-number sn-initial-exploration-required 0)
    (disable-self)
)
(defrule
    (soldier-count == 0)
    (or
      (game-time < 600)
      (nand
        (resource-found gold)
        (resource-found stone)
      )
    )
    (strategic-number sn-cap-civilian-explorers == 0)
=>
    (set-strategic-number sn-percent-civilian-explorers 100)
    (set-strategic-number sn-cap-civilian-explorers 1)
)
(defrule
    (or
      (soldier-count >= 1)
      (and
        (game-time >= 600)
        (and
          (resource-found gold)
          (resource-found stone)
        )
      )
    )
    (strategic-number sn-cap-civilian-explorers == 1)
=>
    (set-strategic-number sn-percent-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
)
(defrule
    (true)
=>
    (up-modify-goal desired-trade-carts g:= desired-villagers)
    (up-modify-goal desired-trade-carts s:* sn-gold-gatherer-percentage)
    (up-modify-goal desired-trade-carts c:/ 100)
)
(defrule
    (true)
=>
    (set-goal 21 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 21)
    (disable-self)
)
(defrule
    (goal 21 1)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (goal 21 2)
=>
    (set-goal do-stone-mining 0)
)
(defrule
    (true)
=>
    (set-goal produce-villagers 0)
    (set-goal produce-trade-carts 0)
    (set-goal produce-archers 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-skirmishers 0)
    (set-goal produce-cavalry-archers 0)
    (set-goal produce-militia 0)
    (set-goal produce-spearmen 0)
    (set-goal produce-eagles 0)
    (set-goal produce-scouts 0)
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-battering-rams 0)
    (set-goal produce-mangonels 0)
    (set-goal produce-scorpions 0)
    (set-goal produce-bombard-cannons 0)
    (set-goal produce-trebuchets 0)
    (set-goal produce-unique-units 0)
    (set-goal produce-monks 0)
    (set-goal produce-genitours 0)
    (set-goal produce-condottiero 0)
    (set-goal produce-missionaries 0)
    (set-goal produce-fishing-ships 0)
    (set-goal produce-transport-ships 0)
    (set-goal produce-galleys 0)
    (set-goal produce-fire-ships 0)
    (set-goal produce-cannon-galleons 0)
    (set-goal produce-demolition-ships 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal good-villagers 0)
    (set-goal good-trade-carts 0)
    (set-goal good-archers 0)
    (set-goal good-hand-cannoneers 0)
    (set-goal good-skirmishers 0)
    (set-goal good-cavalry-archers 0)
    (set-goal good-militia 0)
    (set-goal good-spearmen 0)
    (set-goal good-eagles 0)
    (set-goal good-scouts 0)
    (set-goal good-knights 0)
    (set-goal good-camels 0)
    (set-goal good-battle-elephants 0)
    (set-goal good-battering-rams 0)
    (set-goal good-mangonels 0)
    (set-goal good-scorpions 0)
    (set-goal good-bombard-cannons 0)
    (set-goal good-trebuchets 0)
    (set-goal good-unique-units 0)
    (set-goal good-monks 0)
    (set-goal good-genitours 0)
    (set-goal good-condottiero 0)
    (set-goal good-missionaries 0)
    (set-goal good-fishing-ships 0)
    (set-goal good-transport-ships 0)
    (set-goal good-galleys 0)
    (set-goal good-fire-ships 0)
    (set-goal good-cannon-galleons 0)
    (set-goal good-demolition-ships 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal escrowed-wood 0)
    (set-goal escrowed-food 0)
    (set-goal escrowed-gold 0)
    (set-goal escrowed-stone 0)
    (set-goal non-escrowed-wood 0)
    (set-goal non-escrowed-food 0)
    (set-goal non-escrowed-gold 0)
    (set-goal non-escrowed-stone 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact escrow-amount wood escrowed-wood)
    (up-get-fact escrow-amount food escrowed-food)
    (up-get-fact escrow-amount gold escrowed-gold)
    (up-get-fact escrow-amount stone escrowed-stone)
    (up-get-fact resource-amount wood non-escrowed-wood)
    (up-get-fact resource-amount food non-escrowed-food)
    (up-get-fact resource-amount gold non-escrowed-gold)
    (up-get-fact resource-amount stone non-escrowed-stone)
    (up-modify-goal non-escrowed-wood g:- escrowed-wood)
    (up-modify-goal non-escrowed-food g:- escrowed-food)
    (up-modify-goal non-escrowed-gold g:- escrowed-gold)
    (up-modify-goal non-escrowed-stone g:- escrowed-stone)
)
(defrule
    (true)
=>
    (set-goal game-time-goal 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact game-time 0 game-time-goal)
)
(defrule
    (true)
=>
    (set-goal no-gold-mining-time 0)
    (set-goal no-gold-mining-start -1)
    (disable-self)
)
(defrule
    (goal no-gold-mining-start -1)
    (unit-type-count 579 == 0)
    (unit-type-count 581 == 0)
=>
    (up-get-fact game-time 0 no-gold-mining-start)
)
(defrule
    (nand
      (unit-type-count 579 == 0)
      (unit-type-count 581 == 0)
    )
=>
    (set-goal no-gold-mining-start -1)
)
(defrule
    (goal no-gold-mining-start -1)
=>
    (set-goal no-gold-mining-time 0)
)
(defrule
    (not
      (goal no-gold-mining-start -1)
    )
=>
    (up-get-fact game-time 0 no-gold-mining-time)
    (up-modify-goal no-gold-mining-time g:- no-gold-mining-start)
)
(defrule
    (true)
=>
    (set-goal population-space-remaining 0)
    (set-goal current-population-goal 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact population-cap 0 population-space-remaining)
    (up-get-fact population 0 current-population-goal)
    (up-modify-goal population-space-remaining g:- current-population-goal)
)
(defrule
    (true)
=>
    (set-goal total-villagers 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact unit-type-count villager total-villagers)
)
(defrule
    (true)
=>
    (set-goal total-trade-carts 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact unit-type-count trade-cart total-trade-carts)
)
(defrule
    (true)
=>
    (set-goal total-fishing-ships 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact unit-type-count fishing-ship total-fishing-ships)
)
(defrule
    (true)
=>
    (set-goal town-center-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total town-center town-center-count)
)
(defrule
    (true)
=>
    (set-goal my-score 0)
    (set-goal highest-enemy-score 0)
    (set-goal lowest-enemy-score 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact current-score 0 my-score)
    (up-get-fact-max any-enemy current-score 0 highest-enemy-score)
    (up-get-fact-min any-enemy current-score 0 lowest-enemy-score)
)
(defrule
    (true)
=>
    (set-goal score-percentage 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-modify-goal score-percentage g:= my-score)
    (up-modify-goal score-percentage c:* 100)
    (up-modify-goal score-percentage g:/ highest-enemy-score)
)
(defrule
    (true)
=>
    (set-goal previous-target-player-score 0)
    (set-goal target-player-score 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-target-fact current-score 0 target-player-score)
    (set-goal target-player-score-delta 0)
    (up-modify-goal target-player-score-delta g:= target-player-score)
    (up-modify-goal target-player-score-delta g:- previous-target-player-score)
    (up-modify-goal previous-target-player-score g:= target-player-score)
)
(defrule
    (true)
=>
    (set-goal my-military-population 0)
    (set-goal target-military-population 0)
    (set-goal target-military-percentage 0)
    (set-goal largest-enemy-military-population 0)
    (set-goal largest-neutral-military-population 0)
    (set-goal largest-enemy-military-percentage 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact military-population 0 my-military-population)
    (up-get-target-fact military-population 0 target-military-population)
    (up-get-fact-max any-enemy military-population 0 largest-enemy-military-population)
    (up-get-fact-max any-neutral military-population 0 largest-neutral-military-population)
    (up-modify-goal target-military-percentage g:= my-military-population)
    (up-modify-goal target-military-percentage c:* 100)
    (up-modify-goal largest-enemy-military-percentage g:= target-military-percentage)
    (up-modify-goal target-military-percentage g:/ target-military-population)
)
(defrule
    (up-compare-goal largest-neutral-military-population g:> largest-enemy-military-population)
=>
    (up-modify-goal largest-enemy-military-percentage g:/ largest-neutral-military-population)
)
(defrule
    (not
      (up-compare-goal largest-neutral-military-population g:> largest-enemy-military-population)
    )
=>
    (up-modify-goal largest-enemy-military-percentage g:/ largest-enemy-military-population)
)
(defrule
    (true)
=>
    (set-goal my-civilian-population 0)
    (set-goal target-civilian-population 0)
    (set-goal target-civilian-percentage 0)
    (set-goal largest-enemy-civilian-population 0)
    (set-goal largest-neutral-civilian-population 0)
    (set-goal largest-enemy-civilian-percentage 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact civilian-population 0 my-civilian-population)
    (up-get-target-fact civilian-population 0 target-civilian-population)
    (up-get-fact-max any-enemy civilian-population 0 largest-enemy-civilian-population)
    (up-get-fact-max any-neutral civilian-population 0 largest-neutral-civilian-population)
    (up-modify-goal target-civilian-percentage g:= my-civilian-population)
    (up-modify-goal target-civilian-percentage c:* 100)
    (up-modify-goal largest-enemy-civilian-percentage g:= target-civilian-percentage)
    (up-modify-goal target-civilian-percentage g:/ target-civilian-population)
)
(defrule
    (up-compare-goal largest-neutral-civilian-population g:> largest-enemy-civilian-population)
=>
    (up-modify-goal largest-enemy-civilian-percentage g:/ largest-neutral-civilian-population)
)
(defrule
    (not
      (up-compare-goal largest-neutral-civilian-population g:> largest-enemy-civilian-population)
    )
=>
    (up-modify-goal largest-enemy-civilian-percentage g:/ largest-enemy-civilian-population)
)
(defrule
    (true)
=>
    (set-goal my-warboat-count 0)
    (set-goal target-warboat-count 0)
    (set-goal target-warboat-percentage 0)
    (set-goal largest-enemy-warboat-count 0)
    (set-goal largest-neutral-warboat-count 0)
    (set-goal largest-enemy-warboat-percentage 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact warboat-count 0 my-warboat-count)
    (up-get-target-fact warboat-count 0 target-warboat-count)
    (up-get-fact-max any-enemy warboat-count 0 largest-enemy-warboat-count)
    (up-get-fact-max any-neutral warboat-count 0 largest-neutral-warboat-count)
    (up-modify-goal target-warboat-percentage g:= my-warboat-count)
    (up-modify-goal target-warboat-percentage c:* 100)
    (up-modify-goal largest-enemy-warboat-percentage g:= target-warboat-percentage)
    (up-modify-goal target-warboat-percentage g:/ target-warboat-count)
)
(defrule
    (up-compare-goal largest-neutral-warboat-count g:> largest-enemy-warboat-count)
=>
    (up-modify-goal largest-enemy-warboat-percentage g:/ largest-neutral-warboat-count)
)
(defrule
    (not
      (up-compare-goal largest-neutral-warboat-count g:> largest-enemy-warboat-count)
    )
=>
    (up-modify-goal largest-enemy-warboat-percentage g:/ largest-enemy-warboat-count)
)
(defrule
    (true)
=>
    (set-goal threat-time 0)
    (set-goal threat-player 0)
    (set-goal threat-source 0)
    (set-goal threat-target 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-threat-data threat-time threat-player threat-source threat-target)
    (set-goal ranged-blacksmith-techs-done 0)
    (set-goal cavalry-blacksmith-techs-done 0)
    (set-goal infantry-blacksmith-techs-done 0)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-modify-goal ranged-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-forging)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-modify-goal cavalry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-modify-goal infantry-blacksmith-techs-done c:+ 1)
)
(defrule
    (true)
=>
    (set-goal partial-ranged-blacksmith-investment 0)
    (set-goal full-ranged-blacksmith-investment 0)
    (set-goal partial-cavalry-blacksmith-investment 0)
    (set-goal full-cavalry-blacksmith-investment 0)
    (set-goal partial-infantry-blacksmith-investment 0)
    (set-goal full-infantry-blacksmith-investment 0)
)
(defrule
    (goal ranged-blacksmith-techs-done 1)
    (current-age == feudal-age)
=>
    (set-goal partial-ranged-blacksmith-investment 1)
)
(defrule
    (goal ranged-blacksmith-techs-done 2)
    (not
      (goal ranged-blacksmith-techs-done 1)
    )
    (current-age == feudal-age)
=>
    (set-goal partial-ranged-blacksmith-investment 1)
    (set-goal full-ranged-blacksmith-investment 1)
)
(defrule
    (goal ranged-blacksmith-techs-done 3)
    (current-age == castle-age)
    (not
      (current-age == feudal-age)
    )
=>
    (set-goal partial-ranged-blacksmith-investment 1)
)
(defrule
    (goal ranged-blacksmith-techs-done 4)
    (not
      (goal ranged-blacksmith-techs-done 3)
    )
    (current-age == castle-age)
    (not
      (current-age == feudal-age)
    )
=>
    (set-goal partial-ranged-blacksmith-investment 1)
    (set-goal full-ranged-blacksmith-investment 1)
)
(defrule
    (goal ranged-blacksmith-techs-done 5)
    (current-age == imperial-age)
    (not
      (current-age == feudal-age)
    )
    (not
      (current-age == castle-age)
    )
=>
    (set-goal partial-ranged-blacksmith-investment 1)
)
(defrule
    (goal ranged-blacksmith-techs-done 6)
    (not
      (goal ranged-blacksmith-techs-done 5)
    )
    (current-age == imperial-age)
    (not
      (current-age == feudal-age)
    )
    (not
      (current-age == castle-age)
    )
=>
    (set-goal partial-ranged-blacksmith-investment 1)
    (set-goal full-ranged-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 1)
    (current-age == feudal-age)
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 2)
    (not
      (goal cavalry-blacksmith-techs-done 1)
    )
    (current-age == feudal-age)
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
    (set-goal full-cavalry-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 3)
    (current-age == castle-age)
    (not
      (current-age == feudal-age)
    )
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 4)
    (not
      (goal cavalry-blacksmith-techs-done 3)
    )
    (current-age == castle-age)
    (not
      (current-age == feudal-age)
    )
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
    (set-goal full-cavalry-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 5)
    (current-age == imperial-age)
    (not
      (current-age == feudal-age)
    )
    (not
      (current-age == castle-age)
    )
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
)
(defrule
    (goal cavalry-blacksmith-techs-done 6)
    (not
      (goal cavalry-blacksmith-techs-done 5)
    )
    (current-age == imperial-age)
    (not
      (current-age == feudal-age)
    )
    (not
      (current-age == castle-age)
    )
=>
    (set-goal partial-cavalry-blacksmith-investment 1)
    (set-goal full-cavalry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 1)
    (current-age == feudal-age)
=>
    (set-goal partial-infantry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 2)
    (not
      (goal infantry-blacksmith-techs-done 1)
    )
    (current-age == feudal-age)
=>
    (set-goal partial-infantry-blacksmith-investment 1)
    (set-goal full-infantry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 3)
    (current-age == castle-age)
    (not
      (current-age == feudal-age)
    )
=>
    (set-goal partial-infantry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 4)
    (not
      (goal infantry-blacksmith-techs-done 3)
    )
    (current-age == castle-age)
    (not
      (current-age == feudal-age)
    )
=>
    (set-goal partial-infantry-blacksmith-investment 1)
    (set-goal full-infantry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 5)
    (current-age == imperial-age)
    (not
      (current-age == feudal-age)
    )
    (not
      (current-age == castle-age)
    )
=>
    (set-goal partial-infantry-blacksmith-investment 1)
)
(defrule
    (goal infantry-blacksmith-techs-done 6)
    (not
      (goal infantry-blacksmith-techs-done 5)
    )
    (current-age == imperial-age)
    (not
      (current-age == feudal-age)
    )
    (not
      (current-age == castle-age)
    )
=>
    (set-goal partial-infantry-blacksmith-investment 1)
    (set-goal full-infantry-blacksmith-investment 1)
)
(defrule
    (true)
=>
    (set-goal unique-unit-is-cavalry 0)
    (set-goal unique-unit-is-infantry 0)
    (set-goal unique-unit-is-ranged 0)
    (set-goal unique-unit-is-cavalry-archer 0)
    (set-goal unique-unit-is-expensive 0)
    (set-goal unique-unit-counters-cavalry 0)
    (set-goal unique-unit-counters-infantry 0)
    (set-goal unique-unit-counters-ranged 0)
    (set-goal unique-unit-counters-cavalry-archer 0)
    (set-goal unique-unit-counters-unique-unit 0)
    (disable-self)
)
(defrule
    (players-civ my-player-number aztec)
=>
    (set-goal unique-unit-is-infantry 1)
    (set-goal unique-unit-counters-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number berbers)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (set-goal unique-unit-counters-cavalry-archer 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number briton)
=>
    (set-goal unique-unit-is-ranged 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number burmese)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number byzantine)
=>
    (set-goal unique-unit-is-cavalry 1)
    (set-goal unique-unit-counters-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number celtic)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number chinese)
=>
    (set-goal unique-unit-is-ranged 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number ethiopian)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number frankish)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number gothic)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number hun)
=>
    (set-goal unique-unit-is-cavalry 1)
    (set-goal unique-unit-is-expensive 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number incan)
=>
    (set-goal unique-unit-is-infantry 1)
    (set-goal unique-unit-counters-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number indian)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number italian)
=>
    (set-goal unique-unit-is-ranged 1)
    (set-goal unique-unit-counters-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number japanese)
=>
    (set-goal unique-unit-is-infantry 1)
    (set-goal unique-unit-counters-unique-unit 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number khmer)
=>
    (set-goal unique-unit-is-cavalry 1)
    (set-goal unique-unit-counters-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number korean)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (set-goal unique-unit-counters-ranged 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number magyar)
=>
    (set-goal unique-unit-is-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number malay)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number malian)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number mayan)
=>
    (set-goal unique-unit-is-ranged 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number mongol)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number persian)
=>
    (set-goal unique-unit-is-cavalry 1)
    (set-goal unique-unit-is-expensive 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number saracen)
=>
    (set-goal unique-unit-is-cavalry 1)
    (set-goal unique-unit-counters-cavalry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number slavic)
=>
    (set-goal unique-unit-is-cavalry 1)
    (set-goal unique-unit-is-expensive 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number spanish)
=>
    (set-goal unique-unit-is-cavalry-archer 1)
    (set-goal unique-unit-is-expensive 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number teutonic)
=>
    (set-goal unique-unit-is-infantry 1)
    (set-goal unique-unit-is-expensive 1)
    (set-goal unique-unit-counters-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number turkish)
=>
    (set-goal unique-unit-is-ranged 1)
    (set-goal unique-unit-counters-infantry 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number vietnamese)
=>
    (set-goal unique-unit-is-ranged 1)
    (set-goal unique-unit-counters-ranged 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number viking)
=>
    (set-goal unique-unit-is-infantry 1)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal ally-players-count 0)
    (set-goal neutral-players-count 0)
    (set-goal enemy-players-count 0)
)
(defrule
    (stance-toward 1 ally)
    (player-in-game 1)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 1 neutral)
    (not
      (stance-toward 1 ally)
    )
    (player-in-game 1)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 1 enemy)
    (not
      (stance-toward 1 ally)
    )
    (not
      (stance-toward 1 neutral)
    )
    (player-in-game 1)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 2 ally)
    (player-in-game 2)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 2 neutral)
    (not
      (stance-toward 2 ally)
    )
    (player-in-game 2)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 2 enemy)
    (not
      (stance-toward 2 ally)
    )
    (not
      (stance-toward 2 neutral)
    )
    (player-in-game 2)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 3 ally)
    (player-in-game 3)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 3 neutral)
    (not
      (stance-toward 3 ally)
    )
    (player-in-game 3)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 3 enemy)
    (not
      (stance-toward 3 ally)
    )
    (not
      (stance-toward 3 neutral)
    )
    (player-in-game 3)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 4 ally)
    (player-in-game 4)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 4 neutral)
    (not
      (stance-toward 4 ally)
    )
    (player-in-game 4)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 4 enemy)
    (not
      (stance-toward 4 ally)
    )
    (not
      (stance-toward 4 neutral)
    )
    (player-in-game 4)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 5 ally)
    (player-in-game 5)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 5 neutral)
    (not
      (stance-toward 5 ally)
    )
    (player-in-game 5)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 5 enemy)
    (not
      (stance-toward 5 ally)
    )
    (not
      (stance-toward 5 neutral)
    )
    (player-in-game 5)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 6 ally)
    (player-in-game 6)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 6 neutral)
    (not
      (stance-toward 6 ally)
    )
    (player-in-game 6)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 6 enemy)
    (not
      (stance-toward 6 ally)
    )
    (not
      (stance-toward 6 neutral)
    )
    (player-in-game 6)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 7 ally)
    (player-in-game 7)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 7 neutral)
    (not
      (stance-toward 7 ally)
    )
    (player-in-game 7)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 7 enemy)
    (not
      (stance-toward 7 ally)
    )
    (not
      (stance-toward 7 neutral)
    )
    (player-in-game 7)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward 8 ally)
    (player-in-game 8)
=>
    (up-modify-goal ally-players-count c:+ 1)
)
(defrule
    (stance-toward 8 neutral)
    (not
      (stance-toward 8 ally)
    )
    (player-in-game 8)
=>
    (up-modify-goal neutral-players-count c:+ 1)
)
(defrule
    (stance-toward 8 enemy)
    (not
      (stance-toward 8 ally)
    )
    (not
      (stance-toward 8 neutral)
    )
    (player-in-game 8)
=>
    (up-modify-goal enemy-players-count c:+ 1)
)
(defrule
    (stance-toward my-player-number ally)
=>
    (up-modify-goal ally-players-count c:- 1)
)
(defrule
    (stance-toward my-player-number neutral)
    (not
      (stance-toward my-player-number ally)
    )
=>
    (up-modify-goal neutral-players-count c:- 1)
)
(defrule
    (stance-toward my-player-number enemy)
    (not
      (stance-toward my-player-number ally)
    )
    (not
      (stance-toward my-player-number neutral)
    )
=>
    (up-modify-goal enemy-players-count c:- 1)
)
(defrule
    (true)
=>
    (set-goal neutral-or-enemy-players-count 0)
    (up-modify-goal neutral-or-enemy-players-count g:+ enemy-players-count)
    (up-modify-goal neutral-or-enemy-players-count g:+ neutral-players-count)
)
(defrule
    (true)
=>
    (set-goal team-game 0)
    (set-goal free-for-all 0)
    (set-goal locked-teams 1)
    (set-stance my-player-number enemy)
    (disable-self)
)
(defrule
    (stance-toward my-player-number enemy)
=>
    (set-goal locked-teams 0)
    (set-stance my-player-number ally)
    (disable-self)
)
(defrule
    (goal free-for-all 0)
    (players-stance any-ally ally)
    (stance-toward any-ally ally)
=>
    (set-goal team-game 1)
    (disable-self)
)
(defrule
    (goal team-game 0)
    (player-valid 1)
    (player-valid 2)
    (player-valid 3)
=>
    (set-goal free-for-all 1)
    (disable-self)
)
(defrule
    (current-age == dark-age)
    (up-compare-goal desired-military-buildings-per-type c:< dark-age-military-buildings)
=>
    (set-goal desired-military-buildings-per-type dark-age-military-buildings)
)
(defrule
    (current-age == feudal-age)
    (up-compare-goal desired-military-buildings-per-type c:< feudal-age-military-buildings)
    (nand
      (current-age == dark-age)
      (up-compare-goal desired-military-buildings-per-type c:< dark-age-military-buildings)
    )
=>
    (set-goal desired-military-buildings-per-type feudal-age-military-buildings)
)
(defrule
    (current-age == castle-age)
    (up-compare-goal desired-military-buildings-per-type c:< castle-age-military-buildings)
    (nand
      (current-age == dark-age)
      (up-compare-goal desired-military-buildings-per-type c:< dark-age-military-buildings)
    )
    (nand
      (current-age == feudal-age)
      (up-compare-goal desired-military-buildings-per-type c:< feudal-age-military-buildings)
    )
=>
    (set-goal desired-military-buildings-per-type castle-age-military-buildings)
)
(defrule
    (current-age == imperial-age)
    (up-compare-goal desired-military-buildings-per-type c:< imperial-age-military-buildings)
    (nand
      (current-age == feudal-age)
      (up-compare-goal desired-military-buildings-per-type c:< feudal-age-military-buildings)
    )
    (nand
      (current-age == dark-age)
      (up-compare-goal desired-military-buildings-per-type c:< dark-age-military-buildings)
    )
    (nand
      (current-age == castle-age)
      (up-compare-goal desired-military-buildings-per-type c:< castle-age-military-buildings)
    )
=>
    (set-goal desired-military-buildings-per-type imperial-age-military-buildings)
)
(defrule
    (wood-amount >= wood-unit-threshold)
=>
    (set-goal enough-wood-for-units 1)
)
(defrule
    (not
      (wood-amount >= wood-unit-threshold)
    )
=>
    (set-goal enough-wood-for-units 0)
)
(defrule
    (food-amount >= food-unit-threshold)
=>
    (set-goal enough-food-for-units 1)
)
(defrule
    (not
      (food-amount >= food-unit-threshold)
    )
=>
    (set-goal enough-food-for-units 0)
)
(defrule
    (gold-amount >= gold-unit-threshold)
=>
    (set-goal enough-gold-for-units 1)
)
(defrule
    (not
      (gold-amount >= gold-unit-threshold)
    )
=>
    (set-goal enough-gold-for-units 0)
)
(defrule
    (goal attacking 0)
    (town-under-attack)
=>
    (set-goal enough-wood-for-units 1)
    (set-goal enough-food-for-units 1)
    (set-goal enough-gold-for-units 1)
)
(defrule
    (true)
=>
    (set-goal attempted-researches 0)
)
(defrule
    (nor
      (building-type-count town-center > 0)
      (game-time >= 8)
    )
=>
    (up-jump-rule 66)
)
(defrule
    (not
      (goal desired-age feudal-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (research-completed feudal-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (research-completed feudal-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (research-completed feudal-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: feudal-age < research-pending)
    (research-available feudal-age)
    (not
      (research-completed feudal-age)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research feudal-age)
    (goal do-research 1)
    (research-available feudal-age)
    (not
      (research-completed feudal-age)
    )
=>
    (research feudal-age)
)
(defrule
    (not
      (goal desired-age castle-age)
    )
=>
    (up-jump-rule 20)
)
(defrule
    (research-completed castle-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (research-completed castle-age)
=>
    (up-jump-rule 8)
)
(defrule
    (research-completed feudal-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (research-completed feudal-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (research-completed feudal-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: feudal-age < research-pending)
    (research-available feudal-age)
    (not
      (research-completed feudal-age)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research feudal-age)
    (goal do-research 1)
    (research-available feudal-age)
    (not
      (research-completed feudal-age)
    )
=>
    (research feudal-age)
)
(defrule
    (research-completed castle-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (nand
      (and
        (building-type-count archery-range == 0)
        (building-type-count stable == 0)
      )
      (not
        (research-completed castle-age)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (gold-amount > 400)
    (can-buy-commodity food)
    (food-amount < 800)
    (not
      (research-completed castle-age)
    )
=>
    (buy-commodity food)
)
(defrule
    (food-amount > 900)
    (can-sell-commodity food)
    (gold-amount < 200)
    (not
      (research-completed castle-age)
    )
=>
    (sell-commodity food)
)
(defrule
    (wood-amount > 400)
    (can-sell-commodity wood)
    (gold-amount < 200)
    (not
      (research-completed castle-age)
    )
=>
    (sell-commodity wood)
)
(defrule
    (up-research-status c: castle-age < research-pending)
    (research-available castle-age)
    (not
      (research-completed castle-age)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research castle-age)
    (goal do-research 1)
    (research-available castle-age)
    (not
      (research-completed castle-age)
    )
=>
    (research castle-age)
)
(defrule
    (not
      (goal desired-age imperial-age)
    )
=>
    (up-jump-rule 35)
)
(defrule
    (research-completed imperial-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (research-completed imperial-age)
=>
    (up-jump-rule 20)
)
(defrule
    (research-completed castle-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (research-completed castle-age)
=>
    (up-jump-rule 8)
)
(defrule
    (research-completed feudal-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (research-completed feudal-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (research-completed feudal-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: feudal-age < research-pending)
    (research-available feudal-age)
    (not
      (research-completed feudal-age)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research feudal-age)
    (goal do-research 1)
    (research-available feudal-age)
    (not
      (research-completed feudal-age)
    )
=>
    (research feudal-age)
)
(defrule
    (research-completed castle-age)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (nand
      (and
        (building-type-count archery-range == 0)
        (building-type-count stable == 0)
      )
      (not
        (research-completed castle-age)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (gold-amount > 400)
    (can-buy-commodity food)
    (food-amount < 800)
    (not
      (research-completed castle-age)
    )
=>
    (buy-commodity food)
)
(defrule
    (food-amount > 900)
    (can-sell-commodity food)
    (gold-amount < 200)
    (not
      (research-completed castle-age)
    )
=>
    (sell-commodity food)
)
(defrule
    (wood-amount > 400)
    (can-sell-commodity wood)
    (gold-amount < 200)
    (not
      (research-completed castle-age)
    )
=>
    (sell-commodity wood)
)
(defrule
    (up-research-status c: castle-age < research-pending)
    (research-available castle-age)
    (not
      (research-completed castle-age)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research castle-age)
    (goal do-research 1)
    (research-available castle-age)
    (not
      (research-completed castle-age)
    )
=>
    (research castle-age)
)
(defrule
    (nand
      (or
        (building-type-count monastery == 0)
        (building-type-count university == 0)
      )
      (and
        (strategic-number sn-stone-gatherer-percentage > 0)
        (not
          (research-completed imperial-age)
        )
      )
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (nand
      (not
        (strategic-number sn-stone-gatherer-percentage > 0)
      )
      (not
        (research-completed imperial-age)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (nand
      (not
        (strategic-number sn-stone-gatherer-percentage > 0)
      )
      (not
        (research-completed imperial-age)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: imperial-age < research-pending)
    (research-available imperial-age)
    (not
      (research-completed imperial-age)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research imperial-age)
    (goal do-research 1)
    (research-available imperial-age)
    (not
      (research-completed imperial-age)
    )
=>
    (research imperial-age)
)
(defrule
    (nor
      (building-type-count town-center > 0)
      (game-time >= 8)
    )
=>
    (up-jump-rule 38)
)
(defrule
    (nand
      (current-age == imperial-age)
      (building-type-count castle >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (research-completed ri-conscription)
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-conscription < research-pending)
    (research-available ri-conscription)
    (not
      (research-completed ri-conscription)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-conscription)
    (goal do-research 1)
    (research-available ri-conscription)
    (not
      (research-completed ri-conscription)
    )
=>
    (research ri-conscription)
)
(defrule
    (not
      (players-unit-type-count any-enemy monk-set >= 10)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-heresy)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-heresy < research-pending)
    (research-available ri-heresy)
    (not
      (research-completed ri-heresy)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heresy)
    (goal do-research 1)
    (research-available ri-heresy)
    (not
      (research-completed ri-heresy)
    )
=>
    (research ri-heresy)
)
(defrule
    (not
      (players-unit-type-count any-enemy missionary >= 10)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-heresy)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-heresy < research-pending)
    (research-available ri-heresy)
    (not
      (research-completed ri-heresy)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heresy)
    (goal do-research 1)
    (research-available ri-heresy)
    (not
      (research-completed ri-heresy)
    )
=>
    (research ri-heresy)
)
(defrule
    (nand
      (current-age == imperial-age)
      (goal team-game 1)
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-banking)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-banking)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-coinage)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-coinage < research-pending)
    (research-available ri-coinage)
    (not
      (research-completed ri-coinage)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-coinage)
    (goal do-research 1)
    (research-available ri-coinage)
    (not
      (research-completed ri-coinage)
    )
=>
    (research ri-coinage)
)
(defrule
    (up-research-status c: ri-banking < research-pending)
    (research-available ri-banking)
    (not
      (research-completed ri-banking)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-banking)
    (goal do-research 1)
    (research-available ri-banking)
    (not
      (research-completed ri-banking)
    )
=>
    (research ri-banking)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-sultans)
      )
      (civ-selected indian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-sultans < research-pending)
    (research-available ri-sultans)
    (not
      (research-completed ri-sultans)
    )
    (civ-selected indian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-sultans)
    (goal do-research 1)
    (research-available ri-sultans)
    (not
      (research-completed ri-sultans)
    )
    (civ-selected indian)
=>
    (research ri-sultans)
)
(defrule
    (nor
      (building-type-count town-center > 0)
      (game-time >= 8)
    )
=>
    (up-jump-rule 3254)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age >= feudal-age)
      (unit-available villager)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-loom)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-loom < research-pending)
    (research-available ri-loom)
    (not
      (research-completed ri-loom)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-loom)
    (goal do-research 1)
    (research-available ri-loom)
    (not
      (research-completed ri-loom)
    )
=>
    (research ri-loom)
)
(defrule
    (nand
      (current-age == feudal-age)
      (unit-available villager)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-wheel-barrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-wheel-barrow < research-pending)
    (research-available ri-wheel-barrow)
    (not
      (research-completed ri-wheel-barrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-wheel-barrow)
    (goal do-research 1)
    (research-available ri-wheel-barrow)
    (not
      (research-completed ri-wheel-barrow)
    )
=>
    (research ri-wheel-barrow)
)
(defrule
    (nand
      (current-age == feudal-age)
      (unit-available villager)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-double-bit-axe)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (up-research-status c: ri-double-bit-axe < research-pending)
    (research-available ri-double-bit-axe)
    (not
      (research-completed ri-double-bit-axe)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-bit-axe)
    (goal do-research 1)
    (research-available ri-double-bit-axe)
    (not
      (research-completed ri-double-bit-axe)
    )
=>
    (research ri-double-bit-axe)
)
(defrule
    (nand
      (current-age == feudal-age)
      (unit-available villager)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-horse-collar)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: ri-horse-collar < research-pending)
    (research-available ri-horse-collar)
    (not
      (research-completed ri-horse-collar)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-horse-collar)
    (goal do-research 1)
    (research-available ri-horse-collar)
    (not
      (research-completed ri-horse-collar)
    )
=>
    (research ri-horse-collar)
)
(defrule
    (nand
      (resource-found gold)
      (and
        (current-age == feudal-age)
        (unit-available villager)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-gold-mining)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mining-camp)
    (up-pending-objects c: mining-camp < 5)
    (building-type-count-total mining-camp < 1)
    (building-type-count-total mining-camp == 0)
=>
    (build mining-camp)
)
(defrule
    (up-research-status c: ri-gold-mining < research-pending)
    (research-available ri-gold-mining)
    (not
      (research-completed ri-gold-mining)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-gold-mining)
    (goal do-research 1)
    (research-available ri-gold-mining)
    (not
      (research-completed ri-gold-mining)
    )
=>
    (research ri-gold-mining)
)
(defrule
    (nand
      (current-age == castle-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (unit-available villager)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bow-saw)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (research-completed ri-bow-saw)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-double-bit-axe)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (up-research-status c: ri-double-bit-axe < research-pending)
    (research-available ri-double-bit-axe)
    (not
      (research-completed ri-double-bit-axe)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-bit-axe)
    (goal do-research 1)
    (research-available ri-double-bit-axe)
    (not
      (research-completed ri-double-bit-axe)
    )
=>
    (research ri-double-bit-axe)
)
(defrule
    (up-research-status c: ri-bow-saw < research-pending)
    (research-available ri-bow-saw)
    (not
      (research-completed ri-bow-saw)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bow-saw)
    (goal do-research 1)
    (research-available ri-bow-saw)
    (not
      (research-completed ri-bow-saw)
    )
=>
    (research ri-bow-saw)
)
(defrule
    (nand
      (current-age == castle-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (unit-available villager)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-heavy-plow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (research-completed ri-heavy-plow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-horse-collar)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: ri-horse-collar < research-pending)
    (research-available ri-horse-collar)
    (not
      (research-completed ri-horse-collar)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-horse-collar)
    (goal do-research 1)
    (research-available ri-horse-collar)
    (not
      (research-completed ri-horse-collar)
    )
=>
    (research ri-horse-collar)
)
(defrule
    (up-research-status c: ri-heavy-plow < research-pending)
    (research-available ri-heavy-plow)
    (not
      (research-completed ri-heavy-plow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-plow)
    (goal do-research 1)
    (research-available ri-heavy-plow)
    (not
      (research-completed ri-heavy-plow)
    )
=>
    (research ri-heavy-plow)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (and
          (not
            (current-age == castle-age)
          )
          (unit-available villager)
        )
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-hand-cart)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-hand-cart)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-wheel-barrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-wheel-barrow < research-pending)
    (research-available ri-wheel-barrow)
    (not
      (research-completed ri-wheel-barrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-wheel-barrow)
    (goal do-research 1)
    (research-available ri-wheel-barrow)
    (not
      (research-completed ri-wheel-barrow)
    )
=>
    (research ri-wheel-barrow)
)
(defrule
    (up-research-status c: ri-hand-cart < research-pending)
    (research-available ri-hand-cart)
    (not
      (research-completed ri-hand-cart)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-hand-cart)
    (goal do-research 1)
    (research-available ri-hand-cart)
    (not
      (research-completed ri-hand-cart)
    )
=>
    (research ri-hand-cart)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (and
          (not
            (current-age == castle-age)
          )
          (unit-available villager)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-two-man-saw)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (research-completed ri-two-man-saw)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bow-saw)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (research-completed ri-bow-saw)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-double-bit-axe)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 1)
    (building-type-count-total lumber-camp == 0)
=>
    (build lumber-camp)
)
(defrule
    (up-research-status c: ri-double-bit-axe < research-pending)
    (research-available ri-double-bit-axe)
    (not
      (research-completed ri-double-bit-axe)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-bit-axe)
    (goal do-research 1)
    (research-available ri-double-bit-axe)
    (not
      (research-completed ri-double-bit-axe)
    )
=>
    (research ri-double-bit-axe)
)
(defrule
    (up-research-status c: ri-bow-saw < research-pending)
    (research-available ri-bow-saw)
    (not
      (research-completed ri-bow-saw)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bow-saw)
    (goal do-research 1)
    (research-available ri-bow-saw)
    (not
      (research-completed ri-bow-saw)
    )
=>
    (research ri-bow-saw)
)
(defrule
    (up-research-status c: ri-two-man-saw < research-pending)
    (research-available ri-two-man-saw)
    (not
      (research-completed ri-two-man-saw)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-two-man-saw)
    (goal do-research 1)
    (research-available ri-two-man-saw)
    (not
      (research-completed ri-two-man-saw)
    )
=>
    (research ri-two-man-saw)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (and
          (not
            (current-age == castle-age)
          )
          (unit-available villager)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-crop-rotation)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (research-completed ri-crop-rotation)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-heavy-plow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (research-completed ri-heavy-plow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-horse-collar)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
=>
    (build mill)
)
(defrule
    (up-research-status c: ri-horse-collar < research-pending)
    (research-available ri-horse-collar)
    (not
      (research-completed ri-horse-collar)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-horse-collar)
    (goal do-research 1)
    (research-available ri-horse-collar)
    (not
      (research-completed ri-horse-collar)
    )
=>
    (research ri-horse-collar)
)
(defrule
    (up-research-status c: ri-heavy-plow < research-pending)
    (research-available ri-heavy-plow)
    (not
      (research-completed ri-heavy-plow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-plow)
    (goal do-research 1)
    (research-available ri-heavy-plow)
    (not
      (research-completed ri-heavy-plow)
    )
=>
    (research ri-heavy-plow)
)
(defrule
    (up-research-status c: ri-crop-rotation < research-pending)
    (research-available ri-crop-rotation)
    (not
      (research-completed ri-crop-rotation)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-crop-rotation)
    (goal do-research 1)
    (research-available ri-crop-rotation)
    (not
      (research-completed ri-crop-rotation)
    )
=>
    (research ri-crop-rotation)
)
(defrule
    (nand
      (resource-found gold)
      (and
        (current-age >= castle-age)
        (unit-available villager)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-gold-shaft-mining)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mining-camp)
    (up-pending-objects c: mining-camp < 5)
    (building-type-count-total mining-camp < 1)
    (building-type-count-total mining-camp == 0)
=>
    (build mining-camp)
)
(defrule
    (research-completed ri-gold-shaft-mining)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-gold-mining)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build mining-camp)
    (up-pending-objects c: mining-camp < 5)
    (building-type-count-total mining-camp < 1)
    (building-type-count-total mining-camp == 0)
=>
    (build mining-camp)
)
(defrule
    (up-research-status c: ri-gold-mining < research-pending)
    (research-available ri-gold-mining)
    (not
      (research-completed ri-gold-mining)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-gold-mining)
    (goal do-research 1)
    (research-available ri-gold-mining)
    (not
      (research-completed ri-gold-mining)
    )
=>
    (research ri-gold-mining)
)
(defrule
    (up-research-status c: ri-gold-shaft-mining < research-pending)
    (research-available ri-gold-shaft-mining)
    (not
      (research-completed ri-gold-shaft-mining)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-gold-shaft-mining)
    (goal do-research 1)
    (research-available ri-gold-shaft-mining)
    (not
      (research-completed ri-gold-shaft-mining)
    )
=>
    (research ri-gold-shaft-mining)
)
(defrule
    (unit-available villager)
=>
    (set-goal desired-villagers-with-subtractions 0)
    (disable-self)
)
(defrule
    (unit-available villager)
=>
    (up-modify-goal desired-villagers-with-subtractions g:= desired-villagers)
)
(defrule
    (goal produce-trade-carts 1)
    (unit-available villager)
=>
    (up-modify-goal desired-villagers-with-subtractions g:- desired-trade-carts)
)
(defrule
    (goal produce-fishing-ships 1)
    (unit-available villager)
=>
    (up-modify-goal desired-villagers-with-subtractions g:- desired-fishing-ships)
)
(defrule
    (building-type-count feitoria >= 1)
    (unit-available villager)
=>
    (set-goal feitoria-pop-usage 0)
    (disable-self)
)
(defrule
    (building-type-count feitoria >= 1)
    (unit-available villager)
=>
    (up-get-fact building-type-count feitoria feitoria-pop-usage)
    (up-modify-goal feitoria-pop-usage c:* 20)
    (up-modify-goal desired-villagers-with-subtractions g:- feitoria-pop-usage)
)
(defrule
    (can-train villager)
    (up-compare-goal total-villagers g:< desired-villagers-with-subtractions)
    (unit-available villager)
=>
    (train villager)
)
(defrule
    (up-compare-goal total-villagers g:> desired-villagers-with-subtractions)
    (up-compare-goal population-space-remaining c:<= 10)
    (not
      (up-compare-goal total-villagers g:< desired-villagers-with-subtractions)
    )
    (unit-available villager)
=>
    (delete-unit villager)
)
(defrule
    (nand
      (and
        (or
          (game-time >= 60)
          (or
            (civ-selected mayan)
            (civ-selected chinese)
          )
        )
        (up-pending-objects c: villager == 0)
      )
      (unit-available villager)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-loom)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
    (building-type-count-total town-center == 0)
    (building-type-count-total town-center-foundation == 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-loom < research-pending)
    (research-available ri-loom)
    (not
      (research-completed ri-loom)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-loom)
    (goal do-research 1)
    (research-available ri-loom)
    (not
      (research-completed ri-loom)
    )
=>
    (research ri-loom)
)
(defrule
    (not
      (goal produce-trade-carts 1)
    )
=>
    (up-jump-rule 17)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available trade-cart)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-caravan)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount >= 200)
    (building-type-count-total market == 0)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-caravan < research-pending)
    (research-available ri-caravan)
    (not
      (research-completed ri-caravan)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-caravan)
    (goal do-research 1)
    (research-available ri-caravan)
    (not
      (research-completed ri-caravan)
    )
=>
    (research ri-caravan)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available trade-cart)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-silk-road)
      )
      (civ-selected italian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-silk-road < research-pending)
    (research-available ri-silk-road)
    (not
      (research-completed ri-silk-road)
    )
    (civ-selected italian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-silk-road)
    (goal do-research 1)
    (research-available ri-silk-road)
    (not
      (research-completed ri-silk-road)
    )
    (civ-selected italian)
=>
    (research ri-silk-road)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 2)
    (unit-available trade-cart)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-train trade-cart)
    (up-compare-goal total-trade-carts g:< desired-trade-carts)
    (unit-type-count dead-trade-cart == 0)
    (unit-type-count dead-trade-cart-loaded == 0)
    (unit-available trade-cart)
=>
    (train trade-cart)
)
(defrule
    (not
      (goal produce-fishing-ships 1)
    )
=>
    (up-jump-rule 20)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available fishing-ship)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-gillnets)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-gillnets < research-pending)
    (research-available ri-gillnets)
    (not
      (research-completed ri-gillnets)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-gillnets)
    (goal do-research 1)
    (research-available ri-gillnets)
    (not
      (research-completed ri-gillnets)
    )
=>
    (research ri-gillnets)
)
(defrule
    (not
      (unit-available fishing-ship)
    )
=>
    (up-jump-rule 12)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-thalassocracy)
      )
      (civ-selected malay)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-thalassocracy < research-pending)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thalassocracy)
    (goal do-research 1)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (research ri-thalassocracy)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (up-compare-goal dock-count g:< desired-military-buildings-per-type)
    (up-pending-objects c: dock < 1)
=>
    (build dock)
)
(defrule
    (can-train fishing-ship)
    (up-compare-goal total-fishing-ships g:< desired-fishing-ships)
    (unit-available fishing-ship)
=>
    (train fishing-ship)
)
(defrule
    (true)
=>
    (set-goal old-produce-units 0)
    (set-goal current-unit-amount 0)
    (set-goal expected-units-per-type 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal total-type-production 0)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available archer-line)
=>
    (up-modify-goal total-type-production g:+ produce-archers)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available hand-cannoneer)
=>
    (up-modify-goal total-type-production g:+ produce-hand-cannoneers)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available skirmisher-line)
=>
    (up-modify-goal total-type-production g:+ produce-skirmishers)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available genitour-line)
=>
    (up-modify-goal total-type-production g:+ produce-genitours)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available cavalry-archer-line)
=>
    (up-modify-goal total-type-production g:+ produce-cavalry-archers)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available militiaman-line)
=>
    (up-modify-goal total-type-production g:+ produce-militia)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available condottiero)
=>
    (up-modify-goal total-type-production g:+ produce-condottiero)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available spearman-line)
=>
    (up-modify-goal total-type-production g:+ produce-spearmen)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available eagle-warrior-line)
=>
    (up-modify-goal total-type-production g:+ produce-eagles)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available scout-cavalry-line)
=>
    (up-modify-goal total-type-production g:+ produce-scouts)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available knight-line)
=>
    (up-modify-goal total-type-production g:+ produce-knights)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available camel-line)
=>
    (up-modify-goal total-type-production g:+ produce-camels)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available battle-elephant-line)
=>
    (up-modify-goal total-type-production g:+ produce-battle-elephants)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available battering-ram-line)
=>
    (up-modify-goal total-type-production g:+ produce-battering-rams)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available mangonel-line)
=>
    (up-modify-goal total-type-production g:+ produce-mangonels)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available scorpion-line)
=>
    (up-modify-goal total-type-production g:+ produce-scorpions)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available bombard-cannon)
=>
    (up-modify-goal total-type-production g:+ produce-bombard-cannons)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available trebuchet)
=>
    (up-modify-goal total-type-production g:+ produce-trebuchets)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available my-unique-unit-line)
=>
    (up-modify-goal total-type-production g:+ produce-unique-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available monk)
=>
    (up-modify-goal total-type-production g:+ produce-monks)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available missionary)
=>
    (up-modify-goal total-type-production g:+ produce-missionaries)
)
(defrule
    (not
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available transport-ship)
=>
    (up-modify-goal total-type-production g:+ produce-transport-ships)
)
(defrule
    (not
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available galley-line)
=>
    (up-modify-goal total-type-production g:+ produce-galleys)
)
(defrule
    (not
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available fire-ship-line)
=>
    (up-modify-goal total-type-production g:+ produce-fire-ships)
)
(defrule
    (not
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available cannon-galleon-line)
=>
    (up-modify-goal total-type-production g:+ produce-cannon-galleons)
)
(defrule
    (not
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (unit-available demolition-ship-line)
=>
    (up-modify-goal total-type-production g:+ produce-demolition-ships)
)
(defrule
    (true)
=>
    (up-get-fact military-population 0 expected-units-per-type)
    (up-modify-goal expected-units-per-type g:/ total-type-production)
)
(defrule
    (nand
      (or
        (goal produce-bombard-cannons 1)
        (goal produce-hand-cannoneers 1)
      )
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (nand
      (and
        (goal produce-cannon-galleons 1)
        (and
          (goal enough-wood-for-units 1)
          (goal enough-gold-for-units 1)
        )
      )
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-cannon-galleon)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (research-completed ri-cannon-galleon)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (up-research-status c: ri-cannon-galleon < research-pending)
    (research-available ri-cannon-galleon)
    (not
      (research-completed ri-cannon-galleon)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-cannon-galleon)
    (goal do-research 1)
    (research-available ri-cannon-galleon)
    (not
      (research-completed ri-cannon-galleon)
    )
=>
    (research ri-cannon-galleon)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 129)
)
(defrule
    (goal produce-archers 1)
    (unit-available archer-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count archer-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-archers 1)
    (unit-available archer-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-archers 1)
      (unit-available archer-line)
    )
=>
    (up-jump-rule 125)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == castle-age)
      (unit-available archer-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-crossbow)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-crossbow < research-pending)
    (research-available ri-crossbow)
    (not
      (research-completed ri-crossbow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-crossbow)
    (goal do-research 1)
    (research-available ri-crossbow)
    (not
      (research-completed ri-crossbow)
    )
=>
    (research ri-crossbow)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (unit-available archer-line)
      )
    )
=>
    (up-jump-rule 13)
)
(defrule
    (research-completed ri-arbalest)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-arbalest)
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-crossbow)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-crossbow < research-pending)
    (research-available ri-crossbow)
    (not
      (research-completed ri-crossbow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-crossbow)
    (goal do-research 1)
    (research-available ri-crossbow)
    (not
      (research-completed ri-crossbow)
    )
=>
    (research ri-crossbow)
)
(defrule
    (up-research-status c: ri-arbalest < research-pending)
    (research-available ri-arbalest)
    (not
      (research-completed ri-arbalest)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arbalest)
    (goal do-research 1)
    (research-available ri-arbalest)
    (not
      (research-completed ri-arbalest)
    )
=>
    (research ri-arbalest)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available archer-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-yeomen)
      )
      (civ-selected briton)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-yeomen < research-pending)
    (research-available ri-yeomen)
    (not
      (research-completed ri-yeomen)
    )
    (civ-selected briton)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-yeomen)
    (goal do-research 1)
    (research-available ri-yeomen)
    (not
      (research-completed ri-yeomen)
    )
    (civ-selected briton)
=>
    (research ri-yeomen)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available archer-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-pavise)
      )
      (civ-selected italian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-pavise < research-pending)
    (research-available ri-pavise)
    (not
      (research-completed ri-pavise)
    )
    (civ-selected italian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-pavise)
    (goal do-research 1)
    (research-available ri-pavise)
    (not
      (research-completed ri-pavise)
    )
    (civ-selected italian)
=>
    (research ri-pavise)
)
(defrule
    (not
      (unit-available archer-line)
    )
=>
    (up-jump-rule 81)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (research ri-bracer)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (research ri-ring-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-thumb-ring)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (research ri-thumb-ring)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-ballistics)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (can-train archer-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available archer-line)
=>
    (train archer-line)
)
(defrule
    (goal produce-archers 1)
    (unit-available archer-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 37)
)
(defrule
    (goal produce-hand-cannoneers 1)
    (unit-available hand-cannoneer)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count hand-cannoneer current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-hand-cannoneers 1)
    (unit-available hand-cannoneer)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-hand-cannoneers 1)
      (unit-available hand-cannoneer)
    )
=>
    (up-jump-rule 33)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available hand-cannoneer)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-shatagni)
      )
      (civ-selected indian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-shatagni < research-pending)
    (research-available ri-shatagni)
    (not
      (research-completed ri-shatagni)
    )
    (civ-selected indian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shatagni)
    (goal do-research 1)
    (research-available ri-shatagni)
    (not
      (research-completed ri-shatagni)
    )
    (civ-selected indian)
=>
    (research ri-shatagni)
)
(defrule
    (not
      (unit-available hand-cannoneer)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (unit-available hand-cannoneer)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (unit-available hand-cannoneer)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
    (unit-available hand-cannoneer)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (not
      (unit-available hand-cannoneer)
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (research ri-ring-archer-armor)
)
(defrule
    (can-train hand-cannoneer)
    (goal produce-units 1)
    (goal enough-food-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available hand-cannoneer)
=>
    (train hand-cannoneer)
)
(defrule
    (goal produce-hand-cannoneers 1)
    (unit-available hand-cannoneer)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 129)
)
(defrule
    (goal produce-skirmishers 1)
    (unit-available skirmisher-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count skirmisher-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-skirmishers 1)
    (unit-available skirmisher-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-skirmishers 1)
      (unit-available skirmisher-line)
    )
=>
    (up-jump-rule 125)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == castle-age)
      (unit-available skirmisher-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-elite-skirmisher)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-elite-skirmisher < research-pending)
    (research-available ri-elite-skirmisher)
    (not
      (research-completed ri-elite-skirmisher)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-skirmisher)
    (goal do-research 1)
    (research-available ri-elite-skirmisher)
    (not
      (research-completed ri-elite-skirmisher)
    )
=>
    (research ri-elite-skirmisher)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (unit-available skirmisher-line)
      )
    )
=>
    (up-jump-rule 13)
)
(defrule
    (research-completed ri-imperial-skirmisher)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-imperial-skirmisher)
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-elite-skirmisher)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-elite-skirmisher < research-pending)
    (research-available ri-elite-skirmisher)
    (not
      (research-completed ri-elite-skirmisher)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-skirmisher)
    (goal do-research 1)
    (research-available ri-elite-skirmisher)
    (not
      (research-completed ri-elite-skirmisher)
    )
=>
    (research ri-elite-skirmisher)
)
(defrule
    (up-research-status c: ri-imperial-skirmisher < research-pending)
    (research-available ri-imperial-skirmisher)
    (not
      (research-completed ri-imperial-skirmisher)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-imperial-skirmisher)
    (goal do-research 1)
    (research-available ri-imperial-skirmisher)
    (not
      (research-completed ri-imperial-skirmisher)
    )
=>
    (research ri-imperial-skirmisher)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available skirmisher-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-atlatl)
      )
      (civ-selected aztec)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-atlatl < research-pending)
    (research-available ri-atlatl)
    (not
      (research-completed ri-atlatl)
    )
    (civ-selected aztec)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-atlatl)
    (goal do-research 1)
    (research-available ri-atlatl)
    (not
      (research-completed ri-atlatl)
    )
    (civ-selected aztec)
=>
    (research ri-atlatl)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available skirmisher-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-andean-sling)
      )
      (civ-selected incan)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-andean-sling < research-pending)
    (research-available ri-andean-sling)
    (not
      (research-completed ri-andean-sling)
    )
    (civ-selected incan)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-andean-sling)
    (goal do-research 1)
    (research-available ri-andean-sling)
    (not
      (research-completed ri-andean-sling)
    )
    (civ-selected incan)
=>
    (research ri-andean-sling)
)
(defrule
    (not
      (unit-available skirmisher-line)
    )
=>
    (up-jump-rule 81)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (research ri-bracer)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (research ri-ring-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-thumb-ring)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (research ri-thumb-ring)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-ballistics)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (can-train skirmisher-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-food-for-units 1)
    (unit-available skirmisher-line)
=>
    (train skirmisher-line)
)
(defrule
    (goal produce-skirmishers 1)
    (unit-available skirmisher-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 127)
)
(defrule
    (goal produce-genitours 1)
    (unit-available genitour-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count genitour-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-genitours 1)
    (unit-available genitour-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-genitours 1)
      (unit-available genitour-line)
    )
=>
    (up-jump-rule 123)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available genitour-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-elite-genitour)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-elite-genitour < research-pending)
    (research-available ri-elite-genitour)
    (not
      (research-completed ri-elite-genitour)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-genitour)
    (goal do-research 1)
    (research-available ri-elite-genitour)
    (not
      (research-completed ri-elite-genitour)
    )
=>
    (research ri-elite-genitour)
)
(defrule
    (not
      (unit-available genitour-line)
    )
=>
    (up-jump-rule 111)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (research ri-bracer)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (research ri-ring-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-thumb-ring)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (research ri-thumb-ring)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-ballistics)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (not
      (current-age >= feudal-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-bloodlines)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (research ri-bloodlines)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-husbandry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (research ri-husbandry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-sipahi)
      )
      (civ-selected turkish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-sipahi < research-pending)
    (research-available ri-sipahi)
    (not
      (research-completed ri-sipahi)
    )
    (civ-selected turkish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-sipahi)
    (goal do-research 1)
    (research-available ri-sipahi)
    (not
      (research-completed ri-sipahi)
    )
    (civ-selected turkish)
=>
    (research ri-sipahi)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-parthian-tactics)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-parthian-tactics < research-pending)
    (research-available ri-parthian-tactics)
    (not
      (research-completed ri-parthian-tactics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-parthian-tactics)
    (goal do-research 1)
    (research-available ri-parthian-tactics)
    (not
      (research-completed ri-parthian-tactics)
    )
=>
    (research ri-parthian-tactics)
)
(defrule
    (can-train genitour-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-food-for-units 1)
    (unit-available genitour-line)
=>
    (train genitour-line)
)
(defrule
    (goal produce-genitours 1)
    (unit-available genitour-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 136)
)
(defrule
    (goal produce-cavalry-archers 1)
    (unit-available cavalry-archer-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count cavalry-archer-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-cavalry-archers 1)
    (unit-available cavalry-archer-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-cavalry-archers 1)
      (unit-available cavalry-archer-line)
    )
=>
    (up-jump-rule 132)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available cavalry-archer-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-heavy-cavalry-archer)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-heavy-cavalry-archer < research-pending)
    (research-available ri-heavy-cavalry-archer)
    (not
      (research-completed ri-heavy-cavalry-archer)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-cavalry-archer)
    (goal do-research 1)
    (research-available ri-heavy-cavalry-archer)
    (not
      (research-completed ri-heavy-cavalry-archer)
    )
=>
    (research ri-heavy-cavalry-archer)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available cavalry-archer-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-recurve-bow)
      )
      (civ-selected magyar)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-recurve-bow < research-pending)
    (research-available ri-recurve-bow)
    (not
      (research-completed ri-recurve-bow)
    )
    (civ-selected magyar)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-recurve-bow)
    (goal do-research 1)
    (research-available ri-recurve-bow)
    (not
      (research-completed ri-recurve-bow)
    )
    (civ-selected magyar)
=>
    (research ri-recurve-bow)
)
(defrule
    (not
      (unit-available cavalry-archer-line)
    )
=>
    (up-jump-rule 111)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (research ri-bracer)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (research ri-ring-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-thumb-ring)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (research ri-thumb-ring)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-ballistics)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (not
      (current-age >= feudal-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-bloodlines)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (research ri-bloodlines)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-husbandry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (research ri-husbandry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-sipahi)
      )
      (civ-selected turkish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-sipahi < research-pending)
    (research-available ri-sipahi)
    (not
      (research-completed ri-sipahi)
    )
    (civ-selected turkish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-sipahi)
    (goal do-research 1)
    (research-available ri-sipahi)
    (not
      (research-completed ri-sipahi)
    )
    (civ-selected turkish)
=>
    (research ri-sipahi)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-parthian-tactics)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-parthian-tactics < research-pending)
    (research-available ri-parthian-tactics)
    (not
      (research-completed ri-parthian-tactics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-parthian-tactics)
    (goal do-research 1)
    (research-available ri-parthian-tactics)
    (not
      (research-completed ri-parthian-tactics)
    )
=>
    (research ri-parthian-tactics)
)
(defrule
    (can-train cavalry-archer-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available cavalry-archer-line)
=>
    (train cavalry-archer-line)
)
(defrule
    (goal produce-cavalry-archers 1)
    (unit-available cavalry-archer-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 147)
)
(defrule
    (goal produce-militia 1)
    (unit-available militiaman-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count militiaman-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-militia 1)
    (unit-available militiaman-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-militia 1)
      (unit-available militiaman-line)
    )
=>
    (up-jump-rule 143)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == feudal-age)
      (unit-available militiaman-line)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-man-at-arms)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-man-at-arms < research-pending)
    (research-available ri-man-at-arms)
    (not
      (research-completed ri-man-at-arms)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-man-at-arms)
    (goal do-research 1)
    (research-available ri-man-at-arms)
    (not
      (research-completed ri-man-at-arms)
    )
=>
    (research ri-man-at-arms)
)
(defrule
    (nand
      (current-age == castle-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (unit-available militiaman-line)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-long-swordsman)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-long-swordsman)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-man-at-arms)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-man-at-arms < research-pending)
    (research-available ri-man-at-arms)
    (not
      (research-completed ri-man-at-arms)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-man-at-arms)
    (goal do-research 1)
    (research-available ri-man-at-arms)
    (not
      (research-completed ri-man-at-arms)
    )
=>
    (research ri-man-at-arms)
)
(defrule
    (up-research-status c: ri-long-swordsman < research-pending)
    (research-available ri-long-swordsman)
    (not
      (research-completed ri-long-swordsman)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-long-swordsman)
    (goal do-research 1)
    (research-available ri-long-swordsman)
    (not
      (research-completed ri-long-swordsman)
    )
=>
    (research ri-long-swordsman)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (and
          (not
            (current-age == castle-age)
          )
          (unit-available militiaman-line)
        )
      )
    )
=>
    (up-jump-rule 19)
)
(defrule
    (research-completed ri-champion)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-champion)
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-two-handed-swordsman)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-two-handed-swordsman)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-long-swordsman)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-long-swordsman)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-man-at-arms)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-man-at-arms < research-pending)
    (research-available ri-man-at-arms)
    (not
      (research-completed ri-man-at-arms)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-man-at-arms)
    (goal do-research 1)
    (research-available ri-man-at-arms)
    (not
      (research-completed ri-man-at-arms)
    )
=>
    (research ri-man-at-arms)
)
(defrule
    (up-research-status c: ri-long-swordsman < research-pending)
    (research-available ri-long-swordsman)
    (not
      (research-completed ri-long-swordsman)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-long-swordsman)
    (goal do-research 1)
    (research-available ri-long-swordsman)
    (not
      (research-completed ri-long-swordsman)
    )
=>
    (research ri-long-swordsman)
)
(defrule
    (up-research-status c: ri-two-handed-swordsman < research-pending)
    (research-available ri-two-handed-swordsman)
    (not
      (research-completed ri-two-handed-swordsman)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-two-handed-swordsman)
    (goal do-research 1)
    (research-available ri-two-handed-swordsman)
    (not
      (research-completed ri-two-handed-swordsman)
    )
=>
    (research ri-two-handed-swordsman)
)
(defrule
    (up-research-status c: ri-champion < research-pending)
    (research-available ri-champion)
    (not
      (research-completed ri-champion)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-champion)
    (goal do-research 1)
    (research-available ri-champion)
    (not
      (research-completed ri-champion)
    )
=>
    (research ri-champion)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (and
          (not
            (current-age == castle-age)
          )
          (unit-available militiaman-line)
        )
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-forced-levy)
      )
      (civ-selected malay)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-forced-levy < research-pending)
    (research-available ri-forced-levy)
    (not
      (research-completed ri-forced-levy)
    )
    (civ-selected malay)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forced-levy)
    (goal do-research 1)
    (research-available ri-forced-levy)
    (not
      (research-completed ri-forced-levy)
    )
    (civ-selected malay)
=>
    (research ri-forced-levy)
)
(defrule
    (not
      (unit-available militiaman-line)
    )
=>
    (up-jump-rule 96)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (up-research-status c: ri-plate-mail < research-pending)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (goal do-research 1)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (research ri-plate-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-perfusion)
      )
      (civ-selected gothic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-perfusion < research-pending)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (goal do-research 1)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (research ri-perfusion)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-tracking)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-tracking < research-pending)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (goal do-research 1)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (research ri-tracking)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-squires)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-squires < research-pending)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (goal do-research 1)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (research ri-squires)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-arson)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-arson < research-pending)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (goal do-research 1)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (research ri-arson)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-garland-wars)
      )
      (civ-selected aztec)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-garland-wars < research-pending)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (goal do-research 1)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (research ri-garland-wars)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-train militiaman-line)
    (goal produce-units 1)
    (goal enough-food-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available militiaman-line)
=>
    (train militiaman-line)
)
(defrule
    (goal produce-militia 1)
    (unit-available militiaman-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 103)
)
(defrule
    (goal produce-condottiero 1)
    (unit-available condottiero)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count condottiero current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-condottiero 1)
    (unit-available condottiero)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-condottiero 1)
      (unit-available condottiero)
    )
=>
    (up-jump-rule 99)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (not
      (unit-available condottiero)
    )
=>
    (up-jump-rule 96)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (up-research-status c: ri-plate-mail < research-pending)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (goal do-research 1)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (research ri-plate-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-perfusion)
      )
      (civ-selected gothic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-perfusion < research-pending)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (goal do-research 1)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (research ri-perfusion)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-tracking)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-tracking < research-pending)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (goal do-research 1)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (research ri-tracking)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-squires)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-squires < research-pending)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (goal do-research 1)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (research ri-squires)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-arson)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-arson < research-pending)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (goal do-research 1)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (research ri-arson)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-garland-wars)
      )
      (civ-selected aztec)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-garland-wars < research-pending)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (goal do-research 1)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (research ri-garland-wars)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-train condottiero)
    (goal produce-units 1)
    (goal enough-food-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available condottiero)
=>
    (train condottiero)
)
(defrule
    (goal produce-condottiero 1)
    (unit-available condottiero)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 118)
)
(defrule
    (goal produce-spearmen 1)
    (unit-available spearman-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count spearman-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-spearmen 1)
    (unit-available spearman-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-spearmen 1)
      (unit-available spearman-line)
    )
=>
    (up-jump-rule 114)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == castle-age)
      (unit-available spearman-line)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-pikeman)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-pikeman < research-pending)
    (research-available ri-pikeman)
    (not
      (research-completed ri-pikeman)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-pikeman)
    (goal do-research 1)
    (research-available ri-pikeman)
    (not
      (research-completed ri-pikeman)
    )
=>
    (research ri-pikeman)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (unit-available spearman-line)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-halberdier)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-halberdier)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-pikeman)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-pikeman < research-pending)
    (research-available ri-pikeman)
    (not
      (research-completed ri-pikeman)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-pikeman)
    (goal do-research 1)
    (research-available ri-pikeman)
    (not
      (research-completed ri-pikeman)
    )
=>
    (research ri-pikeman)
)
(defrule
    (up-research-status c: ri-halberdier < research-pending)
    (research-available ri-halberdier)
    (not
      (research-completed ri-halberdier)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-halberdier)
    (goal do-research 1)
    (research-available ri-halberdier)
    (not
      (research-completed ri-halberdier)
    )
=>
    (research ri-halberdier)
)
(defrule
    (not
      (unit-available spearman-line)
    )
=>
    (up-jump-rule 96)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (up-research-status c: ri-plate-mail < research-pending)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (goal do-research 1)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (research ri-plate-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-perfusion)
      )
      (civ-selected gothic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-perfusion < research-pending)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (goal do-research 1)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (research ri-perfusion)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-tracking)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-tracking < research-pending)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (goal do-research 1)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (research ri-tracking)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-squires)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-squires < research-pending)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (goal do-research 1)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (research ri-squires)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-arson)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-arson < research-pending)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (goal do-research 1)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (research ri-arson)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-garland-wars)
      )
      (civ-selected aztec)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-garland-wars < research-pending)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (goal do-research 1)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (research ri-garland-wars)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-train spearman-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-food-for-units 1)
    (unit-available spearman-line)
=>
    (train spearman-line)
)
(defrule
    (goal produce-spearmen 1)
    (unit-available spearman-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 136)
)
(defrule
    (goal produce-eagles 1)
    (unit-available eagle-warrior-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count eagle-warrior-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-eagles 1)
    (unit-available eagle-warrior-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-eagles 1)
      (unit-available eagle-warrior-line)
    )
=>
    (up-jump-rule 132)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == castle-age)
      (unit-available eagle-warrior-line)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-eagle-warrior)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-eagle-warrior < research-pending)
    (research-available ri-eagle-warrior)
    (not
      (research-completed ri-eagle-warrior)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-eagle-warrior)
    (goal do-research 1)
    (research-available ri-eagle-warrior)
    (not
      (research-completed ri-eagle-warrior)
    )
=>
    (research ri-eagle-warrior)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (unit-available eagle-warrior-line)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-elite-eagle-warrior)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-elite-eagle-warrior)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-eagle-warrior)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-eagle-warrior < research-pending)
    (research-available ri-eagle-warrior)
    (not
      (research-completed ri-eagle-warrior)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-eagle-warrior)
    (goal do-research 1)
    (research-available ri-eagle-warrior)
    (not
      (research-completed ri-eagle-warrior)
    )
=>
    (research ri-eagle-warrior)
)
(defrule
    (up-research-status c: ri-elite-eagle-warrior < research-pending)
    (research-available ri-elite-eagle-warrior)
    (not
      (research-completed ri-elite-eagle-warrior)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-eagle-warrior)
    (goal do-research 1)
    (research-available ri-elite-eagle-warrior)
    (not
      (research-completed ri-elite-eagle-warrior)
    )
=>
    (research ri-elite-eagle-warrior)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (unit-available eagle-warrior-line)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-couriers)
      )
      (civ-selected incan)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-couriers < research-pending)
    (research-available ri-couriers)
    (not
      (research-completed ri-couriers)
    )
    (civ-selected incan)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-couriers)
    (goal do-research 1)
    (research-available ri-couriers)
    (not
      (research-completed ri-couriers)
    )
    (civ-selected incan)
=>
    (research ri-couriers)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (unit-available eagle-warrior-line)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-el-dorado)
      )
      (civ-selected mayan)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-el-dorado < research-pending)
    (research-available ri-el-dorado)
    (not
      (research-completed ri-el-dorado)
    )
    (civ-selected mayan)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-el-dorado)
    (goal do-research 1)
    (research-available ri-el-dorado)
    (not
      (research-completed ri-el-dorado)
    )
    (civ-selected mayan)
=>
    (research ri-el-dorado)
)
(defrule
    (not
      (unit-available eagle-warrior-line)
    )
=>
    (up-jump-rule 96)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (up-research-status c: ri-plate-mail < research-pending)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (goal do-research 1)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (research ri-plate-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-perfusion)
      )
      (civ-selected gothic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-perfusion < research-pending)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (goal do-research 1)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (research ri-perfusion)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-tracking)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-tracking < research-pending)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (goal do-research 1)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (research ri-tracking)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-squires)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-squires < research-pending)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (goal do-research 1)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (research ri-squires)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-arson)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-arson < research-pending)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (goal do-research 1)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (research ri-arson)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-garland-wars)
      )
      (civ-selected aztec)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-garland-wars < research-pending)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (goal do-research 1)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (research ri-garland-wars)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-train eagle-warrior-line)
    (goal produce-units 1)
    (goal enough-food-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available eagle-warrior-line)
=>
    (train eagle-warrior-line)
)
(defrule
    (goal produce-eagles 1)
    (unit-available eagle-warrior-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 135)
)
(defrule
    (goal produce-scouts 1)
    (unit-available scout-cavalry-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count scout-cavalry-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-scouts 1)
    (unit-available scout-cavalry-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-scouts 1)
      (unit-available scout-cavalry-line)
    )
=>
    (up-jump-rule 131)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == castle-age)
      (unit-available scout-cavalry-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-light-cavalry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-light-cavalry < research-pending)
    (research-available ri-light-cavalry)
    (not
      (research-completed ri-light-cavalry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-light-cavalry)
    (goal do-research 1)
    (research-available ri-light-cavalry)
    (not
      (research-completed ri-light-cavalry)
    )
=>
    (research ri-light-cavalry)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (unit-available scout-cavalry-line)
      )
    )
=>
    (up-jump-rule 13)
)
(defrule
    (research-completed ri-hussar)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-hussar)
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-light-cavalry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-light-cavalry < research-pending)
    (research-available ri-light-cavalry)
    (not
      (research-completed ri-light-cavalry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-light-cavalry)
    (goal do-research 1)
    (research-available ri-light-cavalry)
    (not
      (research-completed ri-light-cavalry)
    )
=>
    (research ri-light-cavalry)
)
(defrule
    (up-research-status c: ri-hussar < research-pending)
    (research-available ri-hussar)
    (not
      (research-completed ri-hussar)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-hussar)
    (goal do-research 1)
    (research-available ri-hussar)
    (not
      (research-completed ri-hussar)
    )
=>
    (research ri-hussar)
)
(defrule
    (not
      (unit-available scout-cavalry-line)
    )
=>
    (up-jump-rule 105)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (research ri-plate-barding)
)
(defrule
    (not
      (current-age >= feudal-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-bloodlines)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (research ri-bloodlines)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-husbandry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (research ri-husbandry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-chivalry)
      )
      (civ-selected frankish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-chivalry < research-pending)
    (research-available ri-chivalry)
    (not
      (research-completed ri-chivalry)
    )
    (civ-selected frankish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chivalry)
    (goal do-research 1)
    (research-available ri-chivalry)
    (not
      (research-completed ri-chivalry)
    )
    (civ-selected frankish)
=>
    (research ri-chivalry)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-manipur-cavalry)
      )
      (civ-selected burmese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (research ri-manipur-cavalry)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-farimba)
      )
      (civ-selected malian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-farimba < research-pending)
    (research-available ri-farimba)
    (not
      (research-completed ri-farimba)
    )
    (civ-selected malian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-farimba)
    (goal do-research 1)
    (research-available ri-farimba)
    (not
      (research-completed ri-farimba)
    )
    (civ-selected malian)
=>
    (research ri-farimba)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (can-train scout-cavalry-line)
    (goal produce-units 1)
    (goal enough-food-for-units 1)
    (unit-available scout-cavalry-line)
=>
    (train scout-cavalry-line)
)
(defrule
    (goal produce-scouts 1)
    (unit-available scout-cavalry-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 128)
)
(defrule
    (goal produce-knights 1)
    (unit-available knight-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count knight-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-knights 1)
    (unit-available knight-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-knights 1)
      (unit-available knight-line)
    )
=>
    (up-jump-rule 124)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available knight-line)
    )
=>
    (up-jump-rule 13)
)
(defrule
    (research-completed ri-paladin)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-paladin)
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-cavalier)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-cavalier < research-pending)
    (research-available ri-cavalier)
    (not
      (research-completed ri-cavalier)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-cavalier)
    (goal do-research 1)
    (research-available ri-cavalier)
    (not
      (research-completed ri-cavalier)
    )
=>
    (research ri-cavalier)
)
(defrule
    (up-research-status c: ri-paladin < research-pending)
    (research-available ri-paladin)
    (not
      (research-completed ri-paladin)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-paladin)
    (goal do-research 1)
    (research-available ri-paladin)
    (not
      (research-completed ri-paladin)
    )
=>
    (research ri-paladin)
)
(defrule
    (not
      (unit-available knight-line)
    )
=>
    (up-jump-rule 105)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (research ri-plate-barding)
)
(defrule
    (not
      (current-age >= feudal-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-bloodlines)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (research ri-bloodlines)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-husbandry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (research ri-husbandry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-chivalry)
      )
      (civ-selected frankish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-chivalry < research-pending)
    (research-available ri-chivalry)
    (not
      (research-completed ri-chivalry)
    )
    (civ-selected frankish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chivalry)
    (goal do-research 1)
    (research-available ri-chivalry)
    (not
      (research-completed ri-chivalry)
    )
    (civ-selected frankish)
=>
    (research ri-chivalry)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-manipur-cavalry)
      )
      (civ-selected burmese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (research ri-manipur-cavalry)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-farimba)
      )
      (civ-selected malian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-farimba < research-pending)
    (research-available ri-farimba)
    (not
      (research-completed ri-farimba)
    )
    (civ-selected malian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-farimba)
    (goal do-research 1)
    (research-available ri-farimba)
    (not
      (research-completed ri-farimba)
    )
    (civ-selected malian)
=>
    (research ri-farimba)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (can-train knight-line)
    (goal produce-units 1)
    (goal enough-food-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available knight-line)
=>
    (train knight-line)
)
(defrule
    (goal produce-knights 1)
    (unit-available knight-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 135)
)
(defrule
    (goal produce-camels 1)
    (unit-available camel-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count camel-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-camels 1)
    (unit-available camel-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-camels 1)
      (unit-available camel-line)
    )
=>
    (up-jump-rule 131)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available camel-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-heavy-camel)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-heavy-camel < research-pending)
    (research-available ri-heavy-camel)
    (not
      (research-completed ri-heavy-camel)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-camel)
    (goal do-research 1)
    (research-available ri-heavy-camel)
    (not
      (research-completed ri-heavy-camel)
    )
=>
    (research ri-heavy-camel)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available camel-line)
    )
=>
    (up-jump-rule 13)
)
(defrule
    (research-completed ri-imperial-camel)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-imperial-camel)
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-heavy-camel)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-heavy-camel < research-pending)
    (research-available ri-heavy-camel)
    (not
      (research-completed ri-heavy-camel)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-camel)
    (goal do-research 1)
    (research-available ri-heavy-camel)
    (not
      (research-completed ri-heavy-camel)
    )
=>
    (research ri-heavy-camel)
)
(defrule
    (up-research-status c: ri-imperial-camel < research-pending)
    (research-available ri-imperial-camel)
    (not
      (research-completed ri-imperial-camel)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-imperial-camel)
    (goal do-research 1)
    (research-available ri-imperial-camel)
    (not
      (research-completed ri-imperial-camel)
    )
=>
    (research ri-imperial-camel)
)
(defrule
    (not
      (unit-available camel-line)
    )
=>
    (up-jump-rule 105)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (research ri-plate-barding)
)
(defrule
    (not
      (current-age >= feudal-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-bloodlines)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (research ri-bloodlines)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-husbandry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (research ri-husbandry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-chivalry)
      )
      (civ-selected frankish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-chivalry < research-pending)
    (research-available ri-chivalry)
    (not
      (research-completed ri-chivalry)
    )
    (civ-selected frankish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chivalry)
    (goal do-research 1)
    (research-available ri-chivalry)
    (not
      (research-completed ri-chivalry)
    )
    (civ-selected frankish)
=>
    (research ri-chivalry)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-manipur-cavalry)
      )
      (civ-selected burmese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (research ri-manipur-cavalry)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-farimba)
      )
      (civ-selected malian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-farimba < research-pending)
    (research-available ri-farimba)
    (not
      (research-completed ri-farimba)
    )
    (civ-selected malian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-farimba)
    (goal do-research 1)
    (research-available ri-farimba)
    (not
      (research-completed ri-farimba)
    )
    (civ-selected malian)
=>
    (research ri-farimba)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (can-train camel-line)
    (goal produce-units 1)
    (goal enough-food-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available camel-line)
=>
    (train camel-line)
)
(defrule
    (goal produce-camels 1)
    (unit-available camel-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 148)
)
(defrule
    (goal produce-battle-elephants 1)
    (unit-available battle-elephant-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count battle-elephant-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-battle-elephants 1)
    (unit-available battle-elephant-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-battle-elephants 1)
      (unit-available battle-elephant-line)
    )
=>
    (up-jump-rule 144)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available battle-elephant-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-howdah)
      )
      (civ-selected burmese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-howdah < research-pending)
    (research-available ri-howdah)
    (not
      (research-completed ri-howdah)
    )
    (civ-selected burmese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-howdah)
    (goal do-research 1)
    (research-available ri-howdah)
    (not
      (research-completed ri-howdah)
    )
    (civ-selected burmese)
=>
    (research ri-howdah)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available battle-elephant-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-tusk-swords)
      )
      (civ-selected khmer)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-tusk-swords < research-pending)
    (research-available ri-tusk-swords)
    (not
      (research-completed ri-tusk-swords)
    )
    (civ-selected khmer)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tusk-swords)
    (goal do-research 1)
    (research-available ri-tusk-swords)
    (not
      (research-completed ri-tusk-swords)
    )
    (civ-selected khmer)
=>
    (research ri-tusk-swords)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available battle-elephant-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-chatras)
      )
      (civ-selected vietnamese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-chatras < research-pending)
    (research-available ri-chatras)
    (not
      (research-completed ri-chatras)
    )
    (civ-selected vietnamese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chatras)
    (goal do-research 1)
    (research-available ri-chatras)
    (not
      (research-completed ri-chatras)
    )
    (civ-selected vietnamese)
=>
    (research ri-chatras)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available battle-elephant-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-elite-battle-elephant)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-elite-battle-elephant < research-pending)
    (research-available ri-elite-battle-elephant)
    (not
      (research-completed ri-elite-battle-elephant)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-elite-battle-elephant)
    (goal do-research 1)
    (research-available ri-elite-battle-elephant)
    (not
      (research-completed ri-elite-battle-elephant)
    )
=>
    (research ri-elite-battle-elephant)
)
(defrule
    (not
      (unit-available battle-elephant-line)
    )
=>
    (up-jump-rule 105)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (research ri-plate-barding)
)
(defrule
    (not
      (current-age >= feudal-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-bloodlines)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (research ri-bloodlines)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-husbandry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (research ri-husbandry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-chivalry)
      )
      (civ-selected frankish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-chivalry < research-pending)
    (research-available ri-chivalry)
    (not
      (research-completed ri-chivalry)
    )
    (civ-selected frankish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chivalry)
    (goal do-research 1)
    (research-available ri-chivalry)
    (not
      (research-completed ri-chivalry)
    )
    (civ-selected frankish)
=>
    (research ri-chivalry)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-manipur-cavalry)
      )
      (civ-selected burmese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (research ri-manipur-cavalry)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-farimba)
      )
      (civ-selected malian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-farimba < research-pending)
    (research-available ri-farimba)
    (not
      (research-completed ri-farimba)
    )
    (civ-selected malian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-farimba)
    (goal do-research 1)
    (research-available ri-farimba)
    (not
      (research-completed ri-farimba)
    )
    (civ-selected malian)
=>
    (research ri-farimba)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (can-train battle-elephant-line)
    (goal produce-units 1)
    (goal enough-food-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available battle-elephant-line)
=>
    (train battle-elephant-line)
)
(defrule
    (goal produce-battle-elephants 1)
    (unit-available battle-elephant-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 48)
)
(defrule
    (goal produce-battering-rams 1)
    (unit-available battering-ram-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count battering-ram-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-battering-rams 1)
    (unit-available battering-ram-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-battering-rams 1)
      (unit-available battering-ram-line)
    )
=>
    (up-jump-rule 44)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available battering-ram-line)
    )
=>
    (up-jump-rule 13)
)
(defrule
    (research-completed ri-siege-ram)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-siege-ram)
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-capped-ram)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-capped-ram < research-pending)
    (research-available ri-capped-ram)
    (not
      (research-completed ri-capped-ram)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-capped-ram)
    (goal do-research 1)
    (research-available ri-capped-ram)
    (not
      (research-completed ri-capped-ram)
    )
=>
    (research ri-capped-ram)
)
(defrule
    (up-research-status c: ri-siege-ram < research-pending)
    (research-available ri-siege-ram)
    (not
      (research-completed ri-siege-ram)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-ram)
    (goal do-research 1)
    (research-available ri-siege-ram)
    (not
      (research-completed ri-siege-ram)
    )
=>
    (research ri-siege-ram)
)
(defrule
    (not
      (unit-available battering-ram-line)
    )
=>
    (up-jump-rule 25)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-siege-engineers)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (research ri-siege-engineers)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-furor-celtica)
      )
      (civ-selected celtic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-furor-celtica < research-pending)
    (research-available ri-furor-celtica)
    (not
      (research-completed ri-furor-celtica)
    )
    (civ-selected celtic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-furor-celtica)
    (goal do-research 1)
    (research-available ri-furor-celtica)
    (not
      (research-completed ri-furor-celtica)
    )
    (civ-selected celtic)
=>
    (research ri-furor-celtica)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (can-train battering-ram-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available battering-ram-line)
=>
    (train battering-ram-line)
)
(defrule
    (goal produce-battering-rams 1)
    (unit-available battering-ram-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 57)
)
(defrule
    (goal produce-mangonels 1)
    (unit-available mangonel-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count mangonel-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-mangonels 1)
    (unit-available mangonel-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-mangonels 1)
      (unit-available mangonel-line)
    )
=>
    (up-jump-rule 53)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available mangonel-line)
    )
=>
    (up-jump-rule 13)
)
(defrule
    (research-completed ri-siege-onager)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-siege-onager)
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-onager)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-onager < research-pending)
    (research-available ri-onager)
    (not
      (research-completed ri-onager)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-onager)
    (goal do-research 1)
    (research-available ri-onager)
    (not
      (research-completed ri-onager)
    )
=>
    (research ri-onager)
)
(defrule
    (up-research-status c: ri-siege-onager < research-pending)
    (research-available ri-siege-onager)
    (not
      (research-completed ri-siege-onager)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-onager)
    (goal do-research 1)
    (research-available ri-siege-onager)
    (not
      (research-completed ri-siege-onager)
    )
=>
    (research ri-siege-onager)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available mangonel-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-shinkichon)
      )
      (civ-selected korean)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-shinkichon < research-pending)
    (research-available ri-shinkichon)
    (not
      (research-completed ri-shinkichon)
    )
    (civ-selected korean)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shinkichon)
    (goal do-research 1)
    (research-available ri-shinkichon)
    (not
      (research-completed ri-shinkichon)
    )
    (civ-selected korean)
=>
    (research ri-shinkichon)
)
(defrule
    (not
      (unit-available mangonel-line)
    )
=>
    (up-jump-rule 25)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-siege-engineers)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (research ri-siege-engineers)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-furor-celtica)
      )
      (civ-selected celtic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-furor-celtica < research-pending)
    (research-available ri-furor-celtica)
    (not
      (research-completed ri-furor-celtica)
    )
    (civ-selected celtic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-furor-celtica)
    (goal do-research 1)
    (research-available ri-furor-celtica)
    (not
      (research-completed ri-furor-celtica)
    )
    (civ-selected celtic)
=>
    (research ri-furor-celtica)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (can-train mangonel-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available mangonel-line)
=>
    (train mangonel-line)
)
(defrule
    (goal produce-mangonels 1)
    (unit-available mangonel-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 59)
)
(defrule
    (goal produce-scorpions 1)
    (unit-available scorpion-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count scorpion-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-scorpions 1)
    (unit-available scorpion-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-scorpions 1)
      (unit-available scorpion-line)
    )
=>
    (up-jump-rule 55)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available scorpion-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-heavy-scorpion)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-heavy-scorpion < research-pending)
    (research-available ri-heavy-scorpion)
    (not
      (research-completed ri-heavy-scorpion)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-scorpion)
    (goal do-research 1)
    (research-available ri-heavy-scorpion)
    (not
      (research-completed ri-heavy-scorpion)
    )
=>
    (research ri-heavy-scorpion)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available scorpion-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-rocketry)
      )
      (civ-selected chinese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-rocketry < research-pending)
    (research-available ri-rocketry)
    (not
      (research-completed ri-rocketry)
    )
    (civ-selected chinese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-rocketry)
    (goal do-research 1)
    (research-available ri-rocketry)
    (not
      (research-completed ri-rocketry)
    )
    (civ-selected chinese)
=>
    (research ri-rocketry)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available scorpion-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-double-crossbow)
      )
      (civ-selected khmer)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-double-crossbow < research-pending)
    (research-available ri-double-crossbow)
    (not
      (research-completed ri-double-crossbow)
    )
    (civ-selected khmer)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-crossbow)
    (goal do-research 1)
    (research-available ri-double-crossbow)
    (not
      (research-completed ri-double-crossbow)
    )
    (civ-selected khmer)
=>
    (research ri-double-crossbow)
)
(defrule
    (not
      (unit-available scorpion-line)
    )
=>
    (up-jump-rule 25)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-siege-engineers)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (research ri-siege-engineers)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-furor-celtica)
      )
      (civ-selected celtic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-furor-celtica < research-pending)
    (research-available ri-furor-celtica)
    (not
      (research-completed ri-furor-celtica)
    )
    (civ-selected celtic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-furor-celtica)
    (goal do-research 1)
    (research-available ri-furor-celtica)
    (not
      (research-completed ri-furor-celtica)
    )
    (civ-selected celtic)
=>
    (research ri-furor-celtica)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (can-train scorpion-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available scorpion-line)
=>
    (train scorpion-line)
)
(defrule
    (goal produce-scorpions 1)
    (unit-available scorpion-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 34)
)
(defrule
    (goal produce-bombard-cannons 1)
    (unit-available bombard-cannon)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count bombard-cannon current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-bombard-cannons 1)
    (unit-available bombard-cannon)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-bombard-cannons 1)
      (unit-available bombard-cannon)
    )
=>
    (up-jump-rule 30)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (not
      (unit-available bombard-cannon)
    )
=>
    (up-jump-rule 25)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-siege-engineers)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (research ri-siege-engineers)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-furor-celtica)
      )
      (civ-selected celtic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-furor-celtica < research-pending)
    (research-available ri-furor-celtica)
    (not
      (research-completed ri-furor-celtica)
    )
    (civ-selected celtic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-furor-celtica)
    (goal do-research 1)
    (research-available ri-furor-celtica)
    (not
      (research-completed ri-furor-celtica)
    )
    (civ-selected celtic)
=>
    (research ri-furor-celtica)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (can-train bombard-cannon)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available bombard-cannon)
=>
    (train bombard-cannon)
)
(defrule
    (goal produce-bombard-cannons 1)
    (unit-available bombard-cannon)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 36)
)
(defrule
    (goal produce-trebuchets 1)
    (unit-available trebuchet-set)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count trebuchet-set current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-trebuchets 1)
    (unit-available trebuchet-set)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-trebuchets 1)
      (unit-available trebuchet-set)
    )
=>
    (up-jump-rule 32)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (not
      (unit-available trebuchet)
    )
=>
    (up-jump-rule 25)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-siege-engineers)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (research ri-siege-engineers)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-furor-celtica)
      )
      (civ-selected celtic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-furor-celtica < research-pending)
    (research-available ri-furor-celtica)
    (not
      (research-completed ri-furor-celtica)
    )
    (civ-selected celtic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-furor-celtica)
    (goal do-research 1)
    (research-available ri-furor-celtica)
    (not
      (research-completed ri-furor-celtica)
    )
    (civ-selected celtic)
=>
    (research ri-furor-celtica)
)
(defrule
    (not
      (building-type-count-total siege-workshop == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (building-type-count blacksmith >= 1)
    (building-type-count-total siege-workshop == 0)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal siege-workshop-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total siege-workshop siege-workshop-count)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (up-compare-goal siege-workshop-count g:< desired-military-buildings-per-type)
=>
    (build siege-workshop)
    (set-goal 339 1)
)
(defrule
    (can-train trebuchet)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available trebuchet)
=>
    (train trebuchet)
)
(defrule
    (goal produce-trebuchets 1)
    (unit-available trebuchet-set)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 731)
)
(defrule
    (goal produce-unique-units 1)
    (unit-available my-unique-unit-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count my-unique-unit-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-unique-units 1)
    (unit-available my-unique-unit-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-unique-units 1)
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 727)
)
(defrule
    (current-age >= castle-age)
=>
    (set-goal castle-count 0)
    (disable-self)
)
(defrule
    (current-age >= castle-age)
=>
    (up-get-fact building-type-count-total castle castle-count)
)
(defrule
    (nand
      (up-compare-goal castle-count g:< desired-military-buildings-per-type)
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (research-completed my-unique-unit-upgrade)
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: my-unique-unit-upgrade < research-pending)
    (research-available my-unique-unit-upgrade)
    (not
      (research-completed my-unique-unit-upgrade)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research my-unique-unit-upgrade)
    (goal do-research 1)
    (research-available my-unique-unit-upgrade)
    (not
      (research-completed my-unique-unit-upgrade)
    )
=>
    (research my-unique-unit-upgrade)
)
(defrule
    (unit-available my-unique-unit-line)
=>
    (set-goal old-desired-military-buildings-per-type 0)
    (disable-self)
)
(defrule
    (unit-available my-unique-unit-line)
=>
    (up-modify-goal old-desired-military-buildings-per-type g:= desired-military-buildings-per-type)
    (set-goal desired-military-buildings-per-type 0)
)
(defrule
    (nand
      (or
        (civ-selected aztec)
        (or
          (civ-selected celtic)
          (or
            (civ-selected ethiopian)
            (or
              (civ-selected frankish)
              (civ-selected gothic)
            )
          )
        )
      )
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 96)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (up-research-status c: ri-plate-mail < research-pending)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (goal do-research 1)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (research ri-plate-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-perfusion)
      )
      (civ-selected gothic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-perfusion < research-pending)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (goal do-research 1)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (research ri-perfusion)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-tracking)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-tracking < research-pending)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (goal do-research 1)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (research ri-tracking)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-squires)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-squires < research-pending)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (goal do-research 1)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (research ri-squires)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-arson)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-arson < research-pending)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (goal do-research 1)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (research ri-arson)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-garland-wars)
      )
      (civ-selected aztec)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-garland-wars < research-pending)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (goal do-research 1)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (research ri-garland-wars)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (nand
      (or
        (civ-selected incan)
        (or
          (civ-selected japanese)
          (or
            (civ-selected malay)
            (or
              (civ-selected malian)
              (or
                (civ-selected teutonic)
                (civ-selected viking)
              )
            )
          )
        )
      )
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 96)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-mail)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-mail)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-mail)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-mail < research-pending)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-mail)
    (goal do-research 1)
    (research-available ri-scale-mail)
    (not
      (research-completed ri-scale-mail)
    )
=>
    (research ri-scale-mail)
)
(defrule
    (up-research-status c: ri-chain-mail < research-pending)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-mail)
    (goal do-research 1)
    (research-available ri-chain-mail)
    (not
      (research-completed ri-chain-mail)
    )
=>
    (research ri-chain-mail)
)
(defrule
    (up-research-status c: ri-plate-mail < research-pending)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-mail)
    (goal do-research 1)
    (research-available ri-plate-mail)
    (not
      (research-completed ri-plate-mail)
    )
=>
    (research ri-plate-mail)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-perfusion)
      )
      (civ-selected gothic)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-perfusion < research-pending)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-perfusion)
    (goal do-research 1)
    (research-available ri-perfusion)
    (not
      (research-completed ri-perfusion)
    )
    (civ-selected gothic)
=>
    (research ri-perfusion)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-tracking)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-tracking < research-pending)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-tracking)
    (goal do-research 1)
    (research-available ri-tracking)
    (not
      (research-completed ri-tracking)
    )
=>
    (research ri-tracking)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-squires)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-squires < research-pending)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-squires)
    (goal do-research 1)
    (research-available ri-squires)
    (not
      (research-completed ri-squires)
    )
=>
    (research ri-squires)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-arson)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-arson < research-pending)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-arson)
    (goal do-research 1)
    (research-available ri-arson)
    (not
      (research-completed ri-arson)
    )
=>
    (research ri-arson)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-garland-wars)
      )
      (civ-selected aztec)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-garland-wars < research-pending)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-garland-wars)
    (goal do-research 1)
    (research-available ri-garland-wars)
    (not
      (research-completed ri-garland-wars)
    )
    (civ-selected aztec)
=>
    (research ri-garland-wars)
)
(defrule
    (true)
=>
    (set-goal barracks-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total barracks barracks-count)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (up-compare-goal barracks-count g:< desired-military-buildings-per-type)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (nand
      (or
        (civ-selected berbers)
        (or
          (civ-selected indian)
          (or
            (civ-selected korean)
            (or
              (civ-selected mongol)
              (civ-selected burmese)
            )
          )
        )
      )
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 111)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (research ri-bracer)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (research ri-ring-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-thumb-ring)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (research ri-thumb-ring)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-ballistics)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (not
      (current-age >= feudal-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-bloodlines)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (research ri-bloodlines)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-husbandry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (research ri-husbandry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-sipahi)
      )
      (civ-selected turkish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-sipahi < research-pending)
    (research-available ri-sipahi)
    (not
      (research-completed ri-sipahi)
    )
    (civ-selected turkish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-sipahi)
    (goal do-research 1)
    (research-available ri-sipahi)
    (not
      (research-completed ri-sipahi)
    )
    (civ-selected turkish)
=>
    (research ri-sipahi)
)
(defrule
    (not
      (current-age == imperial-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-parthian-tactics)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-parthian-tactics < research-pending)
    (research-available ri-parthian-tactics)
    (not
      (research-completed ri-parthian-tactics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-parthian-tactics)
    (goal do-research 1)
    (research-available ri-parthian-tactics)
    (not
      (research-completed ri-parthian-tactics)
    )
=>
    (research ri-parthian-tactics)
)
(defrule
    (nand
      (or
        (civ-selected briton)
        (or
          (civ-selected chinese)
          (or
            (civ-selected italian)
            (or
              (civ-selected mayan)
              (civ-selected vietnamese)
            )
          )
        )
      )
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 81)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (research ri-bracer)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (research ri-ring-archer-armor)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-thumb-ring)
=>
    (up-jump-rule 3)
)
(defrule
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (building-type-count-total archery-range == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total archery-range == 0)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-thumb-ring < research-pending)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thumb-ring)
    (goal do-research 1)
    (research-available ri-thumb-ring)
    (not
      (research-completed ri-thumb-ring)
    )
=>
    (research ri-thumb-ring)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-ballistics)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (research ri-ballistics)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal archery-range-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total archery-range archery-range-count)
)
(defrule
    (can-build archery-range)
    (up-pending-objects c: archery-range < 5)
    (up-compare-goal archery-range-count g:< desired-military-buildings-per-type)
=>
    (build archery-range)
    (set-goal 339 1)
)
(defrule
    (nand
      (or
        (civ-selected byzantine)
        (or
          (civ-selected hun)
          (or
            (civ-selected magyar)
            (or
              (civ-selected persian)
              (or
                (civ-selected saracen)
                (civ-selected slavic)
              )
            )
          )
        )
      )
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 105)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (not
      (current-age == feudal-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (nand
      (current-age == castle-age)
      (not
        (current-age == feudal-age)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-blast-furnace)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-iron-casting)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-forging)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-forging < research-pending)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-forging)
    (goal do-research 1)
    (research-available ri-forging)
    (not
      (research-completed ri-forging)
    )
=>
    (research ri-forging)
)
(defrule
    (up-research-status c: ri-iron-casting < research-pending)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-iron-casting)
    (goal do-research 1)
    (research-available ri-iron-casting)
    (not
      (research-completed ri-iron-casting)
    )
=>
    (research ri-iron-casting)
)
(defrule
    (up-research-status c: ri-blast-furnace < research-pending)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-blast-furnace)
    (goal do-research 1)
    (research-available ri-blast-furnace)
    (not
      (research-completed ri-blast-furnace)
    )
=>
    (research ri-blast-furnace)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (not
          (current-age == castle-age)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (research ri-plate-barding)
)
(defrule
    (not
      (current-age >= feudal-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-bloodlines)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (research ri-bloodlines)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-husbandry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (research ri-husbandry)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-chivalry)
      )
      (civ-selected frankish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-chivalry < research-pending)
    (research-available ri-chivalry)
    (not
      (research-completed ri-chivalry)
    )
    (civ-selected frankish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chivalry)
    (goal do-research 1)
    (research-available ri-chivalry)
    (not
      (research-completed ri-chivalry)
    )
    (civ-selected frankish)
=>
    (research ri-chivalry)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-manipur-cavalry)
      )
      (civ-selected burmese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (research ri-manipur-cavalry)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-farimba)
      )
      (civ-selected malian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-farimba < research-pending)
    (research-available ri-farimba)
    (not
      (research-completed ri-farimba)
    )
    (civ-selected malian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-farimba)
    (goal do-research 1)
    (research-available ri-farimba)
    (not
      (research-completed ri-farimba)
    )
    (civ-selected malian)
=>
    (research ri-farimba)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal stable-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total stable stable-count)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (up-compare-goal stable-count g:< desired-military-buildings-per-type)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (unit-available my-unique-unit-line)
=>
    (up-modify-goal desired-military-buildings-per-type g:= old-desired-military-buildings-per-type)
)
(defrule
    (nand
      (civ-selected briton)
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-yeomen)
      )
      (civ-selected briton)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-yeomen < research-pending)
    (research-available ri-yeomen)
    (not
      (research-completed ri-yeomen)
    )
    (civ-selected briton)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-yeomen)
    (goal do-research 1)
    (research-available ri-yeomen)
    (not
      (research-completed ri-yeomen)
    )
    (civ-selected briton)
=>
    (research ri-yeomen)
)
(defrule
    (nand
      (civ-selected magyar)
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-mercenaries)
      )
      (civ-selected magyar)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-mercenaries < research-pending)
    (research-available ri-mercenaries)
    (not
      (research-completed ri-mercenaries)
    )
    (civ-selected magyar)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-mercenaries)
    (goal do-research 1)
    (research-available ri-mercenaries)
    (not
      (research-completed ri-mercenaries)
    )
    (civ-selected magyar)
=>
    (research ri-mercenaries)
)
(defrule
    (nand
      (civ-selected italian)
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-pavise)
      )
      (civ-selected italian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-pavise < research-pending)
    (research-available ri-pavise)
    (not
      (research-completed ri-pavise)
    )
    (civ-selected italian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-pavise)
    (goal do-research 1)
    (research-available ri-pavise)
    (not
      (research-completed ri-pavise)
    )
    (civ-selected italian)
=>
    (research ri-pavise)
)
(defrule
    (nand
      (civ-selected viking)
      (and
        (current-age == imperial-age)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-beserkergang)
      )
      (civ-selected viking)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-beserkergang < research-pending)
    (research-available ri-beserkergang)
    (not
      (research-completed ri-beserkergang)
    )
    (civ-selected viking)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-beserkergang)
    (goal do-research 1)
    (research-available ri-beserkergang)
    (not
      (research-completed ri-beserkergang)
    )
    (civ-selected viking)
=>
    (research ri-beserkergang)
)
(defrule
    (nand
      (civ-selected byzantine)
      (and
        (current-age == imperial-age)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-logistica)
      )
      (civ-selected byzantine)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-logistica < research-pending)
    (research-available ri-logistica)
    (not
      (research-completed ri-logistica)
    )
    (civ-selected byzantine)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-logistica)
    (goal do-research 1)
    (research-available ri-logistica)
    (not
      (research-completed ri-logistica)
    )
    (civ-selected byzantine)
=>
    (research ri-logistica)
)
(defrule
    (nand
      (civ-selected persian)
      (and
        (current-age == imperial-age)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-mahouts)
      )
      (civ-selected persian)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-mahouts < research-pending)
    (research-available ri-mahouts)
    (not
      (research-completed ri-mahouts)
    )
    (civ-selected persian)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-mahouts)
    (goal do-research 1)
    (research-available ri-mahouts)
    (not
      (research-completed ri-mahouts)
    )
    (civ-selected persian)
=>
    (research ri-mahouts)
)
(defrule
    (nand
      (civ-selected chinese)
      (and
        (current-age == imperial-age)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-rocketry)
      )
      (civ-selected chinese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-rocketry < research-pending)
    (research-available ri-rocketry)
    (not
      (research-completed ri-rocketry)
    )
    (civ-selected chinese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-rocketry)
    (goal do-research 1)
    (research-available ri-rocketry)
    (not
      (research-completed ri-rocketry)
    )
    (civ-selected chinese)
=>
    (research ri-rocketry)
)
(defrule
    (nand
      (civ-selected frankish)
      (and
        (current-age == imperial-age)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-bearded-axe)
      )
      (civ-selected frankish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-bearded-axe < research-pending)
    (research-available ri-bearded-axe)
    (not
      (research-completed ri-bearded-axe)
    )
    (civ-selected frankish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bearded-axe)
    (goal do-research 1)
    (research-available ri-bearded-axe)
    (not
      (research-completed ri-bearded-axe)
    )
    (civ-selected frankish)
=>
    (research ri-bearded-axe)
)
(defrule
    (nand
      (civ-selected khmer)
      (and
        (current-age == imperial-age)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-double-crossbow)
      )
      (civ-selected khmer)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-double-crossbow < research-pending)
    (research-available ri-double-crossbow)
    (not
      (research-completed ri-double-crossbow)
    )
    (civ-selected khmer)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-double-crossbow)
    (goal do-research 1)
    (research-available ri-double-crossbow)
    (not
      (research-completed ri-double-crossbow)
    )
    (civ-selected khmer)
=>
    (research ri-double-crossbow)
)
(defrule
    (nand
      (civ-selected burmese)
      (and
        (current-age == imperial-age)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-manipur-cavalry)
      )
      (civ-selected burmese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-manipur-cavalry < research-pending)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-manipur-cavalry)
    (goal do-research 1)
    (research-available ri-manipur-cavalry)
    (not
      (research-completed ri-manipur-cavalry)
    )
    (civ-selected burmese)
=>
    (research ri-manipur-cavalry)
)
(defrule
    (nand
      (civ-selected portuguese)
      (and
        (current-age == imperial-age)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-siege-engineers)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (research ri-siege-engineers)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (civ-selected khmer)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-siege-engineers)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-siege-engineers < research-pending)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-siege-engineers)
    (goal do-research 1)
    (research-available ri-siege-engineers)
    (not
      (research-completed ri-siege-engineers)
    )
=>
    (research ri-siege-engineers)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (civ-selected khmer)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (civ-selected khmer)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-plate-barding)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (up-research-status c: ri-plate-barding < research-pending)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-plate-barding)
    (goal do-research 1)
    (research-available ri-plate-barding)
    (not
      (research-completed ri-plate-barding)
    )
=>
    (research ri-plate-barding)
)
(defrule
    (nand
      (not
        (current-age == imperial-age)
      )
      (and
        (civ-selected khmer)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-chain-barding)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-scale-barding)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-scale-barding < research-pending)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-scale-barding)
    (goal do-research 1)
    (research-available ri-scale-barding)
    (not
      (research-completed ri-scale-barding)
    )
=>
    (research ri-scale-barding)
)
(defrule
    (up-research-status c: ri-chain-barding < research-pending)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chain-barding)
    (goal do-research 1)
    (research-available ri-chain-barding)
    (not
      (research-completed ri-chain-barding)
    )
=>
    (research ri-chain-barding)
)
(defrule
    (nand
      (civ-selected khmer)
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-ballistics)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (research ri-ballistics)
)
(defrule
    (nand
      (civ-selected khmer)
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-husbandry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (research ri-husbandry)
)
(defrule
    (nand
      (civ-selected khmer)
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-bloodlines)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (research ri-bloodlines)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (civ-selected spanish)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (research ri-ring-archer-armor)
)
(defrule
    (nand
      (not
        (current-age == imperial-age)
      )
      (and
        (civ-selected spanish)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (nand
      (civ-selected spanish)
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-husbandry)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-husbandry < research-pending)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-husbandry)
    (goal do-research 1)
    (research-available ri-husbandry)
    (not
      (research-completed ri-husbandry)
    )
=>
    (research ri-husbandry)
)
(defrule
    (nand
      (civ-selected spanish)
      (unit-available my-unique-unit-line)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (research-completed ri-bloodlines)
=>
    (up-jump-rule 3)
)
(defrule
    (not
      (building-type-count-total stable == 0)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (can-build barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (building-type-count-total barracks == 0)
=>
    (build barracks)
    (set-goal 339 1)
)
(defrule
    (can-build stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (building-type-count barracks >= 1)
    (building-type-count-total stable == 0)
=>
    (build stable)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-bloodlines < research-pending)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bloodlines)
    (goal do-research 1)
    (research-available ri-bloodlines)
    (not
      (research-completed ri-bloodlines)
    )
=>
    (research ri-bloodlines)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (civ-selected turkish)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-ring-archer-armor)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (up-research-status c: ri-ring-archer-armor < research-pending)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ring-archer-armor)
    (goal do-research 1)
    (research-available ri-ring-archer-armor)
    (not
      (research-completed ri-ring-archer-armor)
    )
=>
    (research ri-ring-archer-armor)
)
(defrule
    (nand
      (not
        (current-age == imperial-age)
      )
      (and
        (civ-selected turkish)
        (unit-available my-unique-unit-line)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-leather-archer-armor)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-padded-archer-armor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-padded-archer-armor < research-pending)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-padded-archer-armor)
    (goal do-research 1)
    (research-available ri-padded-archer-armor)
    (not
      (research-completed ri-padded-archer-armor)
    )
=>
    (research ri-padded-archer-armor)
)
(defrule
    (up-research-status c: ri-leather-archer-armor < research-pending)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-leather-archer-armor)
    (goal do-research 1)
    (research-available ri-leather-archer-armor)
    (not
      (research-completed ri-leather-archer-armor)
    )
=>
    (research ri-leather-archer-armor)
)
(defrule
    (can-train my-unique-unit-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-food-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available my-unique-unit-line)
=>
    (train my-unique-unit-line)
)
(defrule
    (goal produce-unique-units 1)
    (unit-available my-unique-unit-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 54)
)
(defrule
    (goal produce-monks 1)
    (unit-available monk-set)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count monk-set current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-monks 1)
    (unit-available monk-set)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-monks 1)
      (unit-available monk-set)
    )
=>
    (up-jump-rule 50)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (not
      (unit-available monk)
    )
=>
    (up-jump-rule 47)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-redemption)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-redemption < research-pending)
    (research-available ri-redemption)
    (not
      (research-completed ri-redemption)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-redemption)
    (goal do-research 1)
    (research-available ri-redemption)
    (not
      (research-completed ri-redemption)
    )
=>
    (research ri-redemption)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-sanctity)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-sanctity < research-pending)
    (research-available ri-sanctity)
    (not
      (research-completed ri-sanctity)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-sanctity)
    (goal do-research 1)
    (research-available ri-sanctity)
    (not
      (research-completed ri-sanctity)
    )
=>
    (research ri-sanctity)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fervor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fervor < research-pending)
    (research-available ri-fervor)
    (not
      (research-completed ri-fervor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fervor)
    (goal do-research 1)
    (research-available ri-fervor)
    (not
      (research-completed ri-fervor)
    )
=>
    (research ri-fervor)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-inquisition)
      )
      (civ-selected spanish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-inquisition < research-pending)
    (research-available ri-inquisition)
    (not
      (research-completed ri-inquisition)
    )
    (civ-selected spanish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-inquisition)
    (goal do-research 1)
    (research-available ri-inquisition)
    (not
      (research-completed ri-inquisition)
    )
    (civ-selected spanish)
=>
    (research ri-inquisition)
)
(defrule
    (nand
      (players-unit-type-count any-enemy monk >= 2)
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-atonement)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-atonement < research-pending)
    (research-available ri-atonement)
    (not
      (research-completed ri-atonement)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-atonement)
    (goal do-research 1)
    (research-available ri-atonement)
    (not
      (research-completed ri-atonement)
    )
=>
    (research ri-atonement)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-theocracy)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-theocracy < research-pending)
    (research-available ri-theocracy)
    (not
      (research-completed ri-theocracy)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-theocracy)
    (goal do-research 1)
    (research-available ri-theocracy)
    (not
      (research-completed ri-theocracy)
    )
=>
    (research ri-theocracy)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-illumination)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-illumination < research-pending)
    (research-available ri-illumination)
    (not
      (research-completed ri-illumination)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-illumination)
    (goal do-research 1)
    (research-available ri-illumination)
    (not
      (research-completed ri-illumination)
    )
=>
    (research ri-illumination)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-block-printing)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-block-printing < research-pending)
    (research-available ri-block-printing)
    (not
      (research-completed ri-block-printing)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-block-printing)
    (goal do-research 1)
    (research-available ri-block-printing)
    (not
      (research-completed ri-block-printing)
    )
=>
    (research ri-block-printing)
)
(defrule
    (true)
=>
    (set-goal monastery-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total monastery monastery-count)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (up-compare-goal monastery-count g:< desired-military-buildings-per-type)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (can-train monk)
    (goal produce-units 1)
    (goal enough-gold-for-units 1)
    (unit-available monk)
=>
    (train monk)
)
(defrule
    (goal produce-monks 1)
    (unit-available monk-set)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-land-units 1)
    )
=>
    (up-jump-rule 54)
)
(defrule
    (goal produce-missionaries 1)
    (unit-available missionary)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count missionary current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-missionaries 1)
    (unit-available missionary)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-missionaries 1)
      (unit-available missionary)
    )
=>
    (up-jump-rule 50)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (not
      (unit-available missionary)
    )
=>
    (up-jump-rule 47)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-redemption)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-redemption < research-pending)
    (research-available ri-redemption)
    (not
      (research-completed ri-redemption)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-redemption)
    (goal do-research 1)
    (research-available ri-redemption)
    (not
      (research-completed ri-redemption)
    )
=>
    (research ri-redemption)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-sanctity)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-sanctity < research-pending)
    (research-available ri-sanctity)
    (not
      (research-completed ri-sanctity)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-sanctity)
    (goal do-research 1)
    (research-available ri-sanctity)
    (not
      (research-completed ri-sanctity)
    )
=>
    (research ri-sanctity)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fervor)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fervor < research-pending)
    (research-available ri-fervor)
    (not
      (research-completed ri-fervor)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fervor)
    (goal do-research 1)
    (research-available ri-fervor)
    (not
      (research-completed ri-fervor)
    )
=>
    (research ri-fervor)
)
(defrule
    (not
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-inquisition)
      )
      (civ-selected spanish)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-inquisition < research-pending)
    (research-available ri-inquisition)
    (not
      (research-completed ri-inquisition)
    )
    (civ-selected spanish)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-inquisition)
    (goal do-research 1)
    (research-available ri-inquisition)
    (not
      (research-completed ri-inquisition)
    )
    (civ-selected spanish)
=>
    (research ri-inquisition)
)
(defrule
    (nand
      (players-unit-type-count any-enemy monk >= 2)
      (current-age >= castle-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-atonement)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-atonement < research-pending)
    (research-available ri-atonement)
    (not
      (research-completed ri-atonement)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-atonement)
    (goal do-research 1)
    (research-available ri-atonement)
    (not
      (research-completed ri-atonement)
    )
=>
    (research ri-atonement)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-theocracy)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-theocracy < research-pending)
    (research-available ri-theocracy)
    (not
      (research-completed ri-theocracy)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-theocracy)
    (goal do-research 1)
    (research-available ri-theocracy)
    (not
      (research-completed ri-theocracy)
    )
=>
    (research ri-theocracy)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-illumination)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-illumination < research-pending)
    (research-available ri-illumination)
    (not
      (research-completed ri-illumination)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-illumination)
    (goal do-research 1)
    (research-available ri-illumination)
    (not
      (research-completed ri-illumination)
    )
=>
    (research ri-illumination)
)
(defrule
    (not
      (current-age >= imperial-age)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-block-printing)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count-total monastery == 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-block-printing < research-pending)
    (research-available ri-block-printing)
    (not
      (research-completed ri-block-printing)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-block-printing)
    (goal do-research 1)
    (research-available ri-block-printing)
    (not
      (research-completed ri-block-printing)
    )
=>
    (research ri-block-printing)
)
(defrule
    (true)
=>
    (set-goal monastery-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total monastery monastery-count)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (up-compare-goal monastery-count g:< desired-military-buildings-per-type)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (can-train missionary)
    (goal produce-units 1)
    (goal enough-gold-for-units 1)
    (unit-available missionary)
=>
    (train missionary)
)
(defrule
    (goal produce-missionaries 1)
    (unit-available missionary)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 48)
)
(defrule
    (goal produce-transport-ships 1)
    (unit-available transport-ship)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count transport-ship current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-transport-ships 1)
    (unit-available transport-ship)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-transport-ships 1)
      (unit-available transport-ship)
    )
=>
    (up-jump-rule 44)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not
      (unit-available transport-ship)
    )
=>
    (up-jump-rule 41)
)
(defrule
    (nand
      (current-age == castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-careening)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (research ri-careening)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (building-type-count dock >= 1)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-dry-dock)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (research-completed ri-dry-dock)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-careening)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (research ri-careening)
)
(defrule
    (up-research-status c: ri-dry-dock < research-pending)
    (research-available ri-dry-dock)
    (not
      (research-completed ri-dry-dock)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-dry-dock)
    (goal do-research 1)
    (research-available ri-dry-dock)
    (not
      (research-completed ri-dry-dock)
    )
=>
    (research ri-dry-dock)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (building-type-count dock >= 1)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-shipwright)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-shipwright < research-pending)
    (research-available ri-shipwright)
    (not
      (research-completed ri-shipwright)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shipwright)
    (goal do-research 1)
    (research-available ri-shipwright)
    (not
      (research-completed ri-shipwright)
    )
=>
    (research ri-shipwright)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-thalassocracy)
      )
      (civ-selected malay)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-thalassocracy < research-pending)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thalassocracy)
    (goal do-research 1)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (research ri-thalassocracy)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-carrack)
      )
      (civ-selected portuguese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-carrack < research-pending)
    (research-available ri-carrack)
    (not
      (research-completed ri-carrack)
    )
    (civ-selected portuguese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-carrack)
    (goal do-research 1)
    (research-available ri-carrack)
    (not
      (research-completed ri-carrack)
    )
    (civ-selected portuguese)
=>
    (research ri-carrack)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (up-compare-goal dock-count g:< desired-military-buildings-per-type)
    (up-pending-objects c: dock < 1)
=>
    (build dock)
)
(defrule
    (can-train transport-ship)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available transport-ship)
=>
    (train transport-ship)
)
(defrule
    (goal produce-transport-ships 1)
    (unit-available transport-ship)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 103)
)
(defrule
    (goal produce-galleys 1)
    (unit-available galley-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count galley-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-galleys 1)
    (unit-available galley-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-galleys 1)
      (unit-available galley-line)
    )
=>
    (up-jump-rule 99)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (nand
      (current-age == feudal-age)
      (unit-available galley-line)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (nand
      (current-age == castle-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (unit-available galley-line)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (nand
      (current-age == castle-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (unit-available galley-line)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-war-galley)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-war-galley < research-pending)
    (research-available ri-war-galley)
    (not
      (research-completed ri-war-galley)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-war-galley)
    (goal do-research 1)
    (research-available ri-war-galley)
    (not
      (research-completed ri-war-galley)
    )
=>
    (research ri-war-galley)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (and
          (not
            (current-age == castle-age)
          )
          (unit-available galley-line)
        )
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (research ri-bracer)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (and
          (not
            (current-age == castle-age)
          )
          (unit-available galley-line)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-chemistry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-chemistry < research-pending)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-chemistry)
    (goal do-research 1)
    (research-available ri-chemistry)
    (not
      (research-completed ri-chemistry)
    )
=>
    (research ri-chemistry)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == feudal-age)
        )
        (and
          (not
            (current-age == castle-age)
          )
          (unit-available galley-line)
        )
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-galleon)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (research-completed ri-galleon)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-war-galley)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-war-galley < research-pending)
    (research-available ri-war-galley)
    (not
      (research-completed ri-war-galley)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-war-galley)
    (goal do-research 1)
    (research-available ri-war-galley)
    (not
      (research-completed ri-war-galley)
    )
=>
    (research ri-war-galley)
)
(defrule
    (up-research-status c: ri-galleon < research-pending)
    (research-available ri-galleon)
    (not
      (research-completed ri-galleon)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-galleon)
    (goal do-research 1)
    (research-available ri-galleon)
    (not
      (research-completed ri-galleon)
    )
=>
    (research ri-galleon)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available galley-line)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-ballistics)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-ballistics < research-pending)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-ballistics)
    (goal do-research 1)
    (research-available ri-ballistics)
    (not
      (research-completed ri-ballistics)
    )
=>
    (research ri-ballistics)
)
(defrule
    (not
      (unit-available galley-line)
    )
=>
    (up-jump-rule 41)
)
(defrule
    (nand
      (current-age == castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-careening)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (research ri-careening)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (building-type-count dock >= 1)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-dry-dock)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (research-completed ri-dry-dock)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-careening)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (research ri-careening)
)
(defrule
    (up-research-status c: ri-dry-dock < research-pending)
    (research-available ri-dry-dock)
    (not
      (research-completed ri-dry-dock)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-dry-dock)
    (goal do-research 1)
    (research-available ri-dry-dock)
    (not
      (research-completed ri-dry-dock)
    )
=>
    (research ri-dry-dock)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (building-type-count dock >= 1)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-shipwright)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-shipwright < research-pending)
    (research-available ri-shipwright)
    (not
      (research-completed ri-shipwright)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shipwright)
    (goal do-research 1)
    (research-available ri-shipwright)
    (not
      (research-completed ri-shipwright)
    )
=>
    (research ri-shipwright)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-thalassocracy)
      )
      (civ-selected malay)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-thalassocracy < research-pending)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thalassocracy)
    (goal do-research 1)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (research ri-thalassocracy)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-carrack)
      )
      (civ-selected portuguese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-carrack < research-pending)
    (research-available ri-carrack)
    (not
      (research-completed ri-carrack)
    )
    (civ-selected portuguese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-carrack)
    (goal do-research 1)
    (research-available ri-carrack)
    (not
      (research-completed ri-carrack)
    )
    (civ-selected portuguese)
=>
    (research ri-carrack)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (up-compare-goal dock-count g:< desired-military-buildings-per-type)
    (up-pending-objects c: dock < 1)
=>
    (build dock)
)
(defrule
    (can-train galley-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available galley-line)
=>
    (train galley-line)
)
(defrule
    (goal produce-galleys 1)
    (unit-available galley-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 72)
)
(defrule
    (goal produce-fire-ships 1)
    (unit-available fire-ship-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count fire-ship-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-fire-ships 1)
    (unit-available fire-ship-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-fire-ships 1)
      (unit-available fire-ship-line)
    )
=>
    (up-jump-rule 68)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (nand
      (current-age == castle-age)
      (unit-available fire-ship-line)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-war-galley)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-war-galley < research-pending)
    (research-available ri-war-galley)
    (not
      (research-completed ri-war-galley)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-war-galley)
    (goal do-research 1)
    (research-available ri-war-galley)
    (not
      (research-completed ri-war-galley)
    )
=>
    (research ri-war-galley)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (unit-available fire-ship-line)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-fast-fire-ship)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (research-completed ri-fast-fire-ship)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-war-galley)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-war-galley < research-pending)
    (research-available ri-war-galley)
    (not
      (research-completed ri-war-galley)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-war-galley)
    (goal do-research 1)
    (research-available ri-war-galley)
    (not
      (research-completed ri-war-galley)
    )
=>
    (research ri-war-galley)
)
(defrule
    (up-research-status c: ri-fast-fire-ship < research-pending)
    (research-available ri-fast-fire-ship)
    (not
      (research-completed ri-fast-fire-ship)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fast-fire-ship)
    (goal do-research 1)
    (research-available ri-fast-fire-ship)
    (not
      (research-completed ri-fast-fire-ship)
    )
=>
    (research ri-fast-fire-ship)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available fire-ship-line)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-greek-fire)
      )
      (civ-selected byzantine)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-greek-fire < research-pending)
    (research-available ri-greek-fire)
    (not
      (research-completed ri-greek-fire)
    )
    (civ-selected byzantine)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-greek-fire)
    (goal do-research 1)
    (research-available ri-greek-fire)
    (not
      (research-completed ri-greek-fire)
    )
    (civ-selected byzantine)
=>
    (research ri-greek-fire)
)
(defrule
    (not
      (unit-available fire-ship-line)
    )
=>
    (up-jump-rule 41)
)
(defrule
    (nand
      (current-age == castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-careening)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (research ri-careening)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (building-type-count dock >= 1)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-dry-dock)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (research-completed ri-dry-dock)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-careening)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (research ri-careening)
)
(defrule
    (up-research-status c: ri-dry-dock < research-pending)
    (research-available ri-dry-dock)
    (not
      (research-completed ri-dry-dock)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-dry-dock)
    (goal do-research 1)
    (research-available ri-dry-dock)
    (not
      (research-completed ri-dry-dock)
    )
=>
    (research ri-dry-dock)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (building-type-count dock >= 1)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-shipwright)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-shipwright < research-pending)
    (research-available ri-shipwright)
    (not
      (research-completed ri-shipwright)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shipwright)
    (goal do-research 1)
    (research-available ri-shipwright)
    (not
      (research-completed ri-shipwright)
    )
=>
    (research ri-shipwright)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-thalassocracy)
      )
      (civ-selected malay)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-thalassocracy < research-pending)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thalassocracy)
    (goal do-research 1)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (research ri-thalassocracy)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-carrack)
      )
      (civ-selected portuguese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-carrack < research-pending)
    (research-available ri-carrack)
    (not
      (research-completed ri-carrack)
    )
    (civ-selected portuguese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-carrack)
    (goal do-research 1)
    (research-available ri-carrack)
    (not
      (research-completed ri-carrack)
    )
    (civ-selected portuguese)
=>
    (research ri-carrack)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (up-compare-goal dock-count g:< desired-military-buildings-per-type)
    (up-pending-objects c: dock < 1)
=>
    (build dock)
)
(defrule
    (can-train fire-ship-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available fire-ship-line)
=>
    (train fire-ship-line)
)
(defrule
    (goal produce-fire-ships 1)
    (unit-available fire-ship-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 48)
)
(defrule
    (goal produce-cannon-galleons 1)
    (unit-available cannon-galleon-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count cannon-galleon-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-cannon-galleons 1)
    (unit-available cannon-galleon-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-cannon-galleons 1)
      (unit-available cannon-galleon-line)
    )
=>
    (up-jump-rule 44)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (not
      (unit-available cannon-galleon-line)
    )
=>
    (up-jump-rule 41)
)
(defrule
    (nand
      (current-age == castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-careening)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (research ri-careening)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (building-type-count dock >= 1)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-dry-dock)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (research-completed ri-dry-dock)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-careening)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (research ri-careening)
)
(defrule
    (up-research-status c: ri-dry-dock < research-pending)
    (research-available ri-dry-dock)
    (not
      (research-completed ri-dry-dock)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-dry-dock)
    (goal do-research 1)
    (research-available ri-dry-dock)
    (not
      (research-completed ri-dry-dock)
    )
=>
    (research ri-dry-dock)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (building-type-count dock >= 1)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-shipwright)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-shipwright < research-pending)
    (research-available ri-shipwright)
    (not
      (research-completed ri-shipwright)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shipwright)
    (goal do-research 1)
    (research-available ri-shipwright)
    (not
      (research-completed ri-shipwright)
    )
=>
    (research ri-shipwright)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-thalassocracy)
      )
      (civ-selected malay)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-thalassocracy < research-pending)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thalassocracy)
    (goal do-research 1)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (research ri-thalassocracy)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-carrack)
      )
      (civ-selected portuguese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-carrack < research-pending)
    (research-available ri-carrack)
    (not
      (research-completed ri-carrack)
    )
    (civ-selected portuguese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-carrack)
    (goal do-research 1)
    (research-available ri-carrack)
    (not
      (research-completed ri-carrack)
    )
    (civ-selected portuguese)
=>
    (research ri-carrack)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (up-compare-goal dock-count g:< desired-military-buildings-per-type)
    (up-pending-objects c: dock < 1)
=>
    (build dock)
)
(defrule
    (can-train cannon-galleon-line)
    (goal produce-units 1)
    (goal enough-wood-for-units 1)
    (goal enough-gold-for-units 1)
    (unit-available cannon-galleon-line)
=>
    (train cannon-galleon-line)
)
(defrule
    (goal produce-cannon-galleons 1)
    (unit-available cannon-galleon-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (not
      (goal allow-naval-units 1)
    )
=>
    (up-jump-rule 58)
)
(defrule
    (goal produce-demolition-ships 1)
    (unit-available demolition-ship-line)
=>
    (up-modify-goal old-produce-units g:= produce-units)
    (up-get-fact unit-type-count demolition-ship-line current-unit-amount)
)
(defrule
    (up-compare-goal current-unit-amount g:> expected-units-per-type)
    (goal produce-demolition-ships 1)
    (unit-available demolition-ship-line)
=>
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal produce-demolition-ships 1)
      (unit-available demolition-ship-line)
    )
=>
    (up-jump-rule 54)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (nand
      (current-age == imperial-age)
      (unit-available demolition-ship-line)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-heavy-demolition-ship)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-heavy-demolition-ship < research-pending)
    (research-available ri-heavy-demolition-ship)
    (not
      (research-completed ri-heavy-demolition-ship)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-heavy-demolition-ship)
    (goal do-research 1)
    (research-available ri-heavy-demolition-ship)
    (not
      (research-completed ri-heavy-demolition-ship)
    )
=>
    (research ri-heavy-demolition-ship)
)
(defrule
    (nand
      (current-age >= castle-age)
      (unit-available demolition-ship-line)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-war-galley)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-war-galley < research-pending)
    (research-available ri-war-galley)
    (not
      (research-completed ri-war-galley)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-war-galley)
    (goal do-research 1)
    (research-available ri-war-galley)
    (not
      (research-completed ri-war-galley)
    )
=>
    (research ri-war-galley)
)
(defrule
    (not
      (unit-available demolition-ship-line)
    )
=>
    (up-jump-rule 41)
)
(defrule
    (nand
      (current-age == castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-careening)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (research ri-careening)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (building-type-count dock >= 1)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-dry-dock)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (research-completed ri-dry-dock)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-careening)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-careening < research-pending)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-careening)
    (goal do-research 1)
    (research-available ri-careening)
    (not
      (research-completed ri-careening)
    )
=>
    (research ri-careening)
)
(defrule
    (up-research-status c: ri-dry-dock < research-pending)
    (research-available ri-dry-dock)
    (not
      (research-completed ri-dry-dock)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-dry-dock)
    (goal do-research 1)
    (research-available ri-dry-dock)
    (not
      (research-completed ri-dry-dock)
    )
=>
    (research ri-dry-dock)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (not
          (current-age == castle-age)
        )
        (building-type-count dock >= 1)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-shipwright)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (building-type-count-total dock < 1)
    (building-type-count-total dock == 0)
=>
    (build dock)
)
(defrule
    (up-research-status c: ri-shipwright < research-pending)
    (research-available ri-shipwright)
    (not
      (research-completed ri-shipwright)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-shipwright)
    (goal do-research 1)
    (research-available ri-shipwright)
    (not
      (research-completed ri-shipwright)
    )
=>
    (research ri-shipwright)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-thalassocracy)
      )
      (civ-selected malay)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-thalassocracy < research-pending)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-thalassocracy)
    (goal do-research 1)
    (research-available ri-thalassocracy)
    (not
      (research-completed ri-thalassocracy)
    )
    (civ-selected malay)
=>
    (research ri-thalassocracy)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count dock >= 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (nand
      (not
        (research-completed ri-carrack)
      )
      (civ-selected portuguese)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-carrack < research-pending)
    (research-available ri-carrack)
    (not
      (research-completed ri-carrack)
    )
    (civ-selected portuguese)
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-carrack)
    (goal do-research 1)
    (research-available ri-carrack)
    (not
      (research-completed ri-carrack)
    )
    (civ-selected portuguese)
=>
    (research ri-carrack)
)
(defrule
    (true)
=>
    (set-goal dock-count 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count-total dock dock-count)
)
(defrule
    (can-build dock)
    (up-pending-objects c: dock < 5)
    (up-compare-goal dock-count g:< desired-military-buildings-per-type)
    (up-pending-objects c: dock < 1)
=>
    (build dock)
)
(defrule
    (can-train demolition-ship-line)
    (goal produce-units 1)
    (unit-available demolition-ship-line)
=>
    (train demolition-ship-line)
)
(defrule
    (goal produce-demolition-ships 1)
    (unit-available demolition-ship-line)
=>
    (up-modify-goal produce-units g:= old-produce-units)
)
(defrule
    (nor
      (building-type-count town-center > 0)
      (game-time >= 8)
    )
=>
    (up-jump-rule 747)
)
(defrule
    (true)
=>
    (set-goal attack-ready 0)
    (set-goal attacking 0)
    (set-goal do-backstep 0)
    (set-goal emergency-trash 0)
    (disable-self)
)
(defrule
    (or
      (civilian-population >= 25)
      (or
        (food-amount >= 2000)
        (population-cap < 75)
      )
    )
=>
    (up-modify-goal desired-age c:= imperial-age)
)
(defrule
    (not
      (civilian-population >= 25)
    )
    (nor
      (food-amount >= 2000)
      (population-cap < 75)
    )
=>
    (up-modify-goal desired-age c:= dark-age)
)
(defrule
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-goal attack-ready 1)
)
(defrule
    (goal attempted-researches 0)
=>
    (set-strategic-number sn-enable-training-queue 1)
)
(defrule
    (not
      (goal attempted-researches 0)
    )
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (true)
=>
    (set-goal dead-builders 0)
    (set-goal dead-female-builders 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact unit-type-count dead-male-builder dead-builders)
    (up-get-fact unit-type-count dead-female-builder dead-female-builders)
    (up-modify-goal dead-builders g:+ dead-female-builders)
)
(defrule
    (up-compare-goal dead-builders c:>= 8)
=>
    (set-strategic-number sn-percent-building-cancellation 100)
)
(defrule
    (up-compare-goal dead-builders c:>= 1)
    (not
      (up-compare-goal dead-builders c:>= 8)
    )
=>
    (set-strategic-number sn-percent-building-cancellation 20)
)
(defrule
    (not
      (up-compare-goal dead-builders c:>= 8)
    )
    (not
      (up-compare-goal dead-builders c:>= 1)
    )
=>
    (set-strategic-number sn-percent-building-cancellation 0)
)
(defrule
    (building-type-count town-center-foundation >= 1)
    (building-type-count town-center == 0)
=>
    (delete-building farm)
)
(defrule
    (up-compare-goal population-space-remaining > 10)
    (up-compare-goal desired-military-buildings-per-type c:< 8)
    (wood-amount >= 1000)
    (food-amount >= 1000)
    (gold-amount >= 1000)
=>
    (enable-timer 1 600)
    (disable-self)
)
(defrule
    (timer-triggered 1)
    (up-compare-goal population-space-remaining > 10)
    (up-compare-goal desired-military-buildings-per-type c:< 8)
    (wood-amount >= 1000)
    (food-amount >= 1000)
    (gold-amount >= 1000)
=>
    (up-modify-goal desired-military-buildings-per-type c:+ 1)
    (up-modify-goal desired-town-centers c:+ 1)
    (disable-timer 1)
    (enable-timer 1 600)
)
(defrule
    (game-time >= 2400)
=>
    (enable-timer 2 1800)
    (disable-self)
)
(defrule
    (timer-triggered 2)
    (game-time >= 2400)
=>
    (up-reset-unit c: -1)
    (disable-timer 2)
    (enable-timer 2 1800)
)
(defrule
    (building-type-count house == 0)
=>
    (up-assign-builders c: house c: 2)
    (disable-self)
)
(defrule
    (not
      (building-type-count house == 0)
    )
=>
    (up-assign-builders c: house c: 1)
    (disable-self)
)
(defrule
    (strategic-number sn-task-ungrouped-soldiers == 1)
=>
    (set-strategic-number sn-task-ungrouped-soldiers 0)
)
(defrule
    (true)
=>
    (enable-timer 3 30)
    (disable-self)
)
(defrule
    (goal attacking 0)
    (timer-triggered 3)
=>
    (set-strategic-number sn-task-ungrouped-soldiers 1)
)
(defrule
    (timer-triggered 3)
=>
    (disable-timer 3)
    (enable-timer 3 30)
)
(defrule
    (current-age >= castle-age)
=>
    (delete-building stone-wall-line)
    (delete-building palisade-wall)
    (delete-building 789)
    (delete-building 793)
    (delete-building 797)
    (delete-building 801)
    (delete-building 64)
    (delete-building 88)
    (delete-building 659)
    (delete-building 667)
    (delete-building 63)
    (delete-building 85)
    (delete-building 660)
    (delete-building 668)
)
(defrule
    (current-age == dark-age)
    (food-amount < 50)
    (up-pending-objects c: villager <= 1)
=>
    (up-drop-resources sheep-food c: 5)
    (up-drop-resources farm-food c: 5)
    (up-drop-resources forage-food c: 5)
    (up-drop-resources deer-food c: 20)
    (up-drop-resources boar-food c: 10)
)
(defrule
    (strategic-number sn-number-explore-groups >= 1)
    (town-under-attack)
=>
    (set-strategic-number sn-number-explore-groups 0)
    (set-strategic-number sn-total-number-explorers 0)
    (up-reset-unit c: -1)
)
(defrule
    (strategic-number sn-number-explore-groups == 0)
    (not
      (town-under-attack)
    )
=>
    (set-strategic-number sn-number-explore-groups 1)
    (set-strategic-number sn-total-number-explorers 1)
)
(defrule
    (civ-selected portuguese)
=>
    (set-goal 176 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 176)
    (disable-self)
)
(defrule
    (can-build feitoria)
    (up-pending-objects c: feitoria < 5)
    (building-type-count-total feitoria < 1)
    (goal 176 2)
    (civ-selected portuguese)
=>
    (build feitoria)
    (set-goal 339 1)
)
(defrule
    (can-build feitoria)
    (up-pending-objects c: feitoria < 5)
    (building-type-count-total feitoria < 2)
    (goal 176 3)
    (civ-selected portuguese)
=>
    (build feitoria)
    (set-goal 339 1)
)
(defrule
    (goal produce-unique-units 1)
    (current-age == feudal-age)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (true)
=>
    (set-goal 177 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 177)
    (disable-self)
)
(defrule
    (not
      (goal 177 1)
    )
=>
    (up-jump-rule 63)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (current-age >= castle-age)
        (building-type-count castle >= 1)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (research-completed ri-hoardings)
=>
    (up-jump-rule 5)
)
(defrule
    (not
      (building-type-count-total castle == 0)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal do-stone-mining 1)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (can-buy-commodity stone)
    (gold-amount >= 300)
    (stone-amount < 650)
    (current-age >= castle-age)
=>
    (buy-commodity stone)
)
(defrule
    (up-research-status c: ri-hoardings < research-pending)
    (research-available ri-hoardings)
    (not
      (research-completed ri-hoardings)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-hoardings)
    (goal do-research 1)
    (research-available ri-hoardings)
    (not
      (research-completed ri-hoardings)
    )
=>
    (research ri-hoardings)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (current-age >= castle-age)
        (building-type-count castle >= 1)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-architecture)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-architecture)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-masonry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-masonry < research-pending)
    (research-available ri-masonry)
    (not
      (research-completed ri-masonry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-masonry)
    (goal do-research 1)
    (research-available ri-masonry)
    (not
      (research-completed ri-masonry)
    )
=>
    (research ri-masonry)
)
(defrule
    (up-research-status c: ri-architecture < research-pending)
    (research-available ri-architecture)
    (not
      (research-completed ri-architecture)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-architecture)
    (goal do-research 1)
    (research-available ri-architecture)
    (not
      (research-completed ri-architecture)
    )
=>
    (research ri-architecture)
)
(defrule
    (nand
      (current-age == imperial-age)
      (and
        (current-age >= castle-age)
        (building-type-count castle >= 1)
      )
    )
=>
    (up-jump-rule 14)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bracer)
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (up-research-status c: ri-bracer < research-pending)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bracer)
    (goal do-research 1)
    (research-available ri-bracer)
    (not
      (research-completed ri-bracer)
    )
=>
    (research ri-bracer)
)
(defrule
    (nand
      (not
        (current-age == imperial-age)
      )
      (and
        (current-age >= castle-age)
        (building-type-count castle >= 1)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-masonry)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-masonry < research-pending)
    (research-available ri-masonry)
    (not
      (research-completed ri-masonry)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-masonry)
    (goal do-research 1)
    (research-available ri-masonry)
    (not
      (research-completed ri-masonry)
    )
=>
    (research ri-masonry)
)
(defrule
    (nand
      (not
        (current-age == imperial-age)
      )
      (and
        (current-age >= castle-age)
        (building-type-count castle >= 1)
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (research-completed ri-bodkin-arrow)
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fletching)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (wood-amount >= 200)
    (building-type-count-total blacksmith == 0)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fletching < research-pending)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fletching)
    (goal do-research 1)
    (research-available ri-fletching)
    (not
      (research-completed ri-fletching)
    )
=>
    (research ri-fletching)
)
(defrule
    (up-research-status c: ri-bodkin-arrow < research-pending)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-bodkin-arrow)
    (goal do-research 1)
    (research-available ri-bodkin-arrow)
    (not
      (research-completed ri-bodkin-arrow)
    )
=>
    (research ri-bodkin-arrow)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count castle >= 1)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-murder-holes)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-murder-holes < research-pending)
    (research-available ri-murder-holes)
    (not
      (research-completed ri-murder-holes)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-murder-holes)
    (goal do-research 1)
    (research-available ri-murder-holes)
    (not
      (research-completed ri-murder-holes)
    )
=>
    (research ri-murder-holes)
)
(defrule
    (strategic-number sn-stone-gatherer-percentage > 0)
    (false)
=>
    (set-goal 178 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 178)
    (disable-self)
)
(defrule
    (goal 178 1)
    (strategic-number sn-stone-gatherer-percentage > 0)
    (false)
=>
    (enable-wall-placement 2)
    (disable-self)
)
(defrule
    (can-build-wall 2 stone-wall-line)
    (goal 178 1)
    (strategic-number sn-stone-gatherer-percentage > 0)
    (false)
=>
    (build-wall 2 stone-wall-line)
)
(defrule
    (building-type-count-total stone-wall-line > 0)
    (can-build-gate 2)
    (building-type-count-total gate < 5)
    (goal 178 1)
    (strategic-number sn-stone-gatherer-percentage > 0)
    (false)
=>
    (build-gate 2)
)
(defrule
    (nand
      (goal 178 1)
      (and
        (strategic-number sn-stone-gatherer-percentage > 0)
        (false)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-fortified-wall)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-fortified-wall < research-pending)
    (research-available ri-fortified-wall)
    (not
      (research-completed ri-fortified-wall)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-fortified-wall)
    (goal do-research 1)
    (research-available ri-fortified-wall)
    (not
      (research-completed ri-fortified-wall)
    )
=>
    (research ri-fortified-wall)
)
(defrule
    (not
      (goal 177 2)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (nand
      (current-age >= castle-age)
      (building-type-count castle >= 1)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (research-completed ri-murder-holes)
=>
    (up-jump-rule 1)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
    (building-type-count-total university == 0)
=>
    (build university)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: ri-murder-holes < research-pending)
    (research-available ri-murder-holes)
    (not
      (research-completed ri-murder-holes)
    )
=>
    (up-modify-goal attempted-researches c:+ 1)
)
(defrule
    (can-research ri-murder-holes)
    (goal do-research 1)
    (research-available ri-murder-holes)
    (not
      (research-completed ri-murder-holes)
    )
=>
    (research ri-murder-holes)
)
(defrule
    (or
      (goal full-water-map 0)
      (or
        (warboat-count >= 10)
        (current-age == dark-age)
      )
    )
    (goal water-map 1)
    (cc-players-unit-type-count 0 sea-fish > 0)
    (not
      (town-under-attack)
    )
    (game-time >= 60)
=>
    (set-goal produce-fishing-ships 1)
)
(defrule
    (not
      (goal full-water-map 0)
    )
    (nor
      (warboat-count >= 10)
      (current-age == dark-age)
    )
    (goal water-map 1)
    (cc-players-unit-type-count 0 sea-fish > 0)
    (not
      (town-under-attack)
    )
    (game-time >= 60)
=>
    (set-goal produce-fishing-ships 0)
)
(defrule
    (nand
      (goal water-map 1)
      (and
        (cc-players-unit-type-count 0 sea-fish > 0)
        (and
          (not
            (town-under-attack)
          )
          (game-time >= 60)
        )
      )
    )
=>
    (set-goal produce-fishing-ships 0)
)
(defrule
    (up-compare-goal population-space-remaining c:< 5)
    (cc-players-unit-type-count 0 sea-fish == 0)
    (nand
      (goal water-map 1)
      (and
        (cc-players-unit-type-count 0 sea-fish > 0)
        (and
          (not
            (town-under-attack)
          )
          (game-time >= 60)
        )
      )
    )
=>
    (delete-unit fishing-ship)
)
(defrule
    (players-building-type-count any-ally market >= 1)
    (current-age >= imperial-age)
    (current-age >= castle-age)
    (or
      (goal full-water-map 0)
      (map-type team-islands)
    )
=>
    (set-goal produce-trade-carts 1)
)
(defrule
    (nand
      (players-building-type-count any-ally market >= 1)
      (current-age >= imperial-age)
    )
    (current-age >= castle-age)
    (or
      (goal full-water-map 0)
      (map-type team-islands)
    )
=>
    (set-goal produce-trade-carts 0)
)
(defrule
    (up-compare-goal population-space-remaining c:< 5)
    (nand
      (players-building-type-count any-ally market >= 1)
      (current-age >= imperial-age)
    )
    (current-age >= castle-age)
    (or
      (goal full-water-map 0)
      (map-type team-islands)
    )
=>
    (delete-unit trade-cart)
)
(defrule
    (goal attack-ready 1)
=>
    (chat-local-to-self "attack ready!")
    (disable-self)
)
(defrule
    (not
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 66)
)
(defrule
    (true)
=>
    (set-goal good-villagers 0)
    (set-goal good-trade-carts 0)
    (set-goal good-archers 0)
    (set-goal good-hand-cannoneers 0)
    (set-goal good-skirmishers 0)
    (set-goal good-cavalry-archers 0)
    (set-goal good-militia 0)
    (set-goal good-spearmen 0)
    (set-goal good-eagles 0)
    (set-goal good-scouts 0)
    (set-goal good-knights 0)
    (set-goal good-camels 0)
    (set-goal good-battle-elephants 0)
    (set-goal good-battering-rams 0)
    (set-goal good-mangonels 0)
    (set-goal good-scorpions 0)
    (set-goal good-bombard-cannons 0)
    (set-goal good-trebuchets 0)
    (set-goal good-unique-units 0)
    (set-goal good-monks 0)
    (set-goal good-genitours 0)
    (set-goal good-condottiero 0)
    (set-goal good-missionaries 0)
    (set-goal good-fishing-ships 0)
    (set-goal good-transport-ships 0)
    (set-goal good-galleys 0)
    (set-goal good-fire-ships 0)
    (set-goal good-cannon-galleons 0)
    (set-goal good-demolition-ships 0)
    (set-goal good-unique-units 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number aztec)
=>
    (set-goal good-eagles 1)
    (set-goal good-monks 1)
    (set-goal good-militia 1)
    (set-goal good-battering-rams 1)
    (set-goal good-mangonels 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number berbers)
=>
    (set-goal good-unique-units 0)
    (set-goal good-skirmishers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-camels 1)
    (set-goal good-scorpions 1)
    (set-goal good-genitours 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number briton)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number burmese)
=>
    (set-goal good-scouts 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-battle-elephants 1)
    (set-goal good-monks 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number byzantine)
=>
    (set-goal good-speamen 1)
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-camels 1)
    (set-goal good-battering-rams 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-monks 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number celtic)
=>
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-mangonels 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number chinese)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-miltia 1)
    (set-goal good-spearmen 1)
    (set-goal good-camels 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number ethiopian)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-spearmen 1)
    (set-goal good-mangonels 1)
    (set-goal good-scorpions 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number frankish)
=>
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-knights 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number gothic)
=>
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number hun)
=>
    (set-goal good-cavalry-archers 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number incan)
=>
    (set-goal good-eagles 1)
    (set-goal good-militia 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-archers 1)
    (set-goal good-spearmen 1)
    (set-goal good-skirmishers 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number indian)
=>
    (set-goal good-skirmishers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-camels 1)
    (set-goal good-scouts 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number italian)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-monks 1)
    (set-goal good-condottiero 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number japanese)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-monks 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number khmer)
=>
    (set-goal good-spearmen 1)
    (set-goal good-battle-elephants 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number korean)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-mangonels 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number magyar)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number malay)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-spearmen 1)
    (set-goal good-scorpions 1)
    (set-goal good-battle-elephants 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number malian)
=>
    (set-goal good-mangonels 1)
    (set-goal good-militia 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-galleys 1)
    (set-goal good-knights 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number mayan)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-eagles 1)
    (set-goal good-spearmen 1)
    (set-goal good-battering-rams 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number mongol)
=>
    (set-goal good-cavalry-archers 1)
    (set-goal good-scouts 1)
    (set-goal good-militia 1)
    (set-goal good-battering-rams 1)
    (set-goal good-mangonels 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number persian)
=>
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
    (set-goal good-camels 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-spearmen 1)
    (set-goal good-battering-rams 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number portuguese)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-knights 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number saracen)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-camels 1)
    (set-goal good-monks 1)
    (set-goal good-battering-rams 1)
    (set-goal good-mangonels 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number slavic)
=>
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scouts 1)
    (set-goal good-monks 1)
    (set-goal good-battering-rams 1)
    (set-goal good-mangonels 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number spanish)
=>
    (set-goal good-skirmishers 1)
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-scouts 1)
    (set-goal good-knights 1)
    (set-goal good-monks 1)
    (set-goal good-missionaries 1)
    (set-goal good-battering-rams 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number teutonic)
=>
    (set-goal good-hand-cannoneers 1)
    (set-goal good-militia 1)
    (set-goal good-spearmen 1)
    (set-goal good-monks 1)
    (set-goal good-mangonels 1)
    (set-goal good-scorpions 1)
    (set-goal good-fire-ships 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number turkish)
=>
    (set-goal good-hand-cannoneers 1)
    (set-goal good-cavalry-archers 1)
    (set-goal good-militia 1)
    (set-goal good-scouts 1)
    (set-goal good-camels 1)
    (set-goal good-battering-rams 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number vietnamese)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-battle-elephants 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ my-player-number viking)
=>
    (set-goal good-archers 1)
    (set-goal good-skirmishers 1)
    (set-goal good-militia 1)
    (set-goal good-battering-rams 1)
    (set-goal good-scorpions 1)
    (set-goal good-galleys 1)
    (disable-self)
)
(defrule
    (goal good-cavalry-archers 1)
    (players-civ any-ally berbers)
    (goal locked-teams 1)
=>
    (set-goal good-genitours 1)
    (disable-self)
)
(defrule
    (or
      (goal good-militia 1)
      (or
        (goal good-spearmen 1)
        (goal good-eagles 1)
      )
    )
    (players-civ any-ally italian)
    (goal locked-teams 1)
=>
    (set-goal good-condottiero 1)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal enemy-good-villagers 0)
    (set-goal enemy-good-trade-carts 0)
    (set-goal enemy-good-archers 0)
    (set-goal enemy-good-hand-cannoneers 0)
    (set-goal enemy-good-skirmishers 0)
    (set-goal enemy-good-cavalry-archers 0)
    (set-goal enemy-good-militia 0)
    (set-goal enemy-good-spearmen 0)
    (set-goal enemy-good-eagles 0)
    (set-goal enemy-good-scouts 0)
    (set-goal enemy-good-knights 0)
    (set-goal enemy-good-camels 0)
    (set-goal enemy-good-battle-elephants 0)
    (set-goal enemy-good-battering-rams 0)
    (set-goal enemy-good-mangonels 0)
    (set-goal enemy-good-scorpions 0)
    (set-goal enemy-good-bombard-cannons 0)
    (set-goal enemy-good-trebuchets 0)
    (set-goal enemy-good-unique-units 0)
    (set-goal enemy-good-monks 0)
    (set-goal enemy-good-genitours 0)
    (set-goal enemy-good-condottiero 0)
    (set-goal enemy-good-missionaries 0)
    (set-goal enemy-good-fishing-ships 0)
    (set-goal enemy-good-transport-ships 0)
    (set-goal enemy-good-galleys 0)
    (set-goal enemy-good-fire-ships 0)
    (set-goal enemy-good-cannon-galleons 0)
    (set-goal enemy-good-demolition-ships 0)
    (set-goal enemy-good-unique-units 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy aztec)
=>
    (set-goal enemy-good-eagles 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy berbers)
=>
    (set-goal enemy-good-unique-units 0)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-genitours 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy briton)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy burmese)
=>
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-battle-elephants 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy byzantine)
=>
    (set-goal enemy-good-speamen 1)
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy celtic)
=>
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy chinese)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-miltia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy ethiopian)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy frankish)
=>
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy gothic)
=>
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy hun)
=>
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy incan)
=>
    (set-goal enemy-good-eagles 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy indian)
=>
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy italian)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-condottiero 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy japanese)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy khmer)
=>
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-battle-elephants 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy korean)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy magyar)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy malay)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-battle-elephants 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy malian)
=>
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-galleys 1)
    (set-goal enemy-good-knights 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy mayan)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-eagles 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy mongol)
=>
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy persian)
=>
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy portuguese)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy saracen)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy slavic)
=>
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy spanish)
=>
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-knights 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-missionaries 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy teutonic)
=>
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-spearmen 1)
    (set-goal enemy-good-monks 1)
    (set-goal enemy-good-mangonels 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-fire-ships 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy turkish)
=>
    (set-goal enemy-good-hand-cannoneers 1)
    (set-goal enemy-good-cavalry-archers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-scouts 1)
    (set-goal enemy-good-camels 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy vietnamese)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-battle-elephants 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (players-civ any-enemy viking)
=>
    (set-goal enemy-good-archers 1)
    (set-goal enemy-good-skirmishers 1)
    (set-goal enemy-good-militia 1)
    (set-goal enemy-good-battering-rams 1)
    (set-goal enemy-good-scorpions 1)
    (set-goal enemy-good-galleys 1)
    (disable-self)
)
(defrule
    (goal full-water-map 0)
    (gold-amount < 3000)
    (up-compare-goal no-gold-mining-time c:>= 120)
    (resource-found gold)
    (unit-type-count trade-cart < 10)
    (game-time >= 1800)
    (goal attack-ready 1)
=>
    (set-goal emergency-trash 1)
)
(defrule
    (nand
      (goal emergency-trash 1)
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 23)
)
(defrule
    (true)
=>
    (up-modify-goal desired-military-buildings-per-type c:+ 3)
    (disable-self)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 2)
=>
    (build blacksmith)
    (set-goal 339 1)
)
(defrule
    (civ-selected magyar)
    (research-completed ri-mercenaries)
=>
    (set-goal unique-unit-cavalry-trash 1)
)
(defrule
    (nand
      (civ-selected magyar)
      (research-completed ri-mercenaries)
    )
=>
    (set-goal unique-unit-cavalry-trash 0)
)
(defrule
    (civ-selected malay)
    (research-completed ri-forced-levy)
=>
    (set-goal militia-trash 1)
)
(defrule
    (nand
      (civ-selected malay)
      (research-completed ri-forced-levy)
    )
=>
    (set-goal militia-trash 0)
)
(defrule
    (true)
=>
    (set-goal produce-archers 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-cavalry-archers 0)
)
(defrule
    (goal militia-trash 0)
=>
    (set-goal produce-militia 0)
)
(defrule
    (true)
=>
    (set-goal produce-eagles 0)
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-mangonels 0)
    (set-goal produce-scorpions 0)
    (set-goal produce-monks 0)
    (set-goal produce-missionaries 0)
    (set-goal produce-condottiero 0)
)
(defrule
    (goal unique-unit-cavalry-trash 0)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (goal full-water-map 0)
=>
    (set-goal produce-galleys 0)
    (set-goal produce-fire-ships 0)
)
(defrule
    (players-unit-type-count any-enemy scout-cavalry-line >= min-detection-units)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count any-enemy knight-line >= min-detection-units)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count any-enemy camel-line >= min-detection-units)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count any-enemy battle-elephant-line >= min-detection-units)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (goal good-scouts 1)
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-scouts 1)
    (set-goal produce-skirmishers 0)
)
(defrule
    (not
      (goal good-scouts 1)
    )
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (players-unit-type-count any-enemy archer-line >= min-detection-units)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-skirmishers 1)
)
(defrule
    (players-unit-type-count any-enemy spearman-line >= min-detection-units)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (goal produce-scouts 1)
    (goal unique-unit-cavalry-trash 1)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-scouts 0)
    (set-goal produce-unique-unit 1)
)
(defrule
    (goal produce-unique-units 0)
    (goal produce-scouts 0)
    (goal produce-skirmishers 0)
    (goal produce-spearmen 0)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (goal produce-skirmishers 1)
    (goal good-genitours 1)
    (goal produce-militia 0)
    (goal produce-unique-units 0)
=>
    (set-goal produce-skirmishers 0)
    (set-goal produce-genitours 1)
)
(defrule
    (nand
      (not
        (goal emergency-trash 1)
      )
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 24)
)
(defrule
    (true)
=>
    (set-goal total-units-selected 0)
    (up-modify-goal total-units-selected g:+ produce-archers)
    (up-modify-goal total-units-selected g:+ produce-hand-cannoneers)
    (up-modify-goal total-units-selected g:+ produce-skirmishers)
    (up-modify-goal total-units-selected g:+ produce-cavalry-archers)
    (up-modify-goal total-units-selected g:+ produce-militia)
    (up-modify-goal total-units-selected g:+ produce-spearmen)
    (up-modify-goal total-units-selected g:+ produce-eagles)
    (up-modify-goal total-units-selected g:+ produce-scouts)
    (up-modify-goal total-units-selected g:+ produce-knights)
    (up-modify-goal total-units-selected g:+ produce-camels)
    (up-modify-goal total-units-selected g:+ produce-battle-elephants)
    (up-modify-goal total-units-selected g:+ produce-mangonels)
    (up-modify-goal total-units-selected g:+ produce-scorpions)
    (up-modify-goal total-units-selected g:+ produce-unique-units)
    (up-modify-goal total-units-selected g:+ produce-monks)
    (up-modify-goal total-units-selected g:+ produce-genitours)
    (up-modify-goal total-units-selected g:+ produce-condottiero)
    (up-modify-goal total-units-selected g:+ produce-missionaries)
)
(defrule
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (set-goal 216 0)
    (generate-random-number 18)
    (up-get-fact random-number 0 216)
)
(defrule
    (goal produce-cavalry-archers 0)
    (goal 216 1)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-archers g:= good-archers)
)
(defrule
    (not
      (goal total-units-selected 0)
    )
    (goal 216 2)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-hand-cannoneers g:= good-hand-cannoneers)
)
(defrule
    (goal 216 3)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-skirmishers g:= good-skirmishers)
)
(defrule
    (goal produce-archers 0)
    (goal 216 4)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-cavalry-archers g:= good-cavalry-archers)
)
(defrule
    (goal produce-eagles 0)
    (goal 216 5)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-militia g:= good-militia)
)
(defrule
    (goal produce-eagles 0)
    (goal 216 6)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-spearmen g:= good-spearmen)
)
(defrule
    (goal produce-spearmen 0)
    (goal produce-militia 0)
    (goal 216 7)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-eagles g:= good-eagles)
)
(defrule
    (goal produce-knights 0)
    (goal produce-battle-elephants 0)
    (goal 216 8)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-scouts g:= good-scouts)
)
(defrule
    (goal produce-scouts 0)
    (goal produce-battle-elephants 0)
    (goal 216 9)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-knights g:= good-knights)
)
(defrule
    (goal 216 10)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-camels g:= good-camels)
)
(defrule
    (goal produce-scouts 0)
    (goal produce-knights 0)
    (goal 216 11)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-battle-elephants g:= good-battle-elephants)
)
(defrule
    (goal 216 12)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-mangonels g:= good-mangonels)
)
(defrule
    (goal 216 13)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-scorpions g:= good-scorpions)
)
(defrule
    (goal 216 14)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-unique-units g:= good-unique-units)
)
(defrule
    (goal 216 15)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-monks g:= good-monks)
)
(defrule
    (goal 216 16)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-genitours g:= good-genitours)
)
(defrule
    (not
      (goal total-units-selected 0)
    )
    (goal 216 17)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-condottiero g:= good-condottiero)
)
(defrule
    (goal 216 18)
    (up-compare-goal total-units-selected g:< desired-units-per-type)
=>
    (up-modify-goal produce-missionaries g:= good-missionaries)
)
(defrule
    (goal produce-fire-ships 0)
    (goal produce-galleys 0)
=>
    (set-goal 217 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 217)
)
(defrule
    (goal produce-galleys 0)
    (goal 217 1)
    (goal produce-fire-ships 0)
    (goal produce-galleys 0)
=>
    (up-modify-goal produce-galleys g:= good-galleys)
)
(defrule
    (goal produce-fire-ships 0)
    (goal 217 2)
    (goal produce-fire-ships 0)
    (goal produce-galleys 0)
=>
    (up-modify-goal produce-fire-ships g:= good-fire-ships)
)
(defrule
    (goal 217 3)
    (goal produce-fire-ships 0)
    (goal produce-galleys 0)
=>
    (up-modify-goal produce-galleys g:= good-galleys)
    (up-modify-goal produce-fire-ships g:= good-fire-ships)
)
(defrule
    (nand
      (not
        (goal emergency-trash 1)
      )
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 46)
)
(defrule
    (not
      (players-unit-type-count any-enemy monk-set >= min-detection-units)
    )
=>
    (up-jump-rule 3)
)
(defrule
    (true)
=>
    (set-goal produce-battle-elephants 0)
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
)
(defrule
    (goal unique-unit-is-expensive 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (true)
=>
    (set-goal produce-mangonels 0)
)
(defrule
    (not
      (players-unit-type-count any-enemy missionary >= min-detection-units)
    )
=>
    (up-jump-rule 3)
)
(defrule
    (true)
=>
    (set-goal produce-battle-elephants 0)
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
)
(defrule
    (goal unique-unit-is-expensive 1)
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (true)
=>
    (set-goal produce-mangonels 0)
)
(defrule
    (players-unit-type-count any-enemy archer >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (players-unit-type-count any-enemy cavalry-archer-line >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (players-unit-type-count any-enemy mangonel-line >= min-detection-units)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-skirmishers 0)
)
(defrule
    (players-unit-type-count any-enemy bombard-cannon >= min-detection-units)
=>
    (set-goal produce-scorpions 0)
)
(defrule
    (not
      (players-unit-type-count any-enemy knight-line >= min-detection-units)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-mangonels 0)
)
(defrule
    (not
      (players-unit-type-count any-enemy scout-cavalry-line >= min-detection-units)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-mangonels 0)
)
(defrule
    (not
      (players-unit-type-count any-enemy camel-line >= min-detection-units)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-mangonels 0)
)
(defrule
    (not
      (players-unit-type-count any-enemy battle-elephant-line >= min-detection-units)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-mangonels 0)
)
(defrule
    (not
      (players-unit-type-count any-enemy war-elephant-line >= min-detection-units)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-mangonels 0)
)
(defrule
    (nand
      (players-unit-type-count any-enemy archer >= min-detection-units)
      (goal desired-units-per-type 1)
    )
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-condottiero 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-monks 0)
    (set-goal produce-missionaries 0)
)
(defrule
    (goal unique-unit-is-infantry 1)
    (not
      (or
        (civ-selected gothic)
        (or
          (civ-selected malay)
          (civ-selected celtic)
        )
      )
    )
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (nand
      (players-unit-type-count any-enemy chu-ko-nu-line >= min-detection-units)
      (goal desired-units-per-type 1)
    )
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-condottiero 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-monks 0)
    (set-goal produce-missionaries 0)
)
(defrule
    (goal unique-unit-is-infantry 1)
    (not
      (or
        (civ-selected gothic)
        (or
          (civ-selected malay)
          (civ-selected celtic)
        )
      )
    )
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (nand
      (players-unit-type-count any-enemy plumed-archer-line >= min-detection-units)
      (goal desired-units-per-type 1)
    )
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-condottiero 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-monks 0)
    (set-goal produce-missionaries 0)
)
(defrule
    (goal unique-unit-is-infantry 1)
    (not
      (or
        (civ-selected gothic)
        (or
          (civ-selected malay)
          (civ-selected celtic)
        )
      )
    )
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (nand
      (players-unit-type-count any-enemy hand-cannoneer >= min-detection-units)
      (goal desired-units-per-type 1)
    )
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-condottiero 0)
)
(defrule
    (goal unique-unit-is-infantry 1)
    (not
      (or
        (civ-selected gothic)
        (or
          (civ-selected malay)
          (civ-selected celtic)
        )
      )
    )
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (nand
      (players-unit-type-count any-enemy scorpion-line >= min-detection-units)
      (goal desired-units-per-type 1)
    )
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-condottiero 0)
)
(defrule
    (goal unique-unit-is-infantry 1)
    (not
      (or
        (civ-selected gothic)
        (or
          (civ-selected malay)
          (civ-selected celtic)
        )
      )
    )
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (nand
      (players-unit-type-count any-enemy jaguar-man-line >= min-detection-units)
      (goal desired-units-per-type 1)
    )
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-condottiero 0)
)
(defrule
    (goal unique-unit-is-infantry 1)
    (not
      (or
        (civ-selected gothic)
        (or
          (civ-selected malay)
          (civ-selected celtic)
        )
      )
    )
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (nand
      (players-unit-type-count any-enemy teutonic-knight-line >= min-detection-units)
      (goal desired-units-per-type 1)
    )
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-condottiero 0)
)
(defrule
    (goal unique-unit-is-infantry 1)
    (not
      (or
        (civ-selected gothic)
        (or
          (civ-selected malay)
          (civ-selected celtic)
        )
      )
    )
=>
    (set-goal produce-unique-units 0)
)
(defrule
    (nand
      (players-unit-type-count any-enemy spearman-line >= min-detection-units)
      (goal desired-units-per-type 1)
    )
=>
    (up-jump-rule 2)
)
(defrule
    (true)
=>
    (set-goal produce-knights 0)
    (set-goal produce-scouts 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-camels 0)
)
(defrule
    (goal unique-unit-is-cavalry 1)
    (goal unique-unit-counters-infantry 0)
=>
    (set-goal produce-unique-unit 0)
)
(defrule
    (nand
      (not
        (goal emergency-trash 1)
      )
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 17)
)
(defrule
    (goal partial-ranged-blacksmith-investment 1)
    (goal produce-genitours 0)
=>
    (set-goal produce-skirmishers 0)
)
(defrule
    (players-unit-type-count target-player skirmisher-line >= min-detection-units)
    (goal partial-ranged-blacksmith-investment 1)
    (goal produce-genitours 0)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (players-unit-type-count target-player archer-line >= min-detection-units)
    (goal partial-ranged-blacksmith-investment 1)
    (goal produce-genitours 0)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (players-unit-type-count target-player cavalry-archer-line >= min-detection-units)
    (goal partial-ranged-blacksmith-investment 1)
    (goal produce-genitours 0)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (players-unit-type-count target-player spearman-line >= min-detection-units)
    (goal partial-ranged-blacksmith-investment 1)
    (goal produce-genitours 0)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (players-unit-type-count target-player war-wagon-line >= min-detection-units)
    (goal partial-ranged-blacksmith-investment 1)
    (goal produce-genitours 0)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (nand
      (goal partial-ranged-blacksmith-investment 1)
      (goal produce-genitours 0)
    )
=>
    (set-goal produce-skirmishers 0)
)
(defrule
    (goal partial-infantry-blacksmith-investment 1)
    (or
      (current-age == feudal-age)
      (or
        (research-available ri-pikeman)
        (research-completed ri-pikeman)
      )
    )
    (goal produce-camels 0)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (players-unit-type-count target-player scout-cavalry-line >= min-detection-units)
    (goal partial-infantry-blacksmith-investment 1)
    (or
      (current-age == feudal-age)
      (or
        (research-available ri-pikeman)
        (research-completed ri-pikeman)
      )
    )
    (goal produce-camels 0)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count target-player knight-line >= min-detection-units)
    (goal produce-monks 0)
    (goal partial-infantry-blacksmith-investment 1)
    (or
      (current-age == feudal-age)
      (or
        (research-available ri-pikeman)
        (research-completed ri-pikeman)
      )
    )
    (goal produce-camels 0)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count target-player battle-elephant-line >= min-detection-units)
    (goal produce-monks 0)
    (goal partial-infantry-blacksmith-investment 1)
    (or
      (current-age == feudal-age)
      (or
        (research-available ri-pikeman)
        (research-completed ri-pikeman)
      )
    )
    (goal produce-camels 0)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count target-player camel-line >= min-detection-units)
    (goal produce-monks 0)
    (goal partial-infantry-blacksmith-investment 1)
    (or
      (current-age == feudal-age)
      (or
        (research-available ri-pikeman)
        (research-completed ri-pikeman)
      )
    )
    (goal produce-camels 0)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count target-player war-elephant-line >= min-detection-units)
    (goal produce-monks 0)
    (goal partial-infantry-blacksmith-investment 1)
    (or
      (current-age == feudal-age)
      (or
        (research-available ri-pikeman)
        (research-completed ri-pikeman)
      )
    )
    (goal produce-camels 0)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count target-player cataphract-line >= min-detection-units)
    (goal produce-monks 0)
    (goal partial-infantry-blacksmith-investment 1)
    (or
      (current-age == feudal-age)
      (or
        (research-available ri-pikeman)
        (research-completed ri-pikeman)
      )
    )
    (goal produce-camels 0)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (nand
      (goal partial-infantry-blacksmith-investment 1)
      (and
        (or
          (current-age == feudal-age)
          (or
            (research-available ri-pikeman)
            (research-completed ri-pikeman)
          )
        )
        (goal produce-camels 0)
      )
    )
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (can-train spearman-line)
    (unit-type-count-total spearman-line < 4)
    (players-unit-type-count target-player scout-cavalry-line >= 2)
    (current-age == feudal-age)
    (goal produce-spearmen 0)
=>
    (train spearman-line)
)
(defrule
    (can-train mangonel-line)
    (unit-type-count-total mangonel-line < 2)
    (or
      (players-unit-type-count target-player scorpion-line >= 1)
      (players-unit-type-count target-player skirmisher-line >= 1)
    )
    (current-age == castle-age)
    (goal produce-mangonels 0)
=>
    (train mangonel-line)
)
(defrule
    (not
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 7)
)
(defrule
    (goal attacking 0)
    (town-under-attack)
    (not
      (enemy-buildings-in-town)
    )
=>
    (set-goal produce-battering-rams 0)
    (set-goal produce-trebuchets 0)
    (set-goal produce-cannon-galleons 0)
    (set-goal produce-demolition-ships 0)
)
(defrule
    (nand
      (goal attacking 0)
      (and
        (town-under-attack)
        (not
          (enemy-buildings-in-town)
        )
      )
    )
=>
    (set-goal produce-battering-rams 0)
    (set-goal produce-trebuchets 0)
    (set-goal produce-cannon-galleons 0)
    (set-goal produce-demolition-ships 0)
)
(defrule
    (current-age == imperial-age)
    (unit-type-count-total cannon-galleon-line < max-cannon-galleons)
    (or
      (research-available ri-cannon-galleon)
      (unit-available cannon-galleon-line)
    )
    (goal water-map 1)
    (building-type-count dock >= 1)
    (nand
      (goal attacking 0)
      (and
        (town-under-attack)
        (not
          (enemy-buildings-in-town)
        )
      )
    )
=>
    (set-goal produce-cannon-galleons 1)
)
(defrule
    (up-compare-goal target-warboat-percentage c:<= 100)
    (up-compare-goal target-warboat-count c:>= 8)
    (unit-type-count-total demolition-ship-line < max-demolition-ships)
    (goal water-map 1)
    (building-type-count dock >= 1)
    (nand
      (goal attacking 0)
      (and
        (town-under-attack)
        (not
          (enemy-buildings-in-town)
        )
      )
    )
=>
    (set-goal produce-demolition-ships 1)
)
(defrule
    (unit-type-count-total battering-ram-line < max-castle-age-rams)
    (current-age == castle-age)
    (or
      (military-population >= 20)
      (or
        (enemy-buildings-in-town)
        (goal threat-source castle)
      )
    )
    (or
      (current-age == castle-age)
      (or
        (building-type-count castle == 0)
        (goal good-battering-rams 1)
      )
    )
    (nand
      (goal attacking 0)
      (and
        (town-under-attack)
        (not
          (enemy-buildings-in-town)
        )
      )
    )
=>
    (set-goal produce-battering-rams 1)
)
(defrule
    (unit-type-count-total battering-ram-line < max-imperial-age-rams)
    (current-age == imperial-age)
    (or
      (military-population >= 20)
      (or
        (enemy-buildings-in-town)
        (goal threat-source castle)
      )
    )
    (or
      (current-age == castle-age)
      (or
        (building-type-count castle == 0)
        (goal good-battering-rams 1)
      )
    )
    (nand
      (goal attacking 0)
      (and
        (town-under-attack)
        (not
          (enemy-buildings-in-town)
        )
      )
    )
=>
    (set-goal produce-battering-rams 1)
)
(defrule
    (unit-type-count-total trebuchet-set < max-trebs)
    (up-pending-objects c: trebuchet-set == 0)
    (current-age == imperial-age)
    (not
      (current-age == castle-age)
    )
    (nor
      (building-type-count castle == 0)
      (goal good-battering-rams 1)
    )
    (nand
      (goal attacking 0)
      (and
        (town-under-attack)
        (not
          (enemy-buildings-in-town)
        )
      )
    )
=>
    (set-goal produce-trebuchets 1)
)
(defrule
    (not
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 3)
)
(defrule
    (unit-type-count-total transport-ship < 4)
    (goal full-water-map 1)
    (soldier-count > 5)
=>
    (set-goal produce-transport-ships 1)
)
(defrule
    (not
      (unit-type-count-total transport-ship < 4)
    )
    (goal full-water-map 1)
    (soldier-count > 5)
=>
    (set-goal produce-transport-ships 0)
)
(defrule
    (nand
      (goal full-water-map 1)
      (soldier-count > 5)
    )
=>
    (set-goal produce-transport-ships 0)
)
(defrule
    (not
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 3)
)
(defrule
    (true)
=>
    (chat-local-to-self "attacking aggressively")
    (disable-self)
)
(defrule
    (or
      (up-compare-goal target-military-percentage c:>= 110)
      (up-compare-goal population-space-remaining c:<= 5)
    )
    (military-population >= 8)
    (goal attacking 0)
=>
    (set-goal attacking 1)
)
(defrule
    (up-compare-goal target-military-percentage c:<= 80)
    (goal attacking 1)
    (nand
      (or
        (up-compare-goal target-military-percentage c:>= 110)
        (up-compare-goal population-space-remaining c:<= 5)
      )
      (and
        (military-population >= 8)
        (goal attacking 0)
      )
    )
=>
    (set-goal attacking 0)
)
(defrule
    (not
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 27)
)
(defrule
    (true)
=>
    (chat-local-to-self "being reckless and thoughtful, chaotically!")
    (set-goal 218 0)
    (disable-self)
    (generate-random-number 2)
    (up-get-fact random-number 0 218)
)
(defrule
    (goal 218 1)
=>
    (set-goal balanced-aggressive 1)
    (disable-self)
)
(defrule
    (goal 218 2)
=>
    (set-goal balanced-aggressive 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal aggressive-override 0)
    (set-goal passive-override 0)
)
(defrule
    (true)
=>
    (enable-timer 4 300)
    (disable-self)
)
(defrule
    (timer-triggered 4)
=>
    (set-goal 222 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 222)
)
(defrule
    (goal 222 1)
    (timer-triggered 4)
=>
    (set-goal balanced-aggressive 1)
)
(defrule
    (goal 222 2)
    (timer-triggered 4)
=>
    (set-goal balanced-aggressive 0)
)
(defrule
    (timer-triggered 4)
=>
    (disable-timer 4)
    (enable-timer 4 300)
)
(defrule
    (up-compare-goal target-military-percentage c:> 100)
    (up-compare-goal target-military-percentage c:<= 150)
    (goal attacking 1)
=>
    (set-goal aggressive-override 1)
)
(defrule
    (up-compare-goal target-military-percentage c:> 100)
    (up-compare-goal target-military-percentage c:<= 150)
    (goal attacking 1)
=>
    (enable-timer 5 30)
    (disable-self)
)
(defrule
    (timer-triggered 5)
    (up-compare-goal target-military-percentage c:> 100)
    (up-compare-goal target-military-percentage c:<= 150)
    (goal attacking 1)
=>
    (chat-local-to-self "make military lead bigger")
    (disable-timer 5)
    (enable-timer 5 30)
)
(defrule
    (up-compare-goal largest-enemy-military-percentage c:>= 200)
    (military-population >= 30)
    (not
      (goal attempted-researches 0)
    )
=>
    (set-goal passive-override 1)
)
(defrule
    (up-compare-goal largest-enemy-military-percentage c:>= 200)
    (military-population >= 30)
    (not
      (goal attempted-researches 0)
    )
=>
    (enable-timer 6 30)
    (disable-self)
)
(defrule
    (timer-triggered 6)
    (up-compare-goal largest-enemy-military-percentage c:>= 200)
    (military-population >= 30)
    (not
      (goal attempted-researches 0)
    )
=>
    (chat-local-to-self "massive lead, do techs.")
    (disable-timer 6)
    (enable-timer 6 30)
)
(defrule
    (nand
      (or
        (goal balanced-aggressive 1)
        (goal aggressive-override 1)
      )
      (goal passive-override 0)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (chat-local-to-self "being a little reckless")
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal produce-units 1)
    (set-goal do-research 1)
)
(defrule
    (goal produce-militia 1)
    (up-research-status c: ri-man-at-arms < research-pending)
=>
    (enable-timer 7 30)
    (disable-self)
)
(defrule
    (timer-triggered 7)
    (goal produce-militia 1)
    (up-research-status c: ri-man-at-arms < research-pending)
=>
    (chat-local-to-self "waiting for man at arms")
    (disable-timer 7)
    (enable-timer 7 30)
)
(defrule
    (goal produce-militia 1)
    (up-research-status c: ri-man-at-arms < research-pending)
=>
    (set-goal produce-units 0)
)
(defrule
    (or
      (goal balanced-aggressive 1)
      (goal aggressive-override 1)
    )
    (goal passive-override 0)
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (chat-local-to-self "being thoughtful")
    (disable-self)
)
(defrule
    (goal produce-units 0)
    (or
      (goal attempted-researches 0)
      (or
        (and
          (town-under-attack)
          (goal attacking 0)
        )
        (and
          (up-compare-goal target-military-percentage c:< 100)
          (military-population < 10)
        )
      )
    )
=>
    (chat-local-to-self "go! (thoughtful)")
)
(defrule
    (or
      (goal attempted-researches 0)
      (or
        (and
          (town-under-attack)
          (goal attacking 0)
        )
        (and
          (up-compare-goal target-military-percentage c:< 100)
          (military-population < 10)
        )
      )
    )
=>
    (set-goal produce-units 1)
    (set-goal do-research 1)
)
(defrule
    (goal produce-units 1)
    (not
      (goal attempted-researches 0)
    )
    (nor
      (and
        (town-under-attack)
        (goal attacking 0)
      )
      (and
        (up-compare-goal target-military-percentage c:< 100)
        (military-population < 10)
      )
    )
=>
    (chat-local-to-self "hold! (thoughtful)")
)
(defrule
    (not
      (goal attempted-researches 0)
    )
    (nor
      (and
        (town-under-attack)
        (goal attacking 0)
      )
      (and
        (up-compare-goal target-military-percentage c:< 100)
        (military-population < 10)
      )
    )
=>
    (set-goal produce-units 0)
    (set-goal do-research 1)
)
(defrule
    (nand
      (goal full-water-map 1)
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (set-goal allow-land-units 0)
)
(defrule
    (nand
      (goal full-water-map 1)
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (set-goal allow-naval-units 1)
)
(defrule
    (nand
      (not
        (goal full-water-map 1)
      )
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (set-goal allow-land-units 1)
)
(defrule
    (nand
      (not
        (goal full-water-map 1)
      )
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (set-goal allow-naval-units 0)
)
(defrule
    (players-unit-type-count any-enemy fishing-ship > 0)
=>
    (set-goal allow-naval-units 1)
)
(defrule
    (players-unit-type-count any-enemy dock > 0)
=>
    (set-goal allow-naval-units 1)
)
(defrule
    (or
      (players-unit-type-count any-enemy galley-line > 0)
      (players-unit-type-count any-enemy fire-ship-line > 0)
    )
=>
    (set-goal allow-naval-units 1)
)
(defrule
    (up-compare-goal largest-enemy-warboat-percentage c:>= 200)
    (warboat-count >= 10)
=>
    (set-goal allow-naval-units 0)
)
(defrule
    (not
      (goal attack-ready 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (true)
=>
    (up-find-player enemy find-closest 223)
    (up-modify-sn sn-target-player-number g:= 223)
    (up-send-scout group-type-land-explore scout-enemy)
    (disable-self)
)
(defrule
    (or
      (not
        (player-in-game target-player)
      )
      (not
        (stance-toward target-player enemy)
      )
    )
=>
    (up-find-player enemy find-closest 223)
    (up-modify-sn sn-target-player-number g:= 223)
    (up-send-scout group-type-land-explore scout-enemy)
)
(defrule
    (strategic-number sn-target-player-number != -1)
    (or
      (not
        (player-in-game target-player)
      )
      (not
        (stance-toward target-player enemy)
      )
    )
=>
    (up-chat-data-to-self "Retargeting to player %d" s: sn-target-player-number)
)
(defrule
    (true)
=>
    (set-goal next-retarget 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal threatening-important 0)
)
(defrule
    (or
      (goal threat-target castle)
      (or
        (goal threat-target town-center)
        (or
          (goal threat-target mining-camp)
          (goal threat-target house)
        )
      )
    )
=>
    (set-goal threatening-important 1)
)
(defrule
    (or
      (goal threat-target barracks)
      (or
        (goal threat-target archery-range)
        (or
          (goal threat-target stable)
          (or
            (goal threat-target siege-workshop)
            (goal threat-target dock)
          )
        )
      )
    )
=>
    (set-goal threatening-important 1)
)
(defrule
    (up-compare-goal threat-player s:!= sn-target-player-number)
    (up-compare-goal threat-player c:>= 1)
    (up-compare-goal threat-player c:<= 8)
    (up-compare-goal game-time-goal g:>= next-retarget)
    (goal threatening-important 1)
=>
    (up-modify-sn sn-target-player-number g:= threat-player)
    (up-modify-sn sn-focus-player-number g:= threat-player)
    (up-reset-unit c: -1)
    (up-retreat-now)
    (up-modify-goal next-retarget g:= game-time-goal)
    (up-modify-goal next-retarget c:+ retarget-interval)
    (up-chat-data-to-self "Retaliating against player %d" g: threat-player)
)
(defrule
    (nand
      (unit-type-count transport-ship > 0)
      (and
        (not
          (goal enemy-players-count 0)
        )
        (goal attack-ready 1)
      )
    )
=>
    (up-jump-rule 5)
)
(defrule
    (strategic-number sn-maximum-town-size == 255)
=>
    (up-modify-sn sn-maximum-town-size s:= sn-minimum-town-size)
)
(defrule
    (goal attacking 1)
=>
    (enable-timer 8 60)
    (disable-self)
)
(defrule
    (timer-triggered 8)
    (goal attacking 1)
=>
    (attack-now)
    (disable-timer 8)
    (enable-timer 8 60)
)
(defrule
    (goal attacking 1)
=>
    (set-goal did-reset 0)
)
(defrule
    (goal did-reset 0)
    (not
      (goal attacking 1)
    )
=>
    (up-reset-unit c: -1)
    (set-goal did-reset 1)
)
(defrule
    (nand
      (not
        (unit-type-count transport-ship > 0)
      )
      (and
        (not
          (goal enemy-players-count 0)
        )
        (goal attack-ready 1)
      )
    )
=>
    (up-jump-rule 6)
)
(defrule
    (true)
=>
    (set-strategic-number sn-number-attack-groups 0)
)
(defrule
    (strategic-number sn-maximum-town-size <= 30)
    (goal attacking 1)
=>
    (set-strategic-number sn-maximum-town-size 50)
)
(defrule
    (enemy-buildings-in-town)
    (goal attacking 1)
=>
    (up-modify-sn sn-maximum-town-size c:- 1)
)
(defrule
    (not
      (enemy-buildings-in-town)
    )
    (goal attacking 1)
=>
    (up-modify-sn sn-maximum-town-size c:+ 5)
)
(defrule
    (goal attacking 1)
=>
    (set-strategic-number sn-number-boat-attack-groups 200)
)
(defrule
    (strategic-number sn-maximum-town-size > 30)
    (not
      (goal attacking 1)
    )
=>
    (up-modify-sn sn-maximum-town-size s:= sn-minimum-town-size)
    (set-strategic-number sn-number-boat-attack-groups 0)
)
(defrule
    (not
      (goal attack-ready 1)
    )
=>
    (set-goal do-research 1)
    (set-goal produce-units 0)
)
(defrule
    (nand
      (goal resign 0)
      (and
        (goal locked-teams 0)
        (or
          (goal team-game 1)
          (goal free-for-all 1)
        )
      )
    )
=>
    (up-jump-rule 351)
)
(defrule
    (true)
=>
    (set-goal want-alliance 0)
    (set-goal accept-alliance-requests 1)
    (set-goal player-1-is-bad-egg 0)
    (set-goal player-1-alliance-request-time-stamp 0)
    (set-goal allied-with-1 0)
    (set-goal tried-alliance-with-1 0)
    (set-goal player-2-is-bad-egg 0)
    (set-goal player-2-alliance-request-time-stamp 0)
    (set-goal allied-with-2 0)
    (set-goal tried-alliance-with-2 0)
    (set-goal player-3-is-bad-egg 0)
    (set-goal player-3-alliance-request-time-stamp 0)
    (set-goal allied-with-3 0)
    (set-goal tried-alliance-with-3 0)
    (set-goal player-4-is-bad-egg 0)
    (set-goal player-4-alliance-request-time-stamp 0)
    (set-goal allied-with-4 0)
    (set-goal tried-alliance-with-4 0)
    (set-goal player-5-is-bad-egg 0)
    (set-goal player-5-alliance-request-time-stamp 0)
    (set-goal allied-with-5 0)
    (set-goal tried-alliance-with-5 0)
    (set-goal player-6-is-bad-egg 0)
    (set-goal player-6-alliance-request-time-stamp 0)
    (set-goal allied-with-6 0)
    (set-goal tried-alliance-with-6 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal player-7-is-bad-egg 0)
    (set-goal player-7-alliance-request-time-stamp 0)
    (set-goal allied-with-7 0)
    (set-goal tried-alliance-with-7 0)
    (set-goal player-8-is-bad-egg 0)
    (set-goal player-8-alliance-request-time-stamp 0)
    (set-goal allied-with-8 0)
    (set-goal tried-alliance-with-8 0)
    (set-stance every-enemy neutral)
    (set-goal no-enemies-stamp 0)
    (set-goal chat-betray-player -1)
    (set-goal chat-betrayed-by-player -1)
    (set-goal 264 0)
    (generate-random-number 4)
    (up-get-fact random-number 0 264)
    (disable-self)
)
(defrule
    (not
      (goal 264 1)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (chat-local-to-self "Being backstabbing.")
    (set-goal team-game 0)
    (set-goal free-for-all 1)
    (set-goal accept-alliance-requests 1)
    (disable-self)
)
(defrule
    (up-compare-goal neutral-or-enemy-players-count c:> 0)
    (military-population < 30)
=>
    (set-goal want-alliance 1)
)
(defrule
    (up-compare-goal neutral-or-enemy-players-count c:>= 2)
    (not
      (military-population < 30)
    )
=>
    (set-goal want-alliance 1)
)
(defrule
    (goal neutral-or-enemy-players-count 0)
    (not
      (up-compare-goal neutral-or-enemy-players-count c:>= 2)
    )
    (not
      (military-population < 30)
    )
=>
    (set-goal want-alliance -1)
)
(defrule
    (not
      (up-compare-goal neutral-or-enemy-players-count c:>= 2)
    )
    (not
      (goal neutral-or-enemy-players-count 0)
    )
    (not
      (military-population < 30)
    )
=>
    (set-goal want-alliance 0)
)
(defrule
    (not
      (goal 264 2)
    )
=>
    (up-jump-rule 3)
)
(defrule
    (true)
=>
    (chat-local-to-self "Being introverted.")
    (set-goal team-game 0)
    (set-goal free-for-all 1)
    (set-goal accept-alliance-requests 1)
    (disable-self)
)
(defrule
    (goal neutral-or-enemy-players-count 0)
    (military-population >= 30)
=>
    (set-goal want-alliance -1)
)
(defrule
    (nand
      (goal neutral-or-enemy-players-count 0)
      (military-population >= 30)
    )
=>
    (set-goal want-alliance 0)
)
(defrule
    (not
      (goal 264 3)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (chat-local-to-self "Being pragmatic.")
    (set-goal team-game 0)
    (set-goal free-for-all 1)
    (disable-self)
)
(defrule
    (up-compare-goal neutral-or-enemy-players-count g:> ally-players-count)
=>
    (set-goal accept-alliance-requests 1)
    (set-goal want-alliance 1)
)
(defrule
    (up-compare-goal neutral-or-enemy-players-count c:> 2)
    (not
      (up-compare-goal neutral-or-enemy-players-count g:> ally-players-count)
    )
=>
    (set-goal accept-alliance-requests 1)
    (set-goal want-alliance 0)
)
(defrule
    (goal neutral-or-enemy-players-count 0)
    (military-population >= 30)
    (not
      (up-compare-goal neutral-or-enemy-players-count g:> ally-players-count)
    )
    (not
      (up-compare-goal neutral-or-enemy-players-count c:> 2)
    )
=>
    (set-goal accept-alliance-requests 0)
    (set-goal want-alliance -1)
)
(defrule
    (not
      (up-compare-goal neutral-or-enemy-players-count c:> 2)
    )
    (not
      (up-compare-goal neutral-or-enemy-players-count g:> ally-players-count)
    )
    (nand
      (goal neutral-or-enemy-players-count 0)
      (military-population >= 30)
    )
=>
    (set-goal accept-alliance-requests 0)
    (set-goal want-alliance 0)
)
(defrule
    (not
      (goal 264 4)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (chat-local-to-self "Being pair-seeking.")
    (set-goal team-game 1)
    (set-goal free-for-all 0)
    (disable-self)
)
(defrule
    (up-compare-goal ally-players-count c:== 0)
=>
    (set-goal accept-alliance-requests 1)
    (set-goal want-alliance 1)
)
(defrule
    (up-compare-goal neutral-or-enemy-players-count c:> 2)
    (not
      (up-compare-goal ally-players-count c:== 0)
    )
=>
    (set-goal accept-alliance-requests 1)
    (set-goal want-alliance 0)
)
(defrule
    (goal neutral-or-enemy-players-count 0)
    (up-compare-goal ally-players-count c:>= 2)
    (military-population >= 30)
    (not
      (up-compare-goal ally-players-count c:== 0)
    )
    (not
      (up-compare-goal neutral-or-enemy-players-count c:> 2)
    )
=>
    (set-goal accept-alliance-requests 0)
    (set-goal want-alliance -1)
)
(defrule
    (not
      (up-compare-goal neutral-or-enemy-players-count c:> 2)
    )
    (not
      (up-compare-goal ally-players-count c:== 0)
    )
    (nand
      (goal neutral-or-enemy-players-count 0)
      (and
        (up-compare-goal ally-players-count c:>= 2)
        (military-population >= 30)
      )
    )
=>
    (set-goal accept-alliance-requests 0)
    (set-goal want-alliance 0)
)
(defrule
    (or
      (not
        (and
          (goal enemy-players-count 0)
          (goal neutral-players-count 0)
        )
      )
      (up-compare-goal population-space-remaining c:> 5)
    )
=>
    (up-modify-goal no-enemies-stamp g:= game-time-goal)
)
(defrule
    (true)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- no-enemies-stamp)
)
(defrule
    (nand
      (up-compare-goal temp c:>= allied-victory-timeout)
      (game-time >= 2400)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 265 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 265)
    (disable-self)
)
(defrule
    (goal 265 1)
=>
    (chat-to-all "We aren't winning togther, then? What a shame.")
    (disable-self)
)
(defrule
    (goal 265 2)
=>
    (chat-to-all "I suppose now we should fight.")
    (disable-self)
)
(defrule
    (goal 265 3)
=>
    (chat-to-all "We did it, but the game is not over. This is just the beginning.")
    (disable-self)
)
(defrule
    (up-compare-goal temp c:>= allied-victory-timeout)
    (game-time >= 2400)
=>
    (set-goal player-1-is-bad-egg 1)
    (set-goal player-2-is-bad-egg 1)
    (set-goal player-3-is-bad-egg 1)
    (set-goal player-4-is-bad-egg 1)
    (set-goal player-5-is-bad-egg 1)
    (set-goal player-6-is-bad-egg 1)
    (set-goal player-7-is-bad-egg 1)
    (set-goal player-8-is-bad-egg 1)
    (set-goal team-game 0)
    (set-goal free-for-all 1)
    (set-goal locked-teams 1)
    (set-stance every-ally enemy)
    (disable-self)
)
(defrule
    (goal want-alliance 1)
=>
    (set-goal 266 0)
    (generate-random-number 8)
    (up-get-fact random-number 0 266)
)
(defrule
    (nand
      (goal 266 1)
      (goal want-alliance 1)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (nand
      (player-in-game 1)
      (and
        (goal player-1-is-bad-egg 0)
        (and
          (not
            (stance-toward 1 ally)
          )
          (goal tried-alliance-with-1 0)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 267 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 267)
)
(defrule
    (goal 267 1)
=>
    (chat-to-player 1 "Let's be allies.")
)
(defrule
    (goal 267 2)
=>
    (chat-to-player 1 "Want to work together?")
)
(defrule
    (goal 267 3)
=>
    (chat-to-player 1 "Want to team up?")
)
(defrule
    (player-in-game 1)
    (goal player-1-is-bad-egg 0)
    (not
      (stance-toward 1 ally)
    )
    (goal tried-alliance-with-1 0)
=>
    (chat-local-to-self "requesting alliance from player 1")
    (set-stance 1 ally)
    (up-modify-goal player-1-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (nand
      (goal 266 2)
      (goal want-alliance 1)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (nand
      (player-in-game 2)
      (and
        (goal player-2-is-bad-egg 0)
        (and
          (not
            (stance-toward 2 ally)
          )
          (goal tried-alliance-with-2 0)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 268 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 268)
)
(defrule
    (goal 268 1)
=>
    (chat-to-player 2 "Let's be allies.")
)
(defrule
    (goal 268 2)
=>
    (chat-to-player 2 "Want to work together?")
)
(defrule
    (goal 268 3)
=>
    (chat-to-player 2 "Want to team up?")
)
(defrule
    (player-in-game 2)
    (goal player-2-is-bad-egg 0)
    (not
      (stance-toward 2 ally)
    )
    (goal tried-alliance-with-2 0)
=>
    (chat-local-to-self "requesting alliance from player 2")
    (set-stance 2 ally)
    (up-modify-goal player-2-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (nand
      (goal 266 3)
      (goal want-alliance 1)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (nand
      (player-in-game 3)
      (and
        (goal player-3-is-bad-egg 0)
        (and
          (not
            (stance-toward 3 ally)
          )
          (goal tried-alliance-with-3 0)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 269 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 269)
)
(defrule
    (goal 269 1)
=>
    (chat-to-player 3 "Let's be allies.")
)
(defrule
    (goal 269 2)
=>
    (chat-to-player 3 "Want to work together?")
)
(defrule
    (goal 269 3)
=>
    (chat-to-player 3 "Want to team up?")
)
(defrule
    (player-in-game 3)
    (goal player-3-is-bad-egg 0)
    (not
      (stance-toward 3 ally)
    )
    (goal tried-alliance-with-3 0)
=>
    (chat-local-to-self "requesting alliance from player 3")
    (set-stance 3 ally)
    (up-modify-goal player-3-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (nand
      (goal 266 4)
      (goal want-alliance 1)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (nand
      (player-in-game 4)
      (and
        (goal player-4-is-bad-egg 0)
        (and
          (not
            (stance-toward 4 ally)
          )
          (goal tried-alliance-with-4 0)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 270 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 270)
)
(defrule
    (goal 270 1)
=>
    (chat-to-player 4 "Let's be allies.")
)
(defrule
    (goal 270 2)
=>
    (chat-to-player 4 "Want to work together?")
)
(defrule
    (goal 270 3)
=>
    (chat-to-player 4 "Want to team up?")
)
(defrule
    (player-in-game 4)
    (goal player-4-is-bad-egg 0)
    (not
      (stance-toward 4 ally)
    )
    (goal tried-alliance-with-4 0)
=>
    (chat-local-to-self "requesting alliance from player 4")
    (set-stance 4 ally)
    (up-modify-goal player-4-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (nand
      (goal 266 5)
      (goal want-alliance 1)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (nand
      (player-in-game 5)
      (and
        (goal player-5-is-bad-egg 0)
        (and
          (not
            (stance-toward 5 ally)
          )
          (goal tried-alliance-with-5 0)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 271 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 271)
)
(defrule
    (goal 271 1)
=>
    (chat-to-player 5 "Let's be allies.")
)
(defrule
    (goal 271 2)
=>
    (chat-to-player 5 "Want to work together?")
)
(defrule
    (goal 271 3)
=>
    (chat-to-player 5 "Want to team up?")
)
(defrule
    (player-in-game 5)
    (goal player-5-is-bad-egg 0)
    (not
      (stance-toward 5 ally)
    )
    (goal tried-alliance-with-5 0)
=>
    (chat-local-to-self "requesting alliance from player 5")
    (set-stance 5 ally)
    (up-modify-goal player-5-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (nand
      (goal 266 6)
      (goal want-alliance 1)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (nand
      (player-in-game 6)
      (and
        (goal player-6-is-bad-egg 0)
        (and
          (not
            (stance-toward 6 ally)
          )
          (goal tried-alliance-with-6 0)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 272 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 272)
)
(defrule
    (goal 272 1)
=>
    (chat-to-player 6 "Let's be allies.")
)
(defrule
    (goal 272 2)
=>
    (chat-to-player 6 "Want to work together?")
)
(defrule
    (goal 272 3)
=>
    (chat-to-player 6 "Want to team up?")
)
(defrule
    (player-in-game 6)
    (goal player-6-is-bad-egg 0)
    (not
      (stance-toward 6 ally)
    )
    (goal tried-alliance-with-6 0)
=>
    (chat-local-to-self "requesting alliance from player 6")
    (set-stance 6 ally)
    (up-modify-goal player-6-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (nand
      (goal 266 7)
      (goal want-alliance 1)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (nand
      (player-in-game 7)
      (and
        (goal player-7-is-bad-egg 0)
        (and
          (not
            (stance-toward 7 ally)
          )
          (goal tried-alliance-with-7 0)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 273 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 273)
)
(defrule
    (goal 273 1)
=>
    (chat-to-player 7 "Let's be allies.")
)
(defrule
    (goal 273 2)
=>
    (chat-to-player 7 "Want to work together?")
)
(defrule
    (goal 273 3)
=>
    (chat-to-player 7 "Want to team up?")
)
(defrule
    (player-in-game 7)
    (goal player-7-is-bad-egg 0)
    (not
      (stance-toward 7 ally)
    )
    (goal tried-alliance-with-7 0)
=>
    (chat-local-to-self "requesting alliance from player 7")
    (set-stance 7 ally)
    (up-modify-goal player-7-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (nand
      (goal 266 8)
      (goal want-alliance 1)
    )
=>
    (up-jump-rule 6)
)
(defrule
    (nand
      (player-in-game 8)
      (and
        (goal player-8-is-bad-egg 0)
        (and
          (not
            (stance-toward 8 ally)
          )
          (goal tried-alliance-with-8 0)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 274 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 274)
)
(defrule
    (goal 274 1)
=>
    (chat-to-player 8 "Let's be allies.")
)
(defrule
    (goal 274 2)
=>
    (chat-to-player 8 "Want to work together?")
)
(defrule
    (goal 274 3)
=>
    (chat-to-player 8 "Want to team up?")
)
(defrule
    (player-in-game 8)
    (goal player-8-is-bad-egg 0)
    (not
      (stance-toward 8 ally)
    )
    (goal tried-alliance-with-8 0)
=>
    (chat-local-to-self "requesting alliance from player 8")
    (set-stance 8 ally)
    (up-modify-goal player-8-alliance-request-time-stamp g:= game-time-goal)
)
(defrule
    (goal enemy-players-count 0)
    (goal want-alliance 0)
=>
    (set-goal 275 0)
    (generate-random-number 8)
    (up-get-fact random-number 0 275)
)
(defrule
    (nand
      (goal 275 1)
      (and
        (goal enemy-players-count 0)
        (goal want-alliance 0)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 1)
    (stance-toward 1 neutral)
=>
    (chat-local-to-self "making neutral player 1 our enemy")
    (set-stance 1 enemy)
)
(defrule
    (nand
      (goal 275 2)
      (and
        (goal enemy-players-count 0)
        (goal want-alliance 0)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 2)
    (stance-toward 2 neutral)
=>
    (chat-local-to-self "making neutral player 2 our enemy")
    (set-stance 2 enemy)
)
(defrule
    (nand
      (goal 275 3)
      (and
        (goal enemy-players-count 0)
        (goal want-alliance 0)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 3)
    (stance-toward 3 neutral)
=>
    (chat-local-to-self "making neutral player 3 our enemy")
    (set-stance 3 enemy)
)
(defrule
    (nand
      (goal 275 4)
      (and
        (goal enemy-players-count 0)
        (goal want-alliance 0)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 4)
    (stance-toward 4 neutral)
=>
    (chat-local-to-self "making neutral player 4 our enemy")
    (set-stance 4 enemy)
)
(defrule
    (nand
      (goal 275 5)
      (and
        (goal enemy-players-count 0)
        (goal want-alliance 0)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 5)
    (stance-toward 5 neutral)
=>
    (chat-local-to-self "making neutral player 5 our enemy")
    (set-stance 5 enemy)
)
(defrule
    (nand
      (goal 275 6)
      (and
        (goal enemy-players-count 0)
        (goal want-alliance 0)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 6)
    (stance-toward 6 neutral)
=>
    (chat-local-to-self "making neutral player 6 our enemy")
    (set-stance 6 enemy)
)
(defrule
    (nand
      (goal 275 7)
      (and
        (goal enemy-players-count 0)
        (goal want-alliance 0)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 7)
    (stance-toward 7 neutral)
=>
    (chat-local-to-self "making neutral player 7 our enemy")
    (set-stance 7 enemy)
)
(defrule
    (nand
      (goal 275 8)
      (and
        (goal enemy-players-count 0)
        (goal want-alliance 0)
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 8)
    (stance-toward 8 neutral)
=>
    (chat-local-to-self "making neutral player 8 our enemy")
    (set-stance 8 enemy)
)
(defrule
    (goal want-alliance -1)
=>
    (set-goal 276 0)
    (generate-random-number 8)
    (up-get-fact random-number 0 276)
)
(defrule
    (nand
      (goal 276 1)
      (goal want-alliance -1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 1)
    (goal allied-with-1 1)
=>
    (set-goal chat-betray-player 1)
    (set-stance 1 enemy)
    (set-goal player-1-is-bad-egg 1)
    (set-goal allied-with-1 0)
)
(defrule
    (nand
      (goal 276 2)
      (goal want-alliance -1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 2)
    (goal allied-with-2 1)
=>
    (set-goal chat-betray-player 2)
    (set-stance 2 enemy)
    (set-goal player-2-is-bad-egg 1)
    (set-goal allied-with-2 0)
)
(defrule
    (nand
      (goal 276 3)
      (goal want-alliance -1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 3)
    (goal allied-with-3 1)
=>
    (set-goal chat-betray-player 3)
    (set-stance 3 enemy)
    (set-goal player-3-is-bad-egg 1)
    (set-goal allied-with-3 0)
)
(defrule
    (nand
      (goal 276 4)
      (goal want-alliance -1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 4)
    (goal allied-with-4 1)
=>
    (set-goal chat-betray-player 4)
    (set-stance 4 enemy)
    (set-goal player-4-is-bad-egg 1)
    (set-goal allied-with-4 0)
)
(defrule
    (nand
      (goal 276 5)
      (goal want-alliance -1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 5)
    (goal allied-with-5 1)
=>
    (set-goal chat-betray-player 5)
    (set-stance 5 enemy)
    (set-goal player-5-is-bad-egg 1)
    (set-goal allied-with-5 0)
)
(defrule
    (nand
      (goal 276 6)
      (goal want-alliance -1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 6)
    (goal allied-with-6 1)
=>
    (set-goal chat-betray-player 6)
    (set-stance 6 enemy)
    (set-goal player-6-is-bad-egg 1)
    (set-goal allied-with-6 0)
)
(defrule
    (nand
      (goal 276 7)
      (goal want-alliance -1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 7)
    (goal allied-with-7 1)
=>
    (set-goal chat-betray-player 7)
    (set-stance 7 enemy)
    (set-goal player-7-is-bad-egg 1)
    (set-goal allied-with-7 0)
)
(defrule
    (nand
      (goal 276 8)
      (goal want-alliance -1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (player-in-game 8)
    (goal allied-with-8 1)
=>
    (set-goal chat-betray-player 8)
    (set-stance 8 enemy)
    (set-goal player-8-is-bad-egg 1)
    (set-goal allied-with-8 0)
)
(defrule
    (nand
      (goal accept-alliance-requests 1)
      (and
        (or
          (stance-toward 1 enemy)
          (stance-toward 1 neutral)
        )
        (and
          (players-stance 1 ally)
          (and
            (and
              (goal player-1-is-bad-egg 0)
              (goal allied-with-1 0)
            )
            (player-in-game 1)
          )
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 277 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 277)
)
(defrule
    (goal 277 1)
=>
    (chat-to-player 1 "Good idea.")
)
(defrule
    (goal 277 2)
=>
    (chat-to-player 1 "I was hoping you'd do that!")
)
(defrule
    (goal 277 3)
=>
    (chat-to-player 1 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or
      (stance-toward 1 enemy)
      (stance-toward 1 neutral)
    )
    (players-stance 1 ally)
    (goal player-1-is-bad-egg 0)
    (goal allied-with-1 0)
    (player-in-game 1)
=>
    (chat-local-to-self "accepting alliance request from player 1")
    (set-stance 1 ally)
    (set-goal allied-with-1 1)
)
(defrule
    (nand
      (and
        (not
          (stance-toward 1 enemy)
        )
        (not
          (stance-toward 1 neutral)
        )
      )
      (and
        (players-stance 1 ally)
        (and
          (and
            (goal player-1-is-bad-egg 0)
            (goal allied-with-1 0)
          )
          (player-in-game 1)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 278 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 278)
)
(defrule
    (goal 278 1)
=>
    (chat-to-player 1 "Let's do this. Together.")
)
(defrule
    (goal 278 2)
=>
    (chat-to-player 1 "Nice to have you with me.")
)
(defrule
    (goal 278 3)
=>
    (chat-to-player 1 "Unstoppable team!")
)
(defrule
    (not
      (stance-toward 1 enemy)
    )
    (not
      (stance-toward 1 neutral)
    )
    (players-stance 1 ally)
    (goal player-1-is-bad-egg 0)
    (goal allied-with-1 0)
    (player-in-game 1)
=>
    (chat-local-to-self "player 1 accepted our alliance request")
    (set-goal allied-with-1 1)
)
(defrule
    (goal allied-with-1 1)
    (not
      (players-stance 1 ally)
    )
    (player-in-game 1)
=>
    (set-goal chat-betrayed-by-player 1)
    (set-goal player-1-is-bad-egg 1)
    (set-goal allied-with-1 0)
    (set-stance 1 enemy)
)
(defrule
    (goal threat-player 1)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 1 enemy)
    )
    (player-in-game 1)
=>
    (chat-local-to-self "attacked by player 1")
)
(defrule
    (goal allied-with-1 1)
    (goal threat-player 1)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 1 enemy)
    )
    (player-in-game 1)
=>
    (set-goal chat-betrayed-by-player 1)
    (set-goal allied-with-1 0)
    (set-goal player-1-is-bad-egg 1)
)
(defrule
    (stance-toward 1 ally)
    (not
      (goal allied-with-1 1)
    )
    (goal threat-player 1)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 1 enemy)
    )
    (player-in-game 1)
=>
    (set-goal player-1-is-bad-egg 1)
)
(defrule
    (goal threat-player 1)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 1 enemy)
    )
    (player-in-game 1)
=>
    (set-stance 1 enemy)
)
(defrule
    (goal allied-with-1 0)
    (stance-toward 1 ally)
    (goal player-1-is-bad-egg 0)
    (goal tried-alliance-with-1 0)
    (player-in-game 1)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-1-alliance-request-time-stamp)
)
(defrule
    (nand
      (up-compare-goal temp c:>= alliance-request-timeout)
      (and
        (and
          (goal allied-with-1 0)
          (and
            (stance-toward 1 ally)
            (and
              (goal player-1-is-bad-egg 0)
              (goal tried-alliance-with-1 0)
            )
          )
        )
        (player-in-game 1)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 279 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 279)
)
(defrule
    (goal 279 1)
=>
    (chat-to-player 1 "Fine, have it your way.")
)
(defrule
    (goal 279 2)
=>
    (chat-to-player 1 "Would've been nice.")
)
(defrule
    (goal 279 3)
=>
    (chat-to-player 1 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (goal allied-with-1 0)
    (stance-toward 1 ally)
    (goal player-1-is-bad-egg 0)
    (goal tried-alliance-with-1 0)
    (player-in-game 1)
=>
    (chat-local-to-self "alliance request to player 1 timed out")
    (set-stance 1 neutral)
    (set-goal tried-alliance-with-1 1)
)
(defrule
    (players-stance 1 ally)
    (not
      (stance-toward 1 ally)
    )
    (not
      (player-in-game 1)
    )
=>
    (set-stance 1 ally)
)
(defrule
    (nand
      (goal accept-alliance-requests 1)
      (and
        (or
          (stance-toward 2 enemy)
          (stance-toward 2 neutral)
        )
        (and
          (players-stance 2 ally)
          (and
            (and
              (goal player-2-is-bad-egg 0)
              (goal allied-with-2 0)
            )
            (player-in-game 2)
          )
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 280 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 280)
)
(defrule
    (goal 280 1)
=>
    (chat-to-player 2 "Good idea.")
)
(defrule
    (goal 280 2)
=>
    (chat-to-player 2 "I was hoping you'd do that!")
)
(defrule
    (goal 280 3)
=>
    (chat-to-player 2 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or
      (stance-toward 2 enemy)
      (stance-toward 2 neutral)
    )
    (players-stance 2 ally)
    (goal player-2-is-bad-egg 0)
    (goal allied-with-2 0)
    (player-in-game 2)
=>
    (chat-local-to-self "accepting alliance request from player 2")
    (set-stance 2 ally)
    (set-goal allied-with-2 1)
)
(defrule
    (nand
      (and
        (not
          (stance-toward 2 enemy)
        )
        (not
          (stance-toward 2 neutral)
        )
      )
      (and
        (players-stance 2 ally)
        (and
          (and
            (goal player-2-is-bad-egg 0)
            (goal allied-with-2 0)
          )
          (player-in-game 2)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 281 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 281)
)
(defrule
    (goal 281 1)
=>
    (chat-to-player 2 "Let's do this. Together.")
)
(defrule
    (goal 281 2)
=>
    (chat-to-player 2 "Nice to have you with me.")
)
(defrule
    (goal 281 3)
=>
    (chat-to-player 2 "Unstoppable team!")
)
(defrule
    (not
      (stance-toward 2 enemy)
    )
    (not
      (stance-toward 2 neutral)
    )
    (players-stance 2 ally)
    (goal player-2-is-bad-egg 0)
    (goal allied-with-2 0)
    (player-in-game 2)
=>
    (chat-local-to-self "player 2 accepted our alliance request")
    (set-goal allied-with-2 1)
)
(defrule
    (goal allied-with-2 1)
    (not
      (players-stance 2 ally)
    )
    (player-in-game 2)
=>
    (set-goal chat-betrayed-by-player 2)
    (set-goal player-2-is-bad-egg 1)
    (set-goal allied-with-2 0)
    (set-stance 2 enemy)
)
(defrule
    (goal threat-player 2)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 2 enemy)
    )
    (player-in-game 2)
=>
    (chat-local-to-self "attacked by player 2")
)
(defrule
    (goal allied-with-2 1)
    (goal threat-player 2)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 2 enemy)
    )
    (player-in-game 2)
=>
    (set-goal chat-betrayed-by-player 2)
    (set-goal allied-with-2 0)
    (set-goal player-2-is-bad-egg 1)
)
(defrule
    (stance-toward 2 ally)
    (not
      (goal allied-with-2 1)
    )
    (goal threat-player 2)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 2 enemy)
    )
    (player-in-game 2)
=>
    (set-goal player-2-is-bad-egg 1)
)
(defrule
    (goal threat-player 2)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 2 enemy)
    )
    (player-in-game 2)
=>
    (set-stance 2 enemy)
)
(defrule
    (goal allied-with-2 0)
    (stance-toward 2 ally)
    (goal player-2-is-bad-egg 0)
    (goal tried-alliance-with-2 0)
    (player-in-game 2)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-2-alliance-request-time-stamp)
)
(defrule
    (nand
      (up-compare-goal temp c:>= alliance-request-timeout)
      (and
        (and
          (goal allied-with-2 0)
          (and
            (stance-toward 2 ally)
            (and
              (goal player-2-is-bad-egg 0)
              (goal tried-alliance-with-2 0)
            )
          )
        )
        (player-in-game 2)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 282 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 282)
)
(defrule
    (goal 282 1)
=>
    (chat-to-player 2 "Fine, have it your way.")
)
(defrule
    (goal 282 2)
=>
    (chat-to-player 2 "Would've been nice.")
)
(defrule
    (goal 282 3)
=>
    (chat-to-player 2 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (goal allied-with-2 0)
    (stance-toward 2 ally)
    (goal player-2-is-bad-egg 0)
    (goal tried-alliance-with-2 0)
    (player-in-game 2)
=>
    (chat-local-to-self "alliance request to player 2 timed out")
    (set-stance 2 neutral)
    (set-goal tried-alliance-with-2 1)
)
(defrule
    (players-stance 2 ally)
    (not
      (stance-toward 2 ally)
    )
    (not
      (player-in-game 2)
    )
=>
    (set-stance 2 ally)
)
(defrule
    (nand
      (goal accept-alliance-requests 1)
      (and
        (or
          (stance-toward 3 enemy)
          (stance-toward 3 neutral)
        )
        (and
          (players-stance 3 ally)
          (and
            (and
              (goal player-3-is-bad-egg 0)
              (goal allied-with-3 0)
            )
            (player-in-game 3)
          )
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 283 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 283)
)
(defrule
    (goal 283 1)
=>
    (chat-to-player 3 "Good idea.")
)
(defrule
    (goal 283 2)
=>
    (chat-to-player 3 "I was hoping you'd do that!")
)
(defrule
    (goal 283 3)
=>
    (chat-to-player 3 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or
      (stance-toward 3 enemy)
      (stance-toward 3 neutral)
    )
    (players-stance 3 ally)
    (goal player-3-is-bad-egg 0)
    (goal allied-with-3 0)
    (player-in-game 3)
=>
    (chat-local-to-self "accepting alliance request from player 3")
    (set-stance 3 ally)
    (set-goal allied-with-3 1)
)
(defrule
    (nand
      (and
        (not
          (stance-toward 3 enemy)
        )
        (not
          (stance-toward 3 neutral)
        )
      )
      (and
        (players-stance 3 ally)
        (and
          (and
            (goal player-3-is-bad-egg 0)
            (goal allied-with-3 0)
          )
          (player-in-game 3)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 284 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 284)
)
(defrule
    (goal 284 1)
=>
    (chat-to-player 3 "Let's do this. Together.")
)
(defrule
    (goal 284 2)
=>
    (chat-to-player 3 "Nice to have you with me.")
)
(defrule
    (goal 284 3)
=>
    (chat-to-player 3 "Unstoppable team!")
)
(defrule
    (not
      (stance-toward 3 enemy)
    )
    (not
      (stance-toward 3 neutral)
    )
    (players-stance 3 ally)
    (goal player-3-is-bad-egg 0)
    (goal allied-with-3 0)
    (player-in-game 3)
=>
    (chat-local-to-self "player 3 accepted our alliance request")
    (set-goal allied-with-3 1)
)
(defrule
    (goal allied-with-3 1)
    (not
      (players-stance 3 ally)
    )
    (player-in-game 3)
=>
    (set-goal chat-betrayed-by-player 3)
    (set-goal player-3-is-bad-egg 1)
    (set-goal allied-with-3 0)
    (set-stance 3 enemy)
)
(defrule
    (goal threat-player 3)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 3 enemy)
    )
    (player-in-game 3)
=>
    (chat-local-to-self "attacked by player 3")
)
(defrule
    (goal allied-with-3 1)
    (goal threat-player 3)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 3 enemy)
    )
    (player-in-game 3)
=>
    (set-goal chat-betrayed-by-player 3)
    (set-goal allied-with-3 0)
    (set-goal player-3-is-bad-egg 1)
)
(defrule
    (stance-toward 3 ally)
    (not
      (goal allied-with-3 1)
    )
    (goal threat-player 3)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 3 enemy)
    )
    (player-in-game 3)
=>
    (set-goal player-3-is-bad-egg 1)
)
(defrule
    (goal threat-player 3)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 3 enemy)
    )
    (player-in-game 3)
=>
    (set-stance 3 enemy)
)
(defrule
    (goal allied-with-3 0)
    (stance-toward 3 ally)
    (goal player-3-is-bad-egg 0)
    (goal tried-alliance-with-3 0)
    (player-in-game 3)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-3-alliance-request-time-stamp)
)
(defrule
    (nand
      (up-compare-goal temp c:>= alliance-request-timeout)
      (and
        (and
          (goal allied-with-3 0)
          (and
            (stance-toward 3 ally)
            (and
              (goal player-3-is-bad-egg 0)
              (goal tried-alliance-with-3 0)
            )
          )
        )
        (player-in-game 3)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 285 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 285)
)
(defrule
    (goal 285 1)
=>
    (chat-to-player 3 "Fine, have it your way.")
)
(defrule
    (goal 285 2)
=>
    (chat-to-player 3 "Would've been nice.")
)
(defrule
    (goal 285 3)
=>
    (chat-to-player 3 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (goal allied-with-3 0)
    (stance-toward 3 ally)
    (goal player-3-is-bad-egg 0)
    (goal tried-alliance-with-3 0)
    (player-in-game 3)
=>
    (chat-local-to-self "alliance request to player 3 timed out")
    (set-stance 3 neutral)
    (set-goal tried-alliance-with-3 1)
)
(defrule
    (players-stance 3 ally)
    (not
      (stance-toward 3 ally)
    )
    (not
      (player-in-game 3)
    )
=>
    (set-stance 3 ally)
)
(defrule
    (nand
      (goal accept-alliance-requests 1)
      (and
        (or
          (stance-toward 4 enemy)
          (stance-toward 4 neutral)
        )
        (and
          (players-stance 4 ally)
          (and
            (and
              (goal player-4-is-bad-egg 0)
              (goal allied-with-4 0)
            )
            (player-in-game 4)
          )
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 286 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 286)
)
(defrule
    (goal 286 1)
=>
    (chat-to-player 4 "Good idea.")
)
(defrule
    (goal 286 2)
=>
    (chat-to-player 4 "I was hoping you'd do that!")
)
(defrule
    (goal 286 3)
=>
    (chat-to-player 4 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or
      (stance-toward 4 enemy)
      (stance-toward 4 neutral)
    )
    (players-stance 4 ally)
    (goal player-4-is-bad-egg 0)
    (goal allied-with-4 0)
    (player-in-game 4)
=>
    (chat-local-to-self "accepting alliance request from player 4")
    (set-stance 4 ally)
    (set-goal allied-with-4 1)
)
(defrule
    (nand
      (and
        (not
          (stance-toward 4 enemy)
        )
        (not
          (stance-toward 4 neutral)
        )
      )
      (and
        (players-stance 4 ally)
        (and
          (and
            (goal player-4-is-bad-egg 0)
            (goal allied-with-4 0)
          )
          (player-in-game 4)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 287 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 287)
)
(defrule
    (goal 287 1)
=>
    (chat-to-player 4 "Let's do this. Together.")
)
(defrule
    (goal 287 2)
=>
    (chat-to-player 4 "Nice to have you with me.")
)
(defrule
    (goal 287 3)
=>
    (chat-to-player 4 "Unstoppable team!")
)
(defrule
    (not
      (stance-toward 4 enemy)
    )
    (not
      (stance-toward 4 neutral)
    )
    (players-stance 4 ally)
    (goal player-4-is-bad-egg 0)
    (goal allied-with-4 0)
    (player-in-game 4)
=>
    (chat-local-to-self "player 4 accepted our alliance request")
    (set-goal allied-with-4 1)
)
(defrule
    (goal allied-with-4 1)
    (not
      (players-stance 4 ally)
    )
    (player-in-game 4)
=>
    (set-goal chat-betrayed-by-player 4)
    (set-goal player-4-is-bad-egg 1)
    (set-goal allied-with-4 0)
    (set-stance 4 enemy)
)
(defrule
    (goal threat-player 4)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 4 enemy)
    )
    (player-in-game 4)
=>
    (chat-local-to-self "attacked by player 4")
)
(defrule
    (goal allied-with-4 1)
    (goal threat-player 4)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 4 enemy)
    )
    (player-in-game 4)
=>
    (set-goal chat-betrayed-by-player 4)
    (set-goal allied-with-4 0)
    (set-goal player-4-is-bad-egg 1)
)
(defrule
    (stance-toward 4 ally)
    (not
      (goal allied-with-4 1)
    )
    (goal threat-player 4)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 4 enemy)
    )
    (player-in-game 4)
=>
    (set-goal player-4-is-bad-egg 1)
)
(defrule
    (goal threat-player 4)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 4 enemy)
    )
    (player-in-game 4)
=>
    (set-stance 4 enemy)
)
(defrule
    (goal allied-with-4 0)
    (stance-toward 4 ally)
    (goal player-4-is-bad-egg 0)
    (goal tried-alliance-with-4 0)
    (player-in-game 4)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-4-alliance-request-time-stamp)
)
(defrule
    (nand
      (up-compare-goal temp c:>= alliance-request-timeout)
      (and
        (and
          (goal allied-with-4 0)
          (and
            (stance-toward 4 ally)
            (and
              (goal player-4-is-bad-egg 0)
              (goal tried-alliance-with-4 0)
            )
          )
        )
        (player-in-game 4)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 288 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 288)
)
(defrule
    (goal 288 1)
=>
    (chat-to-player 4 "Fine, have it your way.")
)
(defrule
    (goal 288 2)
=>
    (chat-to-player 4 "Would've been nice.")
)
(defrule
    (goal 288 3)
=>
    (chat-to-player 4 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (goal allied-with-4 0)
    (stance-toward 4 ally)
    (goal player-4-is-bad-egg 0)
    (goal tried-alliance-with-4 0)
    (player-in-game 4)
=>
    (chat-local-to-self "alliance request to player 4 timed out")
    (set-stance 4 neutral)
    (set-goal tried-alliance-with-4 1)
)
(defrule
    (players-stance 4 ally)
    (not
      (stance-toward 4 ally)
    )
    (not
      (player-in-game 4)
    )
=>
    (set-stance 4 ally)
)
(defrule
    (nand
      (goal accept-alliance-requests 1)
      (and
        (or
          (stance-toward 5 enemy)
          (stance-toward 5 neutral)
        )
        (and
          (players-stance 5 ally)
          (and
            (and
              (goal player-5-is-bad-egg 0)
              (goal allied-with-5 0)
            )
            (player-in-game 5)
          )
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 289 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 289)
)
(defrule
    (goal 289 1)
=>
    (chat-to-player 5 "Good idea.")
)
(defrule
    (goal 289 2)
=>
    (chat-to-player 5 "I was hoping you'd do that!")
)
(defrule
    (goal 289 3)
=>
    (chat-to-player 5 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or
      (stance-toward 5 enemy)
      (stance-toward 5 neutral)
    )
    (players-stance 5 ally)
    (goal player-5-is-bad-egg 0)
    (goal allied-with-5 0)
    (player-in-game 5)
=>
    (chat-local-to-self "accepting alliance request from player 5")
    (set-stance 5 ally)
    (set-goal allied-with-5 1)
)
(defrule
    (nand
      (and
        (not
          (stance-toward 5 enemy)
        )
        (not
          (stance-toward 5 neutral)
        )
      )
      (and
        (players-stance 5 ally)
        (and
          (and
            (goal player-5-is-bad-egg 0)
            (goal allied-with-5 0)
          )
          (player-in-game 5)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 290 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 290)
)
(defrule
    (goal 290 1)
=>
    (chat-to-player 5 "Let's do this. Together.")
)
(defrule
    (goal 290 2)
=>
    (chat-to-player 5 "Nice to have you with me.")
)
(defrule
    (goal 290 3)
=>
    (chat-to-player 5 "Unstoppable team!")
)
(defrule
    (not
      (stance-toward 5 enemy)
    )
    (not
      (stance-toward 5 neutral)
    )
    (players-stance 5 ally)
    (goal player-5-is-bad-egg 0)
    (goal allied-with-5 0)
    (player-in-game 5)
=>
    (chat-local-to-self "player 5 accepted our alliance request")
    (set-goal allied-with-5 1)
)
(defrule
    (goal allied-with-5 1)
    (not
      (players-stance 5 ally)
    )
    (player-in-game 5)
=>
    (set-goal chat-betrayed-by-player 5)
    (set-goal player-5-is-bad-egg 1)
    (set-goal allied-with-5 0)
    (set-stance 5 enemy)
)
(defrule
    (goal threat-player 5)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 5 enemy)
    )
    (player-in-game 5)
=>
    (chat-local-to-self "attacked by player 5")
)
(defrule
    (goal allied-with-5 1)
    (goal threat-player 5)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 5 enemy)
    )
    (player-in-game 5)
=>
    (set-goal chat-betrayed-by-player 5)
    (set-goal allied-with-5 0)
    (set-goal player-5-is-bad-egg 1)
)
(defrule
    (stance-toward 5 ally)
    (not
      (goal allied-with-5 1)
    )
    (goal threat-player 5)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 5 enemy)
    )
    (player-in-game 5)
=>
    (set-goal player-5-is-bad-egg 1)
)
(defrule
    (goal threat-player 5)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 5 enemy)
    )
    (player-in-game 5)
=>
    (set-stance 5 enemy)
)
(defrule
    (goal allied-with-5 0)
    (stance-toward 5 ally)
    (goal player-5-is-bad-egg 0)
    (goal tried-alliance-with-5 0)
    (player-in-game 5)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-5-alliance-request-time-stamp)
)
(defrule
    (nand
      (up-compare-goal temp c:>= alliance-request-timeout)
      (and
        (and
          (goal allied-with-5 0)
          (and
            (stance-toward 5 ally)
            (and
              (goal player-5-is-bad-egg 0)
              (goal tried-alliance-with-5 0)
            )
          )
        )
        (player-in-game 5)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 291 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 291)
)
(defrule
    (goal 291 1)
=>
    (chat-to-player 5 "Fine, have it your way.")
)
(defrule
    (goal 291 2)
=>
    (chat-to-player 5 "Would've been nice.")
)
(defrule
    (goal 291 3)
=>
    (chat-to-player 5 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (goal allied-with-5 0)
    (stance-toward 5 ally)
    (goal player-5-is-bad-egg 0)
    (goal tried-alliance-with-5 0)
    (player-in-game 5)
=>
    (chat-local-to-self "alliance request to player 5 timed out")
    (set-stance 5 neutral)
    (set-goal tried-alliance-with-5 1)
)
(defrule
    (players-stance 5 ally)
    (not
      (stance-toward 5 ally)
    )
    (not
      (player-in-game 5)
    )
=>
    (set-stance 5 ally)
)
(defrule
    (nand
      (goal accept-alliance-requests 1)
      (and
        (or
          (stance-toward 6 enemy)
          (stance-toward 6 neutral)
        )
        (and
          (players-stance 6 ally)
          (and
            (and
              (goal player-6-is-bad-egg 0)
              (goal allied-with-6 0)
            )
            (player-in-game 6)
          )
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 292 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 292)
)
(defrule
    (goal 292 1)
=>
    (chat-to-player 6 "Good idea.")
)
(defrule
    (goal 292 2)
=>
    (chat-to-player 6 "I was hoping you'd do that!")
)
(defrule
    (goal 292 3)
=>
    (chat-to-player 6 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or
      (stance-toward 6 enemy)
      (stance-toward 6 neutral)
    )
    (players-stance 6 ally)
    (goal player-6-is-bad-egg 0)
    (goal allied-with-6 0)
    (player-in-game 6)
=>
    (chat-local-to-self "accepting alliance request from player 6")
    (set-stance 6 ally)
    (set-goal allied-with-6 1)
)
(defrule
    (nand
      (and
        (not
          (stance-toward 6 enemy)
        )
        (not
          (stance-toward 6 neutral)
        )
      )
      (and
        (players-stance 6 ally)
        (and
          (and
            (goal player-6-is-bad-egg 0)
            (goal allied-with-6 0)
          )
          (player-in-game 6)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 293 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 293)
)
(defrule
    (goal 293 1)
=>
    (chat-to-player 6 "Let's do this. Together.")
)
(defrule
    (goal 293 2)
=>
    (chat-to-player 6 "Nice to have you with me.")
)
(defrule
    (goal 293 3)
=>
    (chat-to-player 6 "Unstoppable team!")
)
(defrule
    (not
      (stance-toward 6 enemy)
    )
    (not
      (stance-toward 6 neutral)
    )
    (players-stance 6 ally)
    (goal player-6-is-bad-egg 0)
    (goal allied-with-6 0)
    (player-in-game 6)
=>
    (chat-local-to-self "player 6 accepted our alliance request")
    (set-goal allied-with-6 1)
)
(defrule
    (goal allied-with-6 1)
    (not
      (players-stance 6 ally)
    )
    (player-in-game 6)
=>
    (set-goal chat-betrayed-by-player 6)
    (set-goal player-6-is-bad-egg 1)
    (set-goal allied-with-6 0)
    (set-stance 6 enemy)
)
(defrule
    (goal threat-player 6)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 6 enemy)
    )
    (player-in-game 6)
=>
    (chat-local-to-self "attacked by player 6")
)
(defrule
    (goal allied-with-6 1)
    (goal threat-player 6)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 6 enemy)
    )
    (player-in-game 6)
=>
    (set-goal chat-betrayed-by-player 6)
    (set-goal allied-with-6 0)
    (set-goal player-6-is-bad-egg 1)
)
(defrule
    (stance-toward 6 ally)
    (not
      (goal allied-with-6 1)
    )
    (goal threat-player 6)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 6 enemy)
    )
    (player-in-game 6)
=>
    (set-goal player-6-is-bad-egg 1)
)
(defrule
    (goal threat-player 6)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 6 enemy)
    )
    (player-in-game 6)
=>
    (set-stance 6 enemy)
)
(defrule
    (goal allied-with-6 0)
    (stance-toward 6 ally)
    (goal player-6-is-bad-egg 0)
    (goal tried-alliance-with-6 0)
    (player-in-game 6)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-6-alliance-request-time-stamp)
)
(defrule
    (nand
      (up-compare-goal temp c:>= alliance-request-timeout)
      (and
        (and
          (goal allied-with-6 0)
          (and
            (stance-toward 6 ally)
            (and
              (goal player-6-is-bad-egg 0)
              (goal tried-alliance-with-6 0)
            )
          )
        )
        (player-in-game 6)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 294 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 294)
)
(defrule
    (goal 294 1)
=>
    (chat-to-player 6 "Fine, have it your way.")
)
(defrule
    (goal 294 2)
=>
    (chat-to-player 6 "Would've been nice.")
)
(defrule
    (goal 294 3)
=>
    (chat-to-player 6 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (goal allied-with-6 0)
    (stance-toward 6 ally)
    (goal player-6-is-bad-egg 0)
    (goal tried-alliance-with-6 0)
    (player-in-game 6)
=>
    (chat-local-to-self "alliance request to player 6 timed out")
    (set-stance 6 neutral)
    (set-goal tried-alliance-with-6 1)
)
(defrule
    (players-stance 6 ally)
    (not
      (stance-toward 6 ally)
    )
    (not
      (player-in-game 6)
    )
=>
    (set-stance 6 ally)
)
(defrule
    (nand
      (goal accept-alliance-requests 1)
      (and
        (or
          (stance-toward 7 enemy)
          (stance-toward 7 neutral)
        )
        (and
          (players-stance 7 ally)
          (and
            (and
              (goal player-7-is-bad-egg 0)
              (goal allied-with-7 0)
            )
            (player-in-game 7)
          )
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 295 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 295)
)
(defrule
    (goal 295 1)
=>
    (chat-to-player 7 "Good idea.")
)
(defrule
    (goal 295 2)
=>
    (chat-to-player 7 "I was hoping you'd do that!")
)
(defrule
    (goal 295 3)
=>
    (chat-to-player 7 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or
      (stance-toward 7 enemy)
      (stance-toward 7 neutral)
    )
    (players-stance 7 ally)
    (goal player-7-is-bad-egg 0)
    (goal allied-with-7 0)
    (player-in-game 7)
=>
    (chat-local-to-self "accepting alliance request from player 7")
    (set-stance 7 ally)
    (set-goal allied-with-7 1)
)
(defrule
    (nand
      (and
        (not
          (stance-toward 7 enemy)
        )
        (not
          (stance-toward 7 neutral)
        )
      )
      (and
        (players-stance 7 ally)
        (and
          (and
            (goal player-7-is-bad-egg 0)
            (goal allied-with-7 0)
          )
          (player-in-game 7)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 296 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 296)
)
(defrule
    (goal 296 1)
=>
    (chat-to-player 7 "Let's do this. Together.")
)
(defrule
    (goal 296 2)
=>
    (chat-to-player 7 "Nice to have you with me.")
)
(defrule
    (goal 296 3)
=>
    (chat-to-player 7 "Unstoppable team!")
)
(defrule
    (not
      (stance-toward 7 enemy)
    )
    (not
      (stance-toward 7 neutral)
    )
    (players-stance 7 ally)
    (goal player-7-is-bad-egg 0)
    (goal allied-with-7 0)
    (player-in-game 7)
=>
    (chat-local-to-self "player 7 accepted our alliance request")
    (set-goal allied-with-7 1)
)
(defrule
    (goal allied-with-7 1)
    (not
      (players-stance 7 ally)
    )
    (player-in-game 7)
=>
    (set-goal chat-betrayed-by-player 7)
    (set-goal player-7-is-bad-egg 1)
    (set-goal allied-with-7 0)
    (set-stance 7 enemy)
)
(defrule
    (goal threat-player 7)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 7 enemy)
    )
    (player-in-game 7)
=>
    (chat-local-to-self "attacked by player 7")
)
(defrule
    (goal allied-with-7 1)
    (goal threat-player 7)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 7 enemy)
    )
    (player-in-game 7)
=>
    (set-goal chat-betrayed-by-player 7)
    (set-goal allied-with-7 0)
    (set-goal player-7-is-bad-egg 1)
)
(defrule
    (stance-toward 7 ally)
    (not
      (goal allied-with-7 1)
    )
    (goal threat-player 7)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 7 enemy)
    )
    (player-in-game 7)
=>
    (set-goal player-7-is-bad-egg 1)
)
(defrule
    (goal threat-player 7)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 7 enemy)
    )
    (player-in-game 7)
=>
    (set-stance 7 enemy)
)
(defrule
    (goal allied-with-7 0)
    (stance-toward 7 ally)
    (goal player-7-is-bad-egg 0)
    (goal tried-alliance-with-7 0)
    (player-in-game 7)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-7-alliance-request-time-stamp)
)
(defrule
    (nand
      (up-compare-goal temp c:>= alliance-request-timeout)
      (and
        (and
          (goal allied-with-7 0)
          (and
            (stance-toward 7 ally)
            (and
              (goal player-7-is-bad-egg 0)
              (goal tried-alliance-with-7 0)
            )
          )
        )
        (player-in-game 7)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 297 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 297)
)
(defrule
    (goal 297 1)
=>
    (chat-to-player 7 "Fine, have it your way.")
)
(defrule
    (goal 297 2)
=>
    (chat-to-player 7 "Would've been nice.")
)
(defrule
    (goal 297 3)
=>
    (chat-to-player 7 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (goal allied-with-7 0)
    (stance-toward 7 ally)
    (goal player-7-is-bad-egg 0)
    (goal tried-alliance-with-7 0)
    (player-in-game 7)
=>
    (chat-local-to-self "alliance request to player 7 timed out")
    (set-stance 7 neutral)
    (set-goal tried-alliance-with-7 1)
)
(defrule
    (players-stance 7 ally)
    (not
      (stance-toward 7 ally)
    )
    (not
      (player-in-game 7)
    )
=>
    (set-stance 7 ally)
)
(defrule
    (nand
      (goal accept-alliance-requests 1)
      (and
        (or
          (stance-toward 8 enemy)
          (stance-toward 8 neutral)
        )
        (and
          (players-stance 8 ally)
          (and
            (and
              (goal player-8-is-bad-egg 0)
              (goal allied-with-8 0)
            )
            (player-in-game 8)
          )
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 298 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 298)
)
(defrule
    (goal 298 1)
=>
    (chat-to-player 8 "Good idea.")
)
(defrule
    (goal 298 2)
=>
    (chat-to-player 8 "I was hoping you'd do that!")
)
(defrule
    (goal 298 3)
=>
    (chat-to-player 8 "I agree, let's be friends.")
)
(defrule
    (goal accept-alliance-requests 1)
    (or
      (stance-toward 8 enemy)
      (stance-toward 8 neutral)
    )
    (players-stance 8 ally)
    (goal player-8-is-bad-egg 0)
    (goal allied-with-8 0)
    (player-in-game 8)
=>
    (chat-local-to-self "accepting alliance request from player 8")
    (set-stance 8 ally)
    (set-goal allied-with-8 1)
)
(defrule
    (nand
      (and
        (not
          (stance-toward 8 enemy)
        )
        (not
          (stance-toward 8 neutral)
        )
      )
      (and
        (players-stance 8 ally)
        (and
          (and
            (goal player-8-is-bad-egg 0)
            (goal allied-with-8 0)
          )
          (player-in-game 8)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 299 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 299)
)
(defrule
    (goal 299 1)
=>
    (chat-to-player 8 "Let's do this. Together.")
)
(defrule
    (goal 299 2)
=>
    (chat-to-player 8 "Nice to have you with me.")
)
(defrule
    (goal 299 3)
=>
    (chat-to-player 8 "Unstoppable team!")
)
(defrule
    (not
      (stance-toward 8 enemy)
    )
    (not
      (stance-toward 8 neutral)
    )
    (players-stance 8 ally)
    (goal player-8-is-bad-egg 0)
    (goal allied-with-8 0)
    (player-in-game 8)
=>
    (chat-local-to-self "player 8 accepted our alliance request")
    (set-goal allied-with-8 1)
)
(defrule
    (goal allied-with-8 1)
    (not
      (players-stance 8 ally)
    )
    (player-in-game 8)
=>
    (set-goal chat-betrayed-by-player 8)
    (set-goal player-8-is-bad-egg 1)
    (set-goal allied-with-8 0)
    (set-stance 8 enemy)
)
(defrule
    (goal threat-player 8)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 8 enemy)
    )
    (player-in-game 8)
=>
    (chat-local-to-self "attacked by player 8")
)
(defrule
    (goal allied-with-8 1)
    (goal threat-player 8)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 8 enemy)
    )
    (player-in-game 8)
=>
    (set-goal chat-betrayed-by-player 8)
    (set-goal allied-with-8 0)
    (set-goal player-8-is-bad-egg 1)
)
(defrule
    (stance-toward 8 ally)
    (not
      (goal allied-with-8 1)
    )
    (goal threat-player 8)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 8 enemy)
    )
    (player-in-game 8)
=>
    (set-goal player-8-is-bad-egg 1)
)
(defrule
    (goal threat-player 8)
    (up-compare-goal threat-time c:< 1000)
    (not
      (stance-toward 8 enemy)
    )
    (player-in-game 8)
=>
    (set-stance 8 enemy)
)
(defrule
    (goal allied-with-8 0)
    (stance-toward 8 ally)
    (goal player-8-is-bad-egg 0)
    (goal tried-alliance-with-8 0)
    (player-in-game 8)
=>
    (up-modify-goal temp g:= game-time-goal)
    (up-modify-goal temp g:- player-8-alliance-request-time-stamp)
)
(defrule
    (nand
      (up-compare-goal temp c:>= alliance-request-timeout)
      (and
        (and
          (goal allied-with-8 0)
          (and
            (stance-toward 8 ally)
            (and
              (goal player-8-is-bad-egg 0)
              (goal tried-alliance-with-8 0)
            )
          )
        )
        (player-in-game 8)
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 300 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 300)
)
(defrule
    (goal 300 1)
=>
    (chat-to-player 8 "Fine, have it your way.")
)
(defrule
    (goal 300 2)
=>
    (chat-to-player 8 "Would've been nice.")
)
(defrule
    (goal 300 3)
=>
    (chat-to-player 8 "Whatever.")
)
(defrule
    (up-compare-goal temp c:>= alliance-request-timeout)
    (goal allied-with-8 0)
    (stance-toward 8 ally)
    (goal player-8-is-bad-egg 0)
    (goal tried-alliance-with-8 0)
    (player-in-game 8)
=>
    (chat-local-to-self "alliance request to player 8 timed out")
    (set-stance 8 neutral)
    (set-goal tried-alliance-with-8 1)
)
(defrule
    (players-stance 8 ally)
    (not
      (stance-toward 8 ally)
    )
    (not
      (player-in-game 8)
    )
=>
    (set-stance 8 ally)
)
(defrule
    (goal chat-betrayed-by-player -1)
=>
    (up-jump-rule 12)
)
(defrule
    (true)
=>
    (set-goal 301 0)
    (generate-random-number 11)
    (up-get-fact random-number 0 301)
)
(defrule
    (goal 301 1)
=>
    (up-chat-data-to-all "Really %d?" g: chat-betrayed-by-player)
)
(defrule
    (goal 301 2)
=>
    (up-chat-data-to-all "I thought we were friends, player %d!" g: chat-betrayed-by-player)
)
(defrule
    (goal 301 3)
=>
    (up-chat-data-to-all "Player %d! You backstabber!" g: chat-betrayed-by-player)
)
(defrule
    (goal 301 4)
=>
    (up-chat-data-to-all "Player %d? What gives?!" g: chat-betrayed-by-player)
)
(defrule
    (goal 301 5)
=>
    (up-chat-data-to-all "I knew you were a bad egg, player %d." g: chat-betrayed-by-player)
)
(defrule
    (goal 301 6)
=>
    (up-chat-data-to-all "Player %d? But why?" g: chat-betrayed-by-player)
)
(defrule
    (goal 301 7)
=>
    (up-chat-data-to-all "Alright, player %d, bring it on!!" g: chat-betrayed-by-player)
)
(defrule
    (goal 301 8)
=>
    (up-chat-data-to-all "Don't bite off more than you can chew, player %d..." g: chat-betrayed-by-player)
)
(defrule
    (goal 301 9)
=>
    (up-chat-data-to-all "Why me, player %d?" g: chat-betrayed-by-player)
)
(defrule
    (goal 301 10)
=>
    (up-chat-data-to-all "Why now, player %d?" g: chat-betrayed-by-player)
)
(defrule
    (goal 301 11)
=>
    (up-chat-data-to-all "Shame. We could've been best frends, player %d." g: chat-betrayed-by-player)
)
(defrule
    (not
      (goal chat-betrayed-by-player -1)
    )
=>
    (set-goal chat-betrayed-by-player -1)
)
(defrule
    (goal chat-betray-player -1)
=>
    (up-jump-rule 11)
)
(defrule
    (true)
=>
    (set-goal 302 0)
    (generate-random-number 10)
    (up-get-fact random-number 0 302)
)
(defrule
    (goal 302 1)
=>
    (up-chat-data-to-all "It could never have worked between us, player %d." g: chat-betray-player)
)
(defrule
    (goal 302 2)
=>
    (up-chat-data-to-all "I've had enough of you, player %d." g: chat-betray-player)
)
(defrule
    (goal 302 3)
=>
    (up-chat-data-to-all "You aren't needed anymore player %d." g: chat-betray-player)
)
(defrule
    (goal 302 4)
=>
    (up-chat-data-to-all "Time to die, player %d!" g: chat-betray-player)
)
(defrule
    (goal 302 5)
=>
    (up-chat-data-to-all "Player %d, we're done." g: chat-betray-player)
)
(defrule
    (goal 302 6)
=>
    (up-chat-data-to-all "Your days are numbered, player %d!" g: chat-betray-player)
)
(defrule
    (goal 302 7)
=>
    (up-chat-data-to-all "I'm sorry about this, player %d." g: chat-betray-player)
)
(defrule
    (goal 302 8)
=>
    (chat-to-all "Love can be fleeting.")
)
(defrule
    (goal 302 9)
=>
    (chat-to-all "Whoops, wrong button.")
)
(defrule
    (goal 302 10)
=>
    (chat-to-all "I'm itching for a fight.")
)
(defrule
    (not
      (goal chat-betray-player -1)
    )
=>
    (set-goal chat-betray-player -1)
)
(defrule
    (true)
=>
    (set-stance my-player-number ally)
)
(defrule
    (goal resign 1)
    (nand
      (goal resign 0)
      (and
        (goal locked-teams 0)
        (or
          (goal team-game 1)
          (goal free-for-all 1)
        )
      )
    )
=>
    (set-stance every-enemy ally)
    (set-stance every-neutral ally)
)
(defrule
    (goal good-fire-ships 1)
    (taunt-detected any-ally 34)
=>
    (set-goal produce-fire-ships 1)
)
(defrule
    (not
      (goal good-fire-ships 1)
    )
    (taunt-detected any-ally 34)
=>
    (set-goal produce-galleys 1)
)
(defrule
    (not
      (taunt-detected any-ally 34)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 303 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 303)
)
(defrule
    (goal 303 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 303 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 303 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (taunt-detected any-ally 34)
=>
    (acknowledge-taunt this-any-ally 34)
)
(defrule
    (goal full-water-map 0)
    (taunt-detected any-ally 35)
=>
    (set-goal produce-fire-ships 0)
    (set-goal produce-galleys 0)
)
(defrule
    (nand
      (goal full-water-map 0)
      (taunt-detected any-ally 35)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 304 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 304)
)
(defrule
    (goal 304 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 304 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 304 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (nand
      (not
        (goal full-water-map 0)
      )
      (taunt-detected any-ally 35)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 305 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 305)
)
(defrule
    (goal 305 1)
=>
    (chat-to-player every-ally "2Sorry, no.")
)
(defrule
    (goal 305 2)
=>
    (chat-to-player every-ally "2Not right now, sorry.")
)
(defrule
    (goal 305 3)
=>
    (chat-to-player every-ally "2Sorry, no can do!")
)
(defrule
    (taunt-detected any-ally 35)
=>
    (acknowledge-taunt this-any-ally 35)
)
(defrule
    (goal resign 1)
    (or
      (and
        (building-type-count castle == 0)
        (building-type-count town-center == 0)
      )
      (goal team-game 1)
    )
=>
    (resign)
)
(defrule
    (unit-type-count villager < 10)
    (population-cap >= 75)
    (game-time >= 1800)
=>
    (set-goal resign 1)
)
(defrule
    (goal full-water-map 1)
    (warboat-count == 0)
    (game-time >= 1800)
=>
    (set-goal resign 1)
)
(defrule
    (goal resign 1)
    (goal team-game 0)
=>
    (delete-building castle)
    (delete-building town-center)
)
(defrule
    (not
      (taunt-detected any-ally 42)
    )
=>
    (up-jump-rule 7)
)
(defrule
    (up-research-status c: feudal-age < research-pending)
=>
    (chat-to-player every-ally "Dark age.")
)
(defrule
    (up-research-status c: feudal-age == research-pending)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
=>
    (chat-to-player every-ally "On my way to feudal.")
)
(defrule
    (up-research-status c: castle-age < research-pending)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (not
      (up-research-status c: feudal-age == research-pending)
    )
=>
    (chat-to-player every-ally "Feudal age.")
)
(defrule
    (up-research-status c: castle-age == research-pending)
    (not
      (up-research-status c: feudal-age == research-pending)
    )
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (not
      (up-research-status c: castle-age < research-pending)
    )
=>
    (chat-to-player every-ally "On my way to castle.")
)
(defrule
    (up-research-status c: imperial-age < research-pending)
    (not
      (up-research-status c: castle-age < research-pending)
    )
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (not
      (up-research-status c: feudal-age == research-pending)
    )
    (not
      (up-research-status c: castle-age == research-pending)
    )
=>
    (chat-to-player every-ally "Castle age.")
)
(defrule
    (up-research-status c: imperial-age == research-pending)
    (not
      (up-research-status c: castle-age == research-pending)
    )
    (not
      (up-research-status c: feudal-age == research-pending)
    )
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (not
      (up-research-status c: castle-age < research-pending)
    )
    (not
      (up-research-status c: imperial-age < research-pending)
    )
=>
    (chat-to-player every-ally "On my way to imperial.")
)
(defrule
    (not
      (up-research-status c: imperial-age < research-pending)
    )
    (not
      (up-research-status c: castle-age < research-pending)
    )
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (not
      (up-research-status c: feudal-age == research-pending)
    )
    (not
      (up-research-status c: castle-age == research-pending)
    )
    (not
      (up-research-status c: imperial-age == research-pending)
    )
=>
    (chat-to-player every-ally "Imperial age.")
)
(defrule
    (taunt-detected any-ally 42)
=>
    (acknowledge-taunt this-any-ally 42)
)
(defrule
    (nand
      (goal water-map 0)
      (taunt-detected any-enemy 34)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 306 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 306)
)
(defrule
    (goal 306 1)
=>
    (chat-to-all "2Absolutely not.")
)
(defrule
    (goal 306 2)
=>
    (chat-to-all "2Are you out of your mind?")
)
(defrule
    (goal 306 3)
=>
    (chat-to-all "2As if!")
)
(defrule
    (taunt-detected any-enemy 34)
=>
    (acknowledge-taunt this-any-enemy 34)
)
(defrule
    (nand
      (goal full-water-map 1)
      (taunt-detected any-enemy 35)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 307 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 307)
)
(defrule
    (goal 307 1)
=>
    (chat-to-all "2Absolutely not.")
)
(defrule
    (goal 307 2)
=>
    (chat-to-all "2Are you out of your mind?")
)
(defrule
    (goal 307 3)
=>
    (chat-to-all "2As if!")
)
(defrule
    (taunt-detected any-enemy 35)
=>
    (acknowledge-taunt this-any-enemy 35)
)
(defrule
    (not
      (taunt-detected any-enemy 38)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 308 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 308)
)
(defrule
    (goal 308 1)
=>
    (chat-to-all "2Absolutely not.")
)
(defrule
    (goal 308 2)
=>
    (chat-to-all "2Are you out of your mind?")
)
(defrule
    (goal 308 3)
=>
    (chat-to-all "2As if!")
)
(defrule
    (taunt-detected any-enemy 38)
=>
    (acknowledge-taunt this-any-enemy 38)
)
(defrule
    (not
      (game-time < 5)
    )
=>
    (up-jump-rule 14)
)
(defrule
    (or
      (goal free-for-all 1)
      (goal team-game 1)
    )
=>
    (set-goal 309 0)
    (generate-random-number 4)
    (up-get-fact random-number 0 309)
    (disable-self)
)
(defrule
    (goal 309 1)
    (or
      (goal free-for-all 1)
      (goal team-game 1)
    )
=>
    (chat-to-all "Good luck and have fun everyone!")
    (disable-self)
)
(defrule
    (goal free-for-all 1)
    (goal 309 2)
    (or
      (goal free-for-all 1)
      (goal team-game 1)
    )
=>
    (chat-to-all "May the best ruler win!")
    (disable-self)
)
(defrule
    (not
      (goal free-for-all 1)
    )
    (goal 309 2)
    (or
      (goal free-for-all 1)
      (goal team-game 1)
    )
=>
    (chat-to-all "May the best team win!")
    (disable-self)
)
(defrule
    (goal 309 3)
    (or
      (goal free-for-all 1)
      (goal team-game 1)
    )
=>
    (chat-to-all "GL everyone!!!")
    (disable-self)
)
(defrule
    (goal 309 4)
    (or
      (goal free-for-all 1)
      (goal team-game 1)
    )
=>
    (chat-to-all "Let's do this!")
    (disable-self)
)
(defrule
    (not
      (goal free-for-all 1)
    )
    (not
      (goal team-game 1)
    )
=>
    (set-goal 310 0)
    (generate-random-number 7)
    (up-get-fact random-number 0 310)
    (disable-self)
)
(defrule
    (goal 310 1)
    (not
      (goal free-for-all 1)
    )
    (not
      (goal team-game 1)
    )
=>
    (chat-to-all "Hi! Go easy on me, okay?")
    (disable-self)
)
(defrule
    (goal 310 2)
    (not
      (goal free-for-all 1)
    )
    (not
      (goal team-game 1)
    )
=>
    (chat-to-all "Looking forward to this. Let's go.")
    (disable-self)
)
(defrule
    (goal 310 3)
    (not
      (goal free-for-all 1)
    )
    (not
      (goal team-game 1)
    )
=>
    (chat-to-all "Good luck, have fun!")
    (disable-self)
)
(defrule
    (goal 310 4)
    (not
      (goal free-for-all 1)
    )
    (not
      (goal team-game 1)
    )
=>
    (chat-to-all "GL!")
    (disable-self)
)
(defrule
    (goal 310 5)
    (not
      (goal free-for-all 1)
    )
    (not
      (goal team-game 1)
    )
=>
    (chat-to-all "HF!")
    (disable-self)
)
(defrule
    (goal 310 6)
    (not
      (goal free-for-all 1)
    )
    (not
      (goal team-game 1)
    )
=>
    (chat-to-all "Good luck!")
    (disable-self)
)
(defrule
    (goal 310 7)
    (not
      (goal free-for-all 1)
    )
    (not
      (goal team-game 1)
    )
=>
    (chat-to-all "Have fun!")
    (disable-self)
)
(defrule
    (nand
      (game-time >= 60)
      (and
        (game-time < 120)
        (and
          (goal neutral-or-enemy-players-count 0)
          (goal locked-teams 1)
        )
      )
    )
=>
    (up-jump-rule 7)
)
(defrule
    (goal team-game 1)
=>
    (set-goal 311 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 311)
    (disable-self)
)
(defrule
    (goal 311 1)
    (goal team-game 1)
=>
    (chat-to-all "Um, who exactly are we fighting?")
    (disable-self)
)
(defrule
    (goal 311 2)
    (goal team-game 1)
=>
    (chat-to-all "I guess we win already?")
    (disable-self)
)
(defrule
    (not
      (goal team-game 1)
    )
=>
    (set-goal 312 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 312)
    (disable-self)
)
(defrule
    (goal 312 1)
    (not
      (goal team-game 1)
    )
=>
    (chat-to-all "Hello? Is anyone there?")
    (disable-self)
)
(defrule
    (goal 312 2)
    (not
      (goal team-game 1)
    )
=>
    (chat-to-all "Lonely...")
    (disable-self)
)
(defrule
    (goal 312 3)
    (not
      (goal team-game 1)
    )
=>
    (chat-to-all "Nobody's here?")
    (disable-self)
)
(defrule
    (goal locked-teams 1)
=>
    (enable-timer 9 1800)
    (disable-self)
)
(defrule
    (nand
      (goal free-for-all 1)
      (and
        (up-compare-goal score-percentage c:<= 70)
        (and
          (timer-triggered 9)
          (goal locked-teams 1)
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 313 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 313)
    (disable-self)
)
(defrule
    (goal 313 1)
=>
    (chat-to-all "I'm having some trouble with this one.")
    (disable-self)
)
(defrule
    (goal 313 2)
=>
    (chat-to-all "This is a tough game.")
    (disable-self)
)
(defrule
    (goal 313 3)
=>
    (chat-to-all "I don't like my chances here.")
    (disable-self)
)
(defrule
    (nand
      (goal team-game 1)
      (and
        (not
          (goal free-for-all 1)
        )
        (and
          (up-compare-goal score-percentage c:<= 70)
          (and
            (timer-triggered 9)
            (goal locked-teams 1)
          )
        )
      )
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 314 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 314)
    (disable-self)
)
(defrule
    (goal 314 1)
=>
    (chat-to-all "We may need a different strategy...")
    (disable-self)
)
(defrule
    (goal 314 2)
=>
    (chat-to-all "I'm crumbling... Hopefully we still have a shot?")
    (disable-self)
)
(defrule
    (goal 314 3)
=>
    (chat-to-all "This is hard.")
    (disable-self)
)
(defrule
    (nand
      (not
        (goal free-for-all 1)
      )
      (and
        (not
          (goal team-game 1)
        )
        (and
          (up-compare-goal score-percentage c:<= 70)
          (and
            (timer-triggered 9)
            (goal locked-teams 1)
          )
        )
      )
    )
=>
    (up-jump-rule 6)
)
(defrule
    (true)
=>
    (set-goal 315 0)
    (generate-random-number 5)
    (up-get-fact random-number 0 315)
    (disable-self)
)
(defrule
    (goal 315 1)
=>
    (chat-to-all "I feel vastly outpaced, you're playing a good game.")
    (disable-self)
)
(defrule
    (goal 315 2)
=>
    (chat-to-all "I'm not doing very well...")
    (disable-self)
)
(defrule
    (goal 315 3)
=>
    (chat-to-all "This could have gone better, oh well.")
    (disable-self)
)
(defrule
    (goal 315 4)
=>
    (chat-to-all "You're playing quite well.")
    (disable-self)
)
(defrule
    (goal 315 5)
=>
    (chat-to-all "I'm not sure I can best you.")
    (disable-self)
)
(defrule
    (nand
      (goal free-for-all 1)
      (and
        (up-compare-goal score-percentage c:>= 140)
        (and
          (not
            (up-compare-goal score-percentage c:<= 70)
          )
          (and
            (timer-triggered 9)
            (goal locked-teams 1)
          )
        )
      )
    )
=>
    (up-jump-rule 3)
)
(defrule
    (true)
=>
    (set-goal 316 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 316)
    (disable-self)
)
(defrule
    (goal 316 1)
=>
    (chat-to-all "I'm pretty sure I've got this game.")
    (disable-self)
)
(defrule
    (goal 316 2)
=>
    (chat-to-all "It was tough, but I got there in the end.")
    (disable-self)
)
(defrule
    (nand
      (goal team-game 1)
      (and
        (not
          (goal free-for-all 1)
        )
        (and
          (up-compare-goal score-percentage c:>= 140)
          (and
            (not
              (up-compare-goal score-percentage c:<= 70)
            )
            (and
              (timer-triggered 9)
              (goal locked-teams 1)
            )
          )
        )
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (chat-to-all "Looks like we're close to getting this squared off.")
    (disable-self)
)
(defrule
    (nand
      (not
        (goal free-for-all 1)
      )
      (and
        (not
          (goal team-game 1)
        )
        (and
          (up-compare-goal score-percentage c:>= 140)
          (and
            (not
              (up-compare-goal score-percentage c:<= 70)
            )
            (and
              (timer-triggered 9)
              (goal locked-teams 1)
            )
          )
        )
      )
    )
=>
    (up-jump-rule 1)
)
(defrule
    (true)
=>
    (chat-to-all "I'm winning this one. You played well though!")
    (disable-self)
)
(defrule
    (nand
      (and
        (up-compare-goal largest-enemy-military-percentage c:<= 50)
        (goal attacking 0)
      )
      (and
        (military-population >= 20)
        (and
          (timer-triggered 9)
          (goal locked-teams 1)
        )
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (true)
=>
    (set-goal 317 0)
    (generate-random-number 6)
    (up-get-fact random-number 0 317)
    (disable-self)
)
(defrule
    (goal 317 1)
=>
    (chat-to-all "I don't like this...")
    (disable-self)
)
(defrule
    (goal 317 2)
=>
    (chat-to-all "Dicey.")
    (disable-self)
)
(defrule
    (goal 317 3)
=>
    (chat-to-all "I'd better step on the pedal a bit, sheesh.")
    (disable-self)
)
(defrule
    (goal 317 4)
=>
    (chat-to-all "...please don't hurt me!")
    (disable-self)
)
(defrule
    (or
      (goal team-game 1)
      (goal free-for-all 1)
    )
    (goal 317 5)
=>
    (chat-to-all "It's looking scary out there...")
    (disable-self)
)
(defrule
    (not
      (goal team-game 1)
    )
    (not
      (goal free-for-all 1)
    )
    (goal 317 5)
=>
    (chat-to-all "You're looking scary...")
    (disable-self)
)
(defrule
    (goal 317 6)
=>
    (chat-to-all "That's a lot of stuff.")
    (disable-self)
)
(defrule
    (nand
      (goal attacking 1)
      (and
        (up-compare-goal largest-enemy-military-percentage c:>= 170)
        (and
          (nand
            (up-compare-goal largest-enemy-military-percentage c:<= 50)
            (goal attacking 0)
          )
          (and
            (military-population >= 20)
            (and
              (timer-triggered 9)
              (goal locked-teams 1)
            )
          )
        )
      )
    )
=>
    (up-jump-rule 12)
)
(defrule
    (true)
=>
    (set-goal 318 0)
    (generate-random-number 8)
    (up-get-fact random-number 0 318)
    (disable-self)
)
(defrule
    (or
      (goal team-game 1)
      (goal free-for-all 1)
    )
    (goal 318 1)
=>
    (chat-to-all "Let's crush 'em!")
    (disable-self)
)
(defrule
    (not
      (goal team-game 1)
    )
    (not
      (goal free-for-all 1)
    )
    (goal 318 1)
=>
    (chat-to-all "It's time for some violence!")
    (disable-self)
)
(defrule
    (goal 318 2)
=>
    (chat-to-all "Oh yeah, this is good.")
    (disable-self)
)
(defrule
    (or
      (goal team-game 1)
      (goal free-for-all 1)
    )
    (goal 318 3)
=>
    (chat-to-all "You lot aren't prepared for this.")
    (disable-self)
)
(defrule
    (not
      (goal team-game 1)
    )
    (not
      (goal free-for-all 1)
    )
    (goal 318 3)
=>
    (chat-to-all "You aren't prepared for this.")
    (disable-self)
)
(defrule
    (goal 318 4)
=>
    (chat-to-all "[cracks knuckles]")
    (disable-self)
)
(defrule
    (goal 318 5)
=>
    (chat-to-all "I'm pumped! Let's go!!!")
    (disable-self)
)
(defrule
    (goal 318 6)
=>
    (chat-to-all "Allow me to show you some numbers.")
    (disable-self)
)
(defrule
    (goal team-game 1)
    (goal 318 7)
=>
    (chat-to-all "We're bringing the pain.")
    (disable-self)
)
(defrule
    (not
      (goal team-game 1)
    )
    (goal 318 7)
=>
    (chat-to-all "I'm bringing the pain.")
    (disable-self)
)
(defrule
    (goal 318 8)
=>
    (chat-to-all "It'll all be over soon.")
    (disable-self)
)
(defrule
    (nand
      (not
        (goal attacking 1)
      )
      (and
        (up-compare-goal largest-enemy-military-percentage c:>= 170)
        (and
          (nand
            (up-compare-goal largest-enemy-military-percentage c:<= 50)
            (goal attacking 0)
          )
          (and
            (military-population >= 20)
            (and
              (timer-triggered 9)
              (goal locked-teams 1)
            )
          )
        )
      )
    )
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 319 0)
    (generate-random-number 5)
    (up-get-fact random-number 0 319)
    (disable-self)
)
(defrule
    (or
      (goal team-game 1)
      (goal free-for-all 1)
    )
    (goal 319 1)
=>
    (chat-to-all "Come at me.")
    (disable-self)
)
(defrule
    (not
      (goal team-game 1)
    )
    (not
      (goal free-for-all 1)
    )
    (goal 319 1)
=>
    (chat-to-all "I'm ready for what you've got.")
    (disable-self)
)
(defrule
    (goal 319 2)
=>
    (chat-to-all "Feeling confident.")
    (disable-self)
)
(defrule
    (goal 319 3)
=>
    (chat-to-all "Feeling good.")
    (disable-self)
)
(defrule
    (goal 319 4)
=>
    (chat-to-all "I am prepared.")
    (disable-self)
)
(defrule
    (goal 319 5)
=>
    (chat-to-all "Are you ready?")
    (disable-self)
)
(defrule
    (not
      (goal resign 1)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (true)
=>
    (set-goal 320 0)
    (generate-random-number 4)
    (up-get-fact random-number 0 320)
    (disable-self)
)
(defrule
    (goal 320 1)
=>
    (chat-to-all "My heart's not really in this anymore, sorry.")
    (disable-self)
)
(defrule
    (goal 320 2)
=>
    (chat-to-all "It was a good game, I think I'm out though.")
    (disable-self)
)
(defrule
    (goal 320 3)
=>
    (chat-to-all "Good game, well played.")
    (disable-self)
)
(defrule
    (goal 320 4)
=>
    (chat-to-all "I'm done.")
    (disable-self)
)
(defrule
    (not
      (up-research-status c: castle-age == research-pending)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 321 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 321)
    (disable-self)
)
(defrule
    (goal 321 1)
=>
    (chat-to-allies "On my way up.")
    (disable-self)
)
(defrule
    (goal 321 2)
=>
    (chat-to-allies "I've clicked up.")
    (disable-self)
)
(defrule
    (goal 321 3)
=>
    (chat-to-allies "Going castle.")
    (disable-self)
)
(defrule
    (nand
      (goal attacking 0)
      (and
        (goal threat-source watch-tower)
        (and
          (current-age == feudal-age)
          (enemy-buildings-in-town)
        )
      )
    )
=>
    (up-jump-rule 7)
)
(defrule
    (true)
=>
    (set-goal 322 0)
    (generate-random-number 5)
    (up-get-fact random-number 0 322)
    (disable-self)
)
(defrule
    (goal 322 1)
=>
    (chat-to-all "Why must you do this?")
    (disable-self)
)
(defrule
    (goal team-game 1)
    (goal 322 2)
=>
    (chat-to-all "Your teammate is a real piece of work.")
    (disable-self)
)
(defrule
    (not
      (goal team-game 1)
    )
    (goal 322 2)
=>
    (chat-to-all "I don't think I like you very much...")
    (disable-self)
)
(defrule
    (goal 322 3)
=>
    (chat-to-all "[sigh]")
    (disable-self)
)
(defrule
    (goal 322 4)
=>
    (chat-to-all "Why can't we just have fun?")
    (disable-self)
)
(defrule
    (goal 322 5)
=>
    (chat-to-all "You know I can't deal with this. It's unfair.")
    (disable-self)
)
(defrule
    (game-time < 60)
    (building-type-count town-center == 0)
=>
    (set-strategic-number sn-wood-gatherer-percentage 100)
    (set-strategic-number sn-food-gatherer-percentage 0)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (can-build-with-escrow town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
=>
    (release-escrow wood)
    (release-escrow stone)
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (up-research-status c: feudal-age < research-pending)
    (building-type-count town-center > 0)
=>
    (set-strategic-number sn-wood-gatherer-percentage 20)
    (set-strategic-number sn-food-gatherer-percentage 80)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (civilian-population >= 10)
    (up-research-status c: feudal-age < research-pending)
    (building-type-count town-center > 0)
=>
    (set-strategic-number sn-wood-gatherer-percentage 25)
    (set-strategic-number sn-food-gatherer-percentage 75)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (civilian-population >= 15)
    (up-research-status c: feudal-age < research-pending)
    (building-type-count town-center > 0)
=>
    (set-strategic-number sn-wood-gatherer-percentage 30)
    (set-strategic-number sn-food-gatherer-percentage 70)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (civilian-population >= 18)
    (up-research-status c: feudal-age < research-pending)
    (building-type-count town-center > 0)
=>
    (set-strategic-number sn-wood-gatherer-percentage 40)
    (set-strategic-number sn-food-gatherer-percentage 60)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (civilian-population >= 25)
    (up-research-status c: feudal-age < research-pending)
    (building-type-count town-center > 0)
=>
    (set-strategic-number sn-wood-gatherer-percentage 50)
    (set-strategic-number sn-food-gatherer-percentage 50)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (building-type-count town-center > 0)
=>
    (set-strategic-number sn-wood-gatherer-percentage 40)
    (set-strategic-number sn-food-gatherer-percentage 40)
    (set-strategic-number sn-gold-gatherer-percentage 20)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (unit-type-count villager >= 8)
    (building-type-count town-center > 0)
=>
    (set-strategic-number sn-enable-boar-hunting 2)
    (set-strategic-number sn-minimum-number-hunters 1)
    (set-strategic-number sn-minimum-boar-lure-group-size 1)
    (set-strategic-number sn-minimum-boar-hunt-group-size 1)
    (set-strategic-number sn-maximum-hunt-drop-distance 48)
    (disable-self)
)
(defrule
    (dropsite-min-distance live-boar < 4)
    (strategic-number sn-minimum-number-hunters != 8)
    (unit-type-count villager >= 8)
    (building-type-count town-center > 0)
=>
    (set-strategic-number sn-minimum-number-hunters 8)
    (up-drop-resources c: sheep-food 0)
)
(defrule
    (food-amount < 50)
    (up-pending-objects c: villager <= 1)
    (strategic-number sn-minimum-number-hunters == 8)
    (unit-type-count villager >= 8)
    (building-type-count town-center > 0)
=>
    (up-drop-resources c: boar-food 10)
)
(defrule
    (strategic-number sn-minimum-number-hunters == 8)
    (dropsite-min-distance live-boar > 4)
    (or
      (dropsite-min-distance boar-food > 4)
      (dropsite-min-distance boar-food == -1)
    )
    (unit-type-count villager >= 8)
    (building-type-count town-center > 0)
=>
    (set-strategic-number sn-minimum-number-hunters 1)
    (up-retask-gatherers food c: 255)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
    (building-type-count town-center > 0)
=>
    (build monastery)
    (set-goal 339 1)
)
(defrule
    (can-train monk)
    (unit-type-count-total monk-set < 1)
    (building-type-count town-center > 0)
=>
    (train monk)
)
(defrule
    (population-headroom != 0)
    (up-pending-objects c: house < 2)
    (can-build house)
    (housing-headroom < 5)
    (up-research-status c: feudal-age < research-pending)
    (building-type-count town-center > 0)
=>
    (build house)
    (set-goal 339 1)
)
(defrule
    (population-headroom != 0)
    (up-pending-objects c: house < 2)
    (can-build house)
    (housing-headroom < 20)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (building-type-count town-center > 0)
=>
    (build house)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal 323 0)
    (disable-self)
)
(defrule
    (or
      (and
        (dropsite-min-distance wood > 2)
        (resource-found wood)
      )
      (and
        (game-time >= 60)
        (building-type-count-total lumber-camp == 0)
      )
    )
    (up-pending-objects c: lumber-camp == 0)
    (can-build lumber-camp)
    (game-time > 60)
    (building-type-count town-center > 0)
=>
    (build lumber-camp)
    (set-goal 323 1)
)
(defrule
    (goal 323 1)
    (game-time > 60)
    (building-type-count town-center > 0)
=>
    (up-modify-sn sn-camp-max-distance c:+ 1)
)
(defrule
    (true)
=>
    (set-goal 323 0)
)
(defrule
    (building-type-count lumber-camp >= 1)
    (building-type-count town-center > 0)
=>
    (set-goal 223 0)
    (up-get-fact building-type-count-total town-center 324)
    (up-modify-goal 324 c:* 9)
    (up-modify-goal 223 g:+ 324)
    (up-get-fact building-type-count-total mill 324)
    (up-modify-goal 324 c:* 6)
    (up-modify-goal 223 g:+ 324)
    (up-get-fact building-type-count-total farm 324)
)
(defrule
    (or
      (building-type-count-total mill == 0)
      (up-compare-goal 324 g:>= 223)
    )
    (or
      (resource-found food)
      (game-time >= 60)
    )
    (can-build mill)
    (building-type-count lumber-camp >= 1)
    (building-type-count town-center > 0)
=>
    (build mill)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (current-age >= castle-age)
    (up-compare-goal town-center-count g:< desired-town-centers)
    (building-type-count town-center > 0)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (stone-amount < 100)
    (can-buy-commodity stone)
    (strategic-number sn-stone-gatherer-percentage == 0)
    (current-age >= castle-age)
    (up-compare-goal town-center-count g:< desired-town-centers)
    (building-type-count town-center > 0)
=>
    (buy-commodity stone)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (up-compare-goal town-center-count g:< desired-town-centers)
    (building-type-count town-center > 0)
=>
    (build town-center)
    (set-goal 339 1)
)
(defrule
    (up-pending-objects c: castle == 0)
    (building-type-count town-center > 0)
=>
    (set-goal 325 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 325)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (goal 325 1)
    (up-pending-objects c: castle == 0)
    (building-type-count town-center > 0)
=>
    (build castle)
    (set-goal 339 1)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (goal attacking 1)
    (goal 325 2)
    (up-pending-objects c: castle == 0)
    (building-type-count town-center > 0)
=>
    (up-set-placement-data any-enemy town-center c: 4)
    (up-build place-forward 0 c: castle)
)
(defrule
    (true)
=>
    (set-goal 326 0)
    (disable-self)
)
(defrule
    (or
      (dropsite-min-distance gold > 3)
      (and
        (unit-type-count 579 == 0)
        (and
          (unit-type-count 581 == 0)
          (strategic-number sn-gold-gatherer-percentage > 0)
        )
      )
    )
    (resource-found gold)
    (up-pending-objects c: mining-camp == 0)
    (can-build mining-camp)
    (strategic-number sn-gold-gatherer-percentage > 0)
    (building-type-count town-center > 0)
=>
    (build mining-camp)
    (set-goal 326 1)
)
(defrule
    (dropsite-min-distance stone > 3)
    (resource-found stone)
    (up-pending-objects c: mining-camp == 0)
    (can-build mining-camp)
    (strategic-number sn-stone-gatherer-percentage > 0)
    (building-type-count town-center > 0)
=>
    (build mining-camp)
    (set-goal 326 1)
)
(defrule
    (goal 326 1)
    (building-type-count town-center > 0)
=>
    (up-modify-sn sn-camp-max-distance c:+ 4)
)
(defrule
    (true)
=>
    (set-goal 326 0)
)
(defrule
    (wood-amount >= 150)
    (up-pending-objects c: farm == 0)
    (up-research-status c: feudal-age < research-pending)
    (building-type-count town-center > 0)
=>
    (up-get-fact unit-type-count villager 324)
    (up-modify-goal 324 s:* sn-food-gatherer-percentage)
    (up-modify-goal 324 c:/ 100)
    (up-get-fact building-type-count-total farm 223)
)
(defrule
    (up-compare-goal 223 g:< 324)
    (can-build farm)
    (wood-amount >= 150)
    (up-pending-objects c: farm == 0)
    (up-research-status c: feudal-age < research-pending)
    (building-type-count town-center > 0)
=>
    (build farm)
)
(defrule
    (up-research-status c: ri-horse-collar != research-pending)
    (up-research-status c: ri-heavy-plow != research-pending)
    (up-research-status c: ri-crop-rotation != research-pending)
    (or
      (wood-amount >= 200)
      (building-type-count-total farm < 6)
    )
    (or
      (research-completed ri-horse-collar)
      (food-amount < 75)
    )
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (building-type-count town-center > 0)
=>
    (up-get-fact unit-type-count villager 324)
    (up-modify-goal 324 s:* sn-food-gatherer-percentage)
    (up-modify-goal 324 c:/ 100)
    (up-get-fact building-type-count-total farm 223)
)
(defrule
    (up-compare-goal 223 g:< 324)
    (can-build farm)
    (up-research-status c: ri-horse-collar != research-pending)
    (up-research-status c: ri-heavy-plow != research-pending)
    (up-research-status c: ri-crop-rotation != research-pending)
    (or
      (wood-amount >= 200)
      (building-type-count-total farm < 6)
    )
    (or
      (research-completed ri-horse-collar)
      (food-amount < 75)
    )
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (building-type-count town-center > 0)
=>
    (build farm)
)
(defrule
    (nand
      (current-age >= feudal-age)
      (or
        (building-type-count town-center > 0)
        (game-time >= 8)
      )
    )
=>
    (up-jump-rule 112)
)
(defrule
    (can-build market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (wood-amount > 200)
=>
    (build market)
    (set-goal 339 1)
)
(defrule
    (true)
=>
    (set-goal did-tribute 0)
)
(defrule
    (not
      (goal team-game 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (up-allied-resource-amount any-ally wood < wood-threshold)
    (up-compare-goal non-escrowed-wood c:> max-wood)
=>
    (tribute-to-player this-any-ally wood 100)
    (set-goal did-tribute 1)
    (chat-local-to-self "sending wood to ally")
)
(defrule
    (not
      (goal team-game 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (up-allied-resource-amount any-ally food < food-threshold)
    (up-compare-goal non-escrowed-food c:> max-food)
=>
    (tribute-to-player this-any-ally food 100)
    (set-goal did-tribute 1)
    (chat-local-to-self "sending food to ally")
)
(defrule
    (not
      (goal team-game 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (up-allied-resource-amount any-ally gold < gold-threshold)
    (up-compare-goal non-escrowed-gold c:> max-gold)
=>
    (tribute-to-player this-any-ally gold 100)
    (set-goal did-tribute 1)
    (chat-local-to-self "sending gold to ally")
)
(defrule
    (not
      (goal team-game 1)
    )
=>
    (up-jump-rule 1)
)
(defrule
    (up-allied-resource-amount any-ally stone < stone-threshold)
    (up-compare-goal non-escrowed-stone c:> max-stone)
=>
    (tribute-to-player this-any-ally stone 100)
    (set-goal did-tribute 1)
    (chat-local-to-self "sending stone to ally")
)
(defrule
    (not
      (goal team-game 1)
    )
=>
    (up-jump-rule 12)
)
(defrule
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (building-type-count market >= 1)
    (taunt-detected any-ally 3)
=>
    (tribute-to-player this-any-ally food 100)
    (set-goal did-tribute 1)
)
(defrule
    (nand
      (and
        (up-compare-goal non-escrowed-food c:> food-threshold)
        (building-type-count market >= 1)
      )
      (taunt-detected any-ally 3)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 328 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 328)
)
(defrule
    (goal 328 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 328 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 328 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (nand
      (nand
        (up-compare-goal non-escrowed-food c:> food-threshold)
        (building-type-count market >= 1)
      )
      (taunt-detected any-ally 3)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 329 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 329)
)
(defrule
    (goal 329 1)
=>
    (chat-to-player every-ally "2Sorry, no.")
)
(defrule
    (goal 329 2)
=>
    (chat-to-player every-ally "2Not right now, sorry.")
)
(defrule
    (goal 329 3)
=>
    (chat-to-player every-ally "2Sorry, no can do!")
)
(defrule
    (taunt-detected any-ally 3)
=>
    (acknowledge-taunt this-any-ally 3)
)
(defrule
    (not
      (goal team-game 1)
    )
=>
    (up-jump-rule 12)
)
(defrule
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (building-type-count market >= 1)
    (taunt-detected any-ally 4)
=>
    (tribute-to-player this-any-ally wood 100)
    (set-goal did-tribute 1)
)
(defrule
    (nand
      (and
        (up-compare-goal non-escrowed-wood c:> wood-threshold)
        (building-type-count market >= 1)
      )
      (taunt-detected any-ally 4)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 330 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 330)
)
(defrule
    (goal 330 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 330 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 330 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (nand
      (nand
        (up-compare-goal non-escrowed-wood c:> wood-threshold)
        (building-type-count market >= 1)
      )
      (taunt-detected any-ally 4)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 331 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 331)
)
(defrule
    (goal 331 1)
=>
    (chat-to-player every-ally "2Sorry, no.")
)
(defrule
    (goal 331 2)
=>
    (chat-to-player every-ally "2Not right now, sorry.")
)
(defrule
    (goal 331 3)
=>
    (chat-to-player every-ally "2Sorry, no can do!")
)
(defrule
    (taunt-detected any-ally 4)
=>
    (acknowledge-taunt this-any-ally 4)
)
(defrule
    (not
      (goal team-game 1)
    )
=>
    (up-jump-rule 12)
)
(defrule
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (building-type-count market >= 1)
    (taunt-detected any-ally 5)
=>
    (tribute-to-player this-any-ally gold 100)
    (set-goal did-tribute 1)
)
(defrule
    (nand
      (and
        (up-compare-goal non-escrowed-gold c:> gold-threshold)
        (building-type-count market >= 1)
      )
      (taunt-detected any-ally 5)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 332 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 332)
)
(defrule
    (goal 332 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 332 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 332 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (nand
      (nand
        (up-compare-goal non-escrowed-gold c:> gold-threshold)
        (building-type-count market >= 1)
      )
      (taunt-detected any-ally 5)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 333 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 333)
)
(defrule
    (goal 333 1)
=>
    (chat-to-player every-ally "2Sorry, no.")
)
(defrule
    (goal 333 2)
=>
    (chat-to-player every-ally "2Not right now, sorry.")
)
(defrule
    (goal 333 3)
=>
    (chat-to-player every-ally "2Sorry, no can do!")
)
(defrule
    (taunt-detected any-ally 5)
=>
    (acknowledge-taunt this-any-ally 5)
)
(defrule
    (not
      (goal team-game 1)
    )
=>
    (up-jump-rule 12)
)
(defrule
    (up-compare-goal non-escrowed-stone c:> stone-threshold)
    (building-type-count market >= 1)
    (taunt-detected any-ally 6)
=>
    (tribute-to-player this-any-ally stone 100)
    (set-goal did-tribute 1)
)
(defrule
    (nand
      (and
        (up-compare-goal non-escrowed-stone c:> stone-threshold)
        (building-type-count market >= 1)
      )
      (taunt-detected any-ally 6)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 334 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 334)
)
(defrule
    (goal 334 1)
=>
    (chat-to-player every-ally "1Sure.")
)
(defrule
    (goal 334 2)
=>
    (chat-to-player every-ally "1Of course.")
)
(defrule
    (goal 334 3)
=>
    (chat-to-player every-ally "1Okay.")
)
(defrule
    (nand
      (nand
        (up-compare-goal non-escrowed-stone c:> stone-threshold)
        (building-type-count market >= 1)
      )
      (taunt-detected any-ally 6)
    )
=>
    (up-jump-rule 4)
)
(defrule
    (true)
=>
    (set-goal 335 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 335)
)
(defrule
    (goal 335 1)
=>
    (chat-to-player every-ally "2Sorry, no.")
)
(defrule
    (goal 335 2)
=>
    (chat-to-player every-ally "2Not right now, sorry.")
)
(defrule
    (goal 335 3)
=>
    (chat-to-player every-ally "2Sorry, no can do!")
)
(defrule
    (taunt-detected any-ally 6)
=>
    (acknowledge-taunt this-any-ally 6)
)
(defrule
    (or
      (goal team-game 0)
      (goal did-tribute 0)
    )
=>
    (up-get-fact resource-amount wood 324)
    (up-get-fact escrow-amount wood 223)
    (up-modify-goal 324 g:- 223)
    (up-get-fact resource-amount food 336)
    (up-get-fact escrow-amount food 223)
    (up-modify-goal 336 g:- 223)
    (up-get-fact resource-amount gold 337)
    (up-get-fact escrow-amount gold 223)
    (up-modify-goal 337 g:- 223)
)
(defrule
    (up-compare-goal 324 c:> max-gold)
    (can-sell-commodity wood)
    (up-compare-goal 337 c:< max-gold)
    (or
      (goal team-game 0)
      (goal did-tribute 0)
    )
=>
    (sell-commodity wood)
)
(defrule
    (up-compare-goal 336 c:> max-gold)
    (can-sell-commodity food)
    (up-compare-goal 337 c:< max-gold)
    (or
      (goal team-game 0)
      (goal did-tribute 0)
    )
=>
    (sell-commodity food)
)
(defrule
    (up-compare-goal 324 c:< max-gold)
    (up-compare-goal 337 c:> max-gold)
    (can-buy-commodity wood)
    (or
      (goal team-game 0)
      (goal did-tribute 0)
    )
=>
    (buy-commodity wood)
)
(defrule
    (up-compare-goal 336 c:< max-gold)
    (up-compare-goal 337 c:> max-gold)
    (can-buy-commodity food)
    (or
      (goal team-game 0)
      (goal did-tribute 0)
    )
=>
    (buy-commodity food)
)
(defrule
    (town-under-attack)
    (goal attacking 0)
=>
    (up-get-fact resource-amount wood 336)
    (up-get-fact escrow-amount wood 337)
    (up-modify-goal 336 g:- 337)
    (up-get-fact resource-amount food 324)
    (up-get-fact escrow-amount food 337)
    (up-modify-goal 324 g:- 337)
    (up-get-fact resource-amount gold 223)
    (up-get-fact escrow-amount gold 337)
    (up-modify-goal 223 g:- 337)
)
(defrule
    (up-compare-goal 336 c:> gold-threshold)
    (can-sell-commodity wood)
    (up-compare-goal 223 c:< gold-threshold)
    (town-under-attack)
    (goal attacking 0)
=>
    (sell-commodity wood)
)
(defrule
    (up-compare-goal 324 c:> gold-threshold)
    (can-sell-commodity food)
    (up-compare-goal 223 c:< gold-threshold)
    (town-under-attack)
    (goal attacking 0)
=>
    (sell-commodity food)
)
(defrule
    (up-compare-goal 336 c:< gold-threshold)
    (up-compare-goal 223 c:> gold-threshold)
    (can-buy-commodity wood)
    (town-under-attack)
    (goal attacking 0)
=>
    (buy-commodity wood)
)
(defrule
    (up-compare-goal 324 c:< gold-threshold)
    (up-compare-goal 223 c:> gold-threshold)
    (can-buy-commodity food)
    (town-under-attack)
    (goal attacking 0)
=>
    (buy-commodity food)
)
(defrule
    (commodity-buying-price wood <= excellent-wood-price)
    (or
      (up-compare-goal non-escrowed-wood c:< wood-threshold)
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (wood-amount < half-max-wood)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (chat-local-to-self "buy wood, excellent price.")
)
(defrule
    (can-buy-commodity wood)
    (commodity-buying-price wood <= excellent-wood-price)
    (or
      (up-compare-goal non-escrowed-wood c:< wood-threshold)
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (wood-amount < half-max-wood)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (buy-commodity wood)
)
(defrule
    (commodity-buying-price food <= excellent-food-price)
    (or
      (up-compare-goal non-escrowed-food c:< food-threshold)
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (food-amount < half-max-food)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (chat-local-to-self "buy food, excellent price.")
)
(defrule
    (can-buy-commodity food)
    (commodity-buying-price food <= excellent-food-price)
    (or
      (up-compare-goal non-escrowed-food c:< food-threshold)
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (food-amount < half-max-food)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (buy-commodity food)
)
(defrule
    (commodity-selling-price wood >= excellent-wood-sell-price)
    (or
      (up-compare-goal non-escrowed-wood c:> wood-threshold)
      (up-compare-goal non-escrowed-gold c:< gold-threshold)
    )
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (gold-amount < half-max-gold)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (chat-local-to-self "sell wood, excellent price.")
)
(defrule
    (can-sell-commodity wood)
    (commodity-selling-price wood >= excellent-wood-sell-price)
    (or
      (up-compare-goal non-escrowed-wood c:> wood-threshold)
      (up-compare-goal non-escrowed-gold c:< gold-threshold)
    )
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (gold-amount < half-max-gold)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (sell-commodity wood)
)
(defrule
    (commodity-selling-price food >= excellent-food-sell-price)
    (or
      (up-compare-goal non-escrowed-food c:> food-threshold)
      (up-compare-goal non-escrowed-gold c:< gold-threshold)
    )
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (gold-amount < half-max-gold)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (chat-local-to-self "sell food, excellent price.")
)
(defrule
    (can-sell-commodity food)
    (commodity-selling-price food >= excellent-food-sell-price)
    (or
      (up-compare-goal non-escrowed-food c:> food-threshold)
      (up-compare-goal non-escrowed-gold c:< gold-threshold)
    )
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (gold-amount < half-max-gold)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (sell-commodity food)
)
(defrule
    (commodity-buying-price wood <= good-wood-price)
    (up-compare-goal non-escrowed-wood c:< wood-threshold)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (chat-local-to-self "buy wood, good price.")
)
(defrule
    (can-buy-commodity wood)
    (commodity-buying-price wood <= good-wood-price)
    (up-compare-goal non-escrowed-wood c:< wood-threshold)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (buy-commodity wood)
)
(defrule
    (commodity-buying-price food <= good-food-price)
    (up-compare-goal non-escrowed-food c:< food-threshold)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (chat-local-to-self "buy food, good price.")
)
(defrule
    (can-buy-commodity food)
    (commodity-buying-price food <= good-food-price)
    (up-compare-goal non-escrowed-food c:< food-threshold)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (buy-commodity food)
)
(defrule
    (commodity-selling-price wood >= good-wood-sell-price)
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (not
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (chat-local-to-self "sell wood, good price.")
)
(defrule
    (can-sell-commodity wood)
    (commodity-selling-price wood >= good-wood-sell-price)
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (not
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (sell-commodity wood)
)
(defrule
    (commodity-selling-price food >= good-food-sell-price)
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (not
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (chat-local-to-self "sell food, good price.")
)
(defrule
    (can-sell-commodity food)
    (commodity-selling-price food >= good-food-sell-price)
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (not
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (nand
      (town-under-attack)
      (goal attacking 0)
    )
=>
    (sell-commodity food)
)
(defrule
    (true)
=>
    (enable-timer 10 60)
    (disable-self)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 2)
    (strategic-number sn-food-gatherer-percentage >= 2)
    (strategic-number sn-gold-gatherer-percentage <= 96)
    (not
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (timer-triggered 10)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 2)
    (up-modify-sn sn-food-gatherer-percentage c:- 2)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 4)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 2)
    (strategic-number sn-gold-gatherer-percentage >= 2)
    (strategic-number sn-food-gatherer-percentage <= 96)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (not
      (up-compare-goal non-escrowed-food c:> food-threshold)
    )
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (timer-triggered 10)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 2)
    (up-modify-sn sn-gold-gatherer-percentage c:- 2)
    (up-modify-sn sn-food-gatherer-percentage c:+ 4)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 4)
    (strategic-number sn-food-gatherer-percentage <= 98)
    (strategic-number sn-gold-gatherer-percentage <= 98)
    (not
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (not
      (up-compare-goal non-escrowed-food c:> food-threshold)
    )
    (up-compare-goal non-escrowed-wood c:> wood-threshold)
    (timer-triggered 10)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 4)
    (up-modify-sn sn-food-gatherer-percentage c:+ 2)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 2)
    (strategic-number sn-gold-gatherer-percentage >= 2)
    (strategic-number sn-wood-gatherer-percentage <= 96)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (not
      (up-compare-goal non-escrowed-wood c:> wood-threshold)
    )
    (timer-triggered 10)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 2)
    (up-modify-sn sn-gold-gatherer-percentage c:- 2)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 4)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 4)
    (strategic-number sn-wood-gatherer-percentage <= 98)
    (strategic-number sn-gold-gatherer-percentage <= 98)
    (not
      (up-compare-goal non-escrowed-gold c:> gold-threshold)
    )
    (up-compare-goal non-escrowed-food c:> food-threshold)
    (not
      (up-compare-goal non-escrowed-wood c:> wood-threshold)
    )
    (timer-triggered 10)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 4)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 2)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-gold-gatherer-percentage >= 4)
    (strategic-number sn-wood-gatherer-percentage <= 98)
    (strategic-number sn-food-gatherer-percentage <= 98)
    (up-compare-goal non-escrowed-gold c:> gold-threshold)
    (not
      (up-compare-goal non-escrowed-food c:> food-threshold)
    )
    (not
      (up-compare-goal non-escrowed-wood c:> wood-threshold)
    )
    (timer-triggered 10)
=>
    (up-modify-sn sn-gold-gatherer-percentage c:- 4)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 2)
    (up-modify-sn sn-food-gatherer-percentage c:+ 2)
)
(defrule
    (timer-triggered 10)
=>
    (disable-timer 10)
    (enable-timer 10 60)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 1)
    (strategic-number sn-gold-gatherer-percentage >= 1)
    (strategic-number sn-wood-gatherer-percentage <= 98)
    (strategic-number sn-wood-gatherer-percentage < minimum-wood-gatherer-percentage)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 1)
    (up-modify-sn sn-gold-gatherer-percentage c:- 1)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 1)
    (strategic-number sn-gold-gatherer-percentage >= 1)
    (strategic-number sn-food-gatherer-percentage <= 98)
    (strategic-number sn-food-gatherer-percentage < minimum-food-gatherer-percentage)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 1)
    (up-modify-sn sn-gold-gatherer-percentage c:- 1)
    (up-modify-sn sn-food-gatherer-percentage c:+ 2)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 1)
    (strategic-number sn-food-gatherer-percentage >= 1)
    (strategic-number sn-gold-gatherer-percentage <= 98)
    (strategic-number sn-gold-gatherer-percentage < minimum-gold-gatherer-percentage)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 1)
    (up-modify-sn sn-food-gatherer-percentage c:- 1)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 2)
)
(defrule
    (goal do-stone-mining 1)
=>
    (set-goal 338 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 338)
    (disable-self)
)
(defrule
    (nand
      (goal 338 1)
      (goal do-stone-mining 1)
    )
=>
    (up-jump-rule 3)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage < 8)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage < 8)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-gold-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage < 8)
=>
    (up-modify-sn sn-gold-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (nand
      (goal 338 2)
      (goal do-stone-mining 1)
    )
=>
    (up-jump-rule 3)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage < 4)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-food-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage < 4)
=>
    (up-modify-sn sn-food-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-gold-gatherer-percentage >= 1)
    (strategic-number sn-stone-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage < 4)
=>
    (up-modify-sn sn-gold-gatherer-percentage c:- 1)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 1)
)
(defrule
    (goal do-stone-mining 1)
=>
    (up-jump-rule 3)
)
(defrule
    (strategic-number sn-stone-gatherer-percentage >= 1)
    (strategic-number sn-wood-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage > 0)
=>
    (up-modify-sn sn-stone-gatherer-percentage c:- 1)
    (up-modify-sn sn-wood-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-stone-gatherer-percentage >= 1)
    (strategic-number sn-food-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage > 0)
=>
    (up-modify-sn sn-stone-gatherer-percentage c:- 1)
    (up-modify-sn sn-food-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-stone-gatherer-percentage >= 1)
    (strategic-number sn-gold-gatherer-percentage <= 99)
    (strategic-number sn-stone-gatherer-percentage > 0)
=>
    (up-modify-sn sn-stone-gatherer-percentage c:- 1)
    (up-modify-sn sn-gold-gatherer-percentage c:+ 1)
)
(defrule
    (strategic-number sn-maximum-town-size <= 30)
=>
    (set-strategic-number sn-maximum-town-size 30)
    (set-strategic-number sn-minimum-town-size 8)
    (set-strategic-number sn-safe-town-size 30)
    (set-strategic-number sn-maximum-food-drop-distance 30)
    (set-goal 340 0)
    (disable-self)
)
(defrule
    (strategic-number sn-maximum-town-size <= 30)
=>
    (up-modify-sn sn-maximum-town-size c:+ 4)
    (up-modify-sn sn-maximum-town-size c:min 30)
    (set-strategic-number sn-minimum-town-size 8)
    (set-strategic-number sn-safe-town-size 30)
    (set-strategic-number sn-maximum-food-drop-distance 30)
)
(defrule
    (goal 339 0)
    (strategic-number sn-maximum-town-size <= 30)
=>
    (set-goal 340 0)
)
(defrule
    (goal 339 1)
    (goal 340 0)
    (strategic-number sn-maximum-town-size <= 30)
=>
    (up-modify-sn sn-maximum-town-size s:= sn-minimum-town-size)
    (set-goal 340 1)
)
(defrule
    (strategic-number sn-maximum-town-size <= 30)
=>
    (set-goal 339 0)
)
