;Translated by https://github.com/lewisc64/aoe2ai
(defconst chat-d7012f8470b17ca97ea6cffc5ab124bd893c9226 "I'm not making any villagers!")
(defconst out-count 117)
(defconst chat-0cccec670386b467c91aa785be1da8c93b2df9a6 "1Help is on the way!")
(defconst chat-d5c5dbfd928deef533a0d03fee5d0b1f95ff70a2 "Already attacking!")
(defconst chat-1e68557cb3a751e4168c0ab38b3b4e96a5a8d303 "Nice moves! I could do with some lessons!")
(defconst chat-9e302f1435b6dcace320e320d120b98920c4a95f "Let's dance, punk!")
(defconst chat-a6e3a0111582b61f846fa4e86c9595da7dcc09fb "Do a headstand!")
(defconst chat-012a48b2b42594bd076f129ed65d30e1d7536aee "Hit the floor!")
(defconst chat-862fae72355bf64d3f65ce410f26d4325e562b89 "Hit it!")
(defconst chat-25810c507aa83718313838dce1f1d34fb688d19f "Man, I like the vibe in here.")
(defconst chat-63539ed9156eb6843685979d45e9c9f61eceed91 "Start the music!")
(defconst chat-eec0222a3c2635db93e2edb9f489caf901393185 "Let's turn it up a notch.")
(defconst chat-7f15733a1a6b905879663b619d9c6b412049e596 "Turn up the volume!")
(defconst taunt-enemies 107)
(defconst chat-46ac43f7e6b0ae5ce5f964045b04c1abb08f6fc0 "This party's getting a bit stale...")
(defconst chat-e5aca3c0d428ea629876fa092922bd3133be5112 "I'm getting a little tired...")
(defconst chat-196f5c1d91dc8099050c5a736992d83b356240cc "It's been a long night...")
(defconst chat-ab5edeaef630d8d7b56fefef47876cc2d39c98ef "All this dancing is giving me a headache...")
(defconst chat-573d07f054e25c6a1be98dd3d019f7d849be5b30 "1I'll dance to that!")
(defconst chat-a18a4ebf9551792441f2d56574ecfdbf4c2822fe "1Right away.")
(defconst chat-49d8263a5eb48a6b02521202b3379cc2ab1073f5 "1Gotcha!")
(defconst chat-7951e682d99349849c0b8f6d532792ec7b5389ba "2Not really feelin' the vibe...")
(defconst chat-21c103fc315890be4685378e0edcf2bb22385bb9 "2Nah.")
(defconst chat-1ef6222feb6bfe03b756638e78b0747130db8e83 "2No can-do, matey.")
(defconst chat-5f18ff15fb2138ca9ab6ecee8f84bac629110faa "3Any extra grub?")
(defconst chat-629f862c9fd71b8356bf949e19483e04af96b574 "3Man, I'm starving.")
(defconst chat-07a0584dd72d68f6e200d8e43946ad111b6e46b5 "3Working up an appetite here. Help?")
(defconst chat-87894780931fdc90a726966caf654f2c3fc10033 "4Need wood. For plates?")
(defconst chat-ceb2461dd026c94f28b8f86064c9c8f79872b642 "4The stove's run out of fuel! You don't want me to freeze, right?")
(defconst chat-1d362d276f7bb069d51ac82a19f6fc1d4eea2cfd "5Spent all my money on drinks...")
(defconst chat-180538df85fb5e56c743d34a9c719f1477c36732 "5Out of cash. Fix me up?")
(defconst chat-97ba38f1af74fae61f04901af4f855f5d8a7b48a "6Need some rocks to throw.")
(defconst chat-89357b8f665602afc596212a534517a76ca18b07 "6I fancy getting a bit stoned tonight.")
(defconst chat-965a0f00cfd0bf1021c398e6319d0076f86aa350 "12Could use some help here!")
(defconst chat-b2230605d3679d364f8a43049ab880d9a03ac391 "12It's not looking good.")
(defconst chat-dcbac7d6f6f5a6201591400f7044386b6e5367c0 "12Nasties in my base! Help?")
(defconst chat-16b1f5319bb20e80b6daae909b196f9fee2cad2f "31Let's rock and roll!")
(defconst chat-73a552cc05bd0ea09568e916b9be1b9c3ffae505 "31It's time to boogie!")
(defconst chat-6f5d7483f2a3888a96a984d93f24813260cc1920 "31Let's waltz on in there!")
(defconst chat-1bdc740b6e6a6d27628421f83dfdbed0019e2727 "Come on! Age up! Make sure you have a lumber camp and a mill.")
(defconst chat-7118be8f4c86bdb22b6178df62b3eeb689caad1f "I'll send you food when I'm able to.")
(defconst chat-56fa240f99d527be4b92227d77ebaff75b9e3bdb "Don't feel like going to the castle age?")
(defconst chat-d408512c600b7751f46e4fa791cc438e7de5f1c9 "Make sure you have a blacksmith, and either a market or a military building.")
(defconst chat-d2dfe5867d53126e1c87cdffd0244fcf6b10f961 "I can send you the resources when I have enough.")
(defconst chat-60a59a7fdeaf805a4de0f4ea30b4769001485d1a "I'm fast castling. Well, I *say* fast...")
(defconst chat-30f1aaa162016aa62cc384655607a7cdd32a399c "I'm going to be aggressive in the feudal age.")
(defconst choose-initial-balance 105)
(defconst score-additions-count 104)
(defconst gold-score-subtotal 103)
(defconst food-score-subtotal 102)
(defconst wood-score-subtotal 101)
(defconst multiplier 100)
(defconst resource-multiplier 99)
(defconst current-score 98)
(defconst creation-time 97)
(defconst gold-score 96)
(defconst food-score 95)
(defconst wood-score 94)
(defconst total-score 93)
(defconst focus-player-military-population 55)
(defconst own-military-population 56)
(defconst temp 57)
(defconst military-superiority 58)
(defconst chat-2b7dbde44c1d62cb248c73980e5dc1134075420d "making bombard-cannons")
(defconst chat-e947f6dfd3359ca9759572d3a120ddfa89594453 "making hand-cannoneers")
(defconst chat-49362e1ef21534ee17538849a64e5f190e7e1c52 "making eagles")
(defconst chat-f53bef687d16989e8da4065d3fc47d7c06a02eee "making cavalry-archers")
(defconst chat-4ebecc54e7bed019c313b95e072da77b98cdd031 "making camels")
(defconst chat-25f226dfcfaa010b71f8b1ff606dd119d2c4bebb "making battle-elephants")
(defconst chat-c1527f5f4a9b1a91515e2d5e096a2c185d4e8c58 "making trebuchets")
(defconst chat-32e9a55d0d786d7b08fa3d04ec41210095d5041b "making monks")
(defconst chat-3eab6e3969bbd2f9906caa3e2216628658886b46 "making unique-unit")
(defconst chat-df1515f82e2c4e8a08bdd64fb50222ea249b212a "making scorpions")
(defconst chat-9c2def26e0794d1347b396dc9ce9934e8b1f948b "making mangonels")
(defconst chat-ba459322adb9e72fc7957dd67a62d1920fd83d3e "making rams")
(defconst chat-b1bd258d5af7cd5de7303540dbfb300cb5b490d0 "making knights")
(defconst chat-4c9be25f5e4f78dec3ce52791e58e3c24239a6c3 "making scouts")
(defconst chat-6b25242d1191614820a635dcc4fb519ce8cd2b19 "making skirmishers")
(defconst chat-ef51e5603d8786964a2c6039c9e1cb794abd2324 "making archers")
(defconst chat-363ffec7dd0a9cd80403c686ca471da884772f6e "making condottiero")
(defconst chat-080814ba91c1353d2f19b339640aa5dc57e7fa81 "making spearmen")
(defconst chat-1bf89ec1f98e82003ce4f980b4b067e58edaf4d8 "making militia")
(defconst producing-siege 85)
(defconst producing-ranged 84)
(defconst producing-cavalry 83)
(defconst producing-infantry 82)
(defconst allowed-skirmishers 80)
(defconst produce-cavalry 81)
(defconst produce-hand-cannoneer 79)
(defconst producing-trash 78)
(defconst produce-bombard-cannons 77)
(defconst produce-hand-cannoneers 76)
(defconst produce-eagles 75)
(defconst produce-cavalry-archers 74)
(defconst produce-camels 73)
(defconst produce-battle-elephants 72)
(defconst produce-trebuchets 71)
(defconst produce-monks 70)
(defconst produce-unique-unit 69)
(defconst produce-scorpions 68)
(defconst produce-mangonels 67)
(defconst produce-rams 66)
(defconst produce-knights 65)
(defconst produce-scouts 64)
(defconst produce-skirmishers 63)
(defconst produce-archers 62)
(defconst produce-condottiero 61)
(defconst produce-spearmen 60)
(defconst produce-militia 59)
(defconst taunt-allies 86)
(defconst chat-7144911e198ce84066e1af2d8d11c90306e746e3 "escrow for ram")
(defconst chat-11db29c3fa2e13c26abc575755f05e11aa166df5 "escrow for treb")
(defconst make-food-unit 91)
(defconst make-wood-unit 90)
(defconst chat-73c3942e655022a22106ca880be2cf0d33b8d6c9 "attacking with groups")
(defconst chat-3c63d67d023806b728662d5e75da4320a513e54b "attacking with TSA")
(defconst chat-3fc7599d2e3bfc62aba20780800052d4ecb7ef29 "attacking castle/imp")
(defconst chat-5b8ed1ce7b1125332594a31fe95db897ec0f2827 "attacking feudal")
(defconst chat-65e17d4a9c1b0cd4fe790dbd64cea93a769e3eef "attacking dark")
(defconst chat-43b2b04ac6a028b687a2f0015de89e6fdd73d5ea "attacking pop blocked")
(defconst chat-9d97f0c3c952c2083d7923fbea71fc38d4222e6c "attacking turtle")
(defconst retarget 92)
(defconst should-make-villagers 51)
(defconst chat-80b7f58791874cd5736eac7bcdc4ea5510ffe468 "Market?")
(defconst chat-dc11f49a61cbf05c5ba15f80e6ae6c3226d645b4 "I'm housed! Panic!")
(defconst current-farm-count 53)
(defconst chat-0fb05f52207007a291b6919d865b3f08c65255b4 "I want to break free!")
(defconst total-villagers 36)
(defconst total-trade 37)
(defconst total-wood-gatherer-percentage 38)
(defconst total-food-gatherer-percentage 39)
(defconst total-gold-gatherer-percentage 40)
(defconst total-stone-gatherer-percentage 43)
(defconst expected-wood-gatherers 44)
(defconst expected-food-gatherers 45)
(defconst expected-gold-gatherers 46)
(defconst expected-stone-gatherers 47)
(defconst escrowed-wood 30)
(defconst escrowed-food 31)
(defconst escrowed-gold 32)
(defconst non-escrowed-wood 33)
(defconst non-escrowed-food 34)
(defconst non-escrowed-gold 35)
(defconst chat-8f775db70fe5e634c9f299d0e75c42a82ad7f2fc "-----------------")
(defconst initial-age 10)
(defconst desired-villagers 11)
(defconst desired-villagers-with-trade 12)
(defconst desired-trade 13)
(defconst research-economy-upgrades 14)
(defconst age-up 15)
(defconst age-up-now 16)
(defconst turtle 17)
(defconst militant 18)
(defconst use-town-size-attack 19)
(defconst boom 20)
(defconst threat-time 21)
(defconst threat-player 22)
(defconst threat-source 23)
(defconst threat-target 24)
(defconst resign 25)
(defconst build-walls 26)
(defconst help-allies 27)
(defconst team-game 28)
(defconst chat-a7616ae92edcf1e8cd9be23cff264901472d73cf "So, something of a free for all game here, eh?")
(defconst free-for-all 29)
(defconst stone-modifier-percentage 5)
(defconst gold-modifier-percentage 4)
(defconst food-modifier-percentage 3)
(defconst wood-modifier-percentage 2)
(defconst attacking 1)
(defconst condottiero 184)
(defconst cavalry-unit-class 912)
(defconst infantry-unit-class 906)
(defconst ranged-unit-class 900)
(defconst live-sheep 958)
(defconst castle-arrow-chemistry 747)
(defconst castle-arrow 746)
(defconst watch-tower-arrow 786)
(defconst tc-arrow 54)
(defconst imperial-age-town-size 30)
(defconst castle-age-town-size 20)
(defconst feudal-age-town-size 14)
(defconst dark-age-town-size 12)
(defconst min-detection-units 2)
(defconst max-basic-units 10)
(defconst min-army 20)
(defconst max-army 100)
(defconst max-town-centers 5)
(defconst max-trebuchets 10)
(defconst max-rams 10)
(defconst max-imperial-military-buildings 5)
(defconst max-castle-military-buildings 3)
(defconst max-feudal-military-buildings 2)
(defconst civilian-trade-percentage 23)
(defconst civilian-percentage 65)
(defconst max-stone 1500)
(defconst high-stone 600)
(defconst low-stone 200)
(defconst max-gold 1500)
(defconst high-gold 600)
(defconst low-gold 200)
(defconst max-food 1500)
(defconst high-food 600)
(defconst low-food 200)
(defconst max-wood 1500)
(defconst high-wood 600)
(defconst low-wood 200)
(defconst min-gold-percentage 10)
(defconst min-food-percentage 30)
(defconst min-wood-percentage 20)
(defrule
    (true)
=>
    (set-goal attacking 0)
)
(defrule
    (true)
=>
    (set-goal wood-modifier-percentage 0)
    (set-goal food-modifier-percentage 0)
    (set-goal gold-modifier-percentage 0)
    (set-goal stone-modifier-percentage 0)
    (set-strategic-number sn-percent-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
    (set-strategic-number sn-total-number-explorers 1)
    (set-strategic-number sn-number-explore-groups 1)
    (set-strategic-number sn-initial-exploration-required 0)
    (disable-self)
)
(defrule
    (soldier-count == 0)
    (or
      (game-time < 600)
      (nand
        (resource-found gold)
        (resource-found stone)
      )
    )
    (strategic-number sn-cap-civilian-explorers == 0)
=>
    (set-strategic-number sn-percent-civilian-explorers 100)
    (set-strategic-number sn-cap-civilian-explorers 1)
)
(defrule
    (or
      (soldier-count >= 1)
      (and
        (game-time >= 600)
        (and
          (resource-found gold)
          (resource-found stone)
        )
      )
    )
    (strategic-number sn-cap-civilian-explorers == 1)
=>
    (set-strategic-number sn-percent-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
)
(defrule
    (game-time < 600)
=>
    (up-full-reset-search)
    (up-find-local c: scout-cavalry-line c: 1)
    (up-find-local c: eagle-warrior-line c: 1)
    (up-find-local c: camel-line c: 1)
    (up-remove-objects search-local object-data-action == actionid-move)
    (up-modify-sn sn-focus-player-number c:= 0)
    (up-set-target-object search-local c: 0)
    (up-get-point position-object 41)
    (up-set-target-point 41)
    (up-filter-distance c: -1 c: 20)
    (up-find-remote c: livestock-class c: 1)
    (up-target-objects 0 action-move -1 -1)
)
(defrule
    (true)
=>
    (set-goal 6 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 6)
    (up-get-precise-time 0 9)
    (up-modify-goal 6 g:+ 9)
    (up-modify-goal 6 c:mod 2)
    (up-modify-goal 6 c:+ 2)
    (up-modify-goal 6 c:mod 2)
    (up-modify-goal 6 c:+ 1)
    (disable-self)
)
(defrule
    (goal 6 1)
=>
    (set-stance every-enemy neutral)
    (disable-self)
)
(defrule
    (goal 6 1)
=>
    (generate-random-number 8)
    (set-goal 7 0)
    (set-goal 8 0)
    (set-goal 9 0)
)
(defrule
    (player-in-game 1)
    (stance-toward 1 ally)
    (goal 6 1)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 1)
    (stance-toward 1 neutral)
    (goal 6 1)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 1)
    (stance-toward 1 enemy)
    (goal 6 1)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 2)
    (stance-toward 2 ally)
    (goal 6 1)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 2)
    (stance-toward 2 neutral)
    (goal 6 1)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 2)
    (stance-toward 2 enemy)
    (goal 6 1)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 3)
    (stance-toward 3 ally)
    (goal 6 1)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 3)
    (stance-toward 3 neutral)
    (goal 6 1)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 3)
    (stance-toward 3 enemy)
    (goal 6 1)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 4)
    (stance-toward 4 ally)
    (goal 6 1)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 4)
    (stance-toward 4 neutral)
    (goal 6 1)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 4)
    (stance-toward 4 enemy)
    (goal 6 1)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 5)
    (stance-toward 5 ally)
    (goal 6 1)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 5)
    (stance-toward 5 neutral)
    (goal 6 1)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 5)
    (stance-toward 5 enemy)
    (goal 6 1)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 6)
    (stance-toward 6 ally)
    (goal 6 1)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 6)
    (stance-toward 6 neutral)
    (goal 6 1)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 6)
    (stance-toward 6 enemy)
    (goal 6 1)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 7)
    (stance-toward 7 ally)
    (goal 6 1)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 7)
    (stance-toward 7 neutral)
    (goal 6 1)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 7)
    (stance-toward 7 enemy)
    (goal 6 1)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 8)
    (stance-toward 8 ally)
    (goal 6 1)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 8)
    (stance-toward 8 neutral)
    (goal 6 1)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 8)
    (stance-toward 8 enemy)
    (goal 6 1)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (stance-toward my-player-number ally)
    (goal 6 1)
=>
    (up-modify-goal 7 c:- 1)
)
(defrule
    (stance-toward my-player-number neutral)
    (goal 6 1)
=>
    (up-modify-goal 8 c:- 1)
)
(defrule
    (stance-toward my-player-number enemy)
    (goal 6 1)
=>
    (up-modify-goal 9 c:- 1)
)
(defrule
    (random-number == 1)
    (goal 9 0)
    (stance-toward 1 neutral)
    (not
      (players-stance 1 ally)
    )
    (player-in-game 1)
    (goal 6 1)
=>
    (set-stance 1 enemy)
    (up-jump-rule 55)
)
(defrule
    (random-number == 2)
    (goal 9 0)
    (stance-toward 2 neutral)
    (not
      (players-stance 2 ally)
    )
    (player-in-game 2)
    (goal 6 1)
=>
    (set-stance 2 enemy)
    (up-jump-rule 54)
)
(defrule
    (random-number == 3)
    (goal 9 0)
    (stance-toward 3 neutral)
    (not
      (players-stance 3 ally)
    )
    (player-in-game 3)
    (goal 6 1)
=>
    (set-stance 3 enemy)
    (up-jump-rule 53)
)
(defrule
    (random-number == 4)
    (goal 9 0)
    (stance-toward 4 neutral)
    (not
      (players-stance 4 ally)
    )
    (player-in-game 4)
    (goal 6 1)
=>
    (set-stance 4 enemy)
    (up-jump-rule 52)
)
(defrule
    (random-number == 5)
    (goal 9 0)
    (stance-toward 5 neutral)
    (not
      (players-stance 5 ally)
    )
    (player-in-game 5)
    (goal 6 1)
=>
    (set-stance 5 enemy)
    (up-jump-rule 51)
)
(defrule
    (random-number == 6)
    (goal 9 0)
    (stance-toward 6 neutral)
    (not
      (players-stance 6 ally)
    )
    (player-in-game 6)
    (goal 6 1)
=>
    (set-stance 6 enemy)
    (up-jump-rule 50)
)
(defrule
    (random-number == 7)
    (goal 9 0)
    (stance-toward 7 neutral)
    (not
      (players-stance 7 ally)
    )
    (player-in-game 7)
    (goal 6 1)
=>
    (set-stance 7 enemy)
    (up-jump-rule 49)
)
(defrule
    (random-number == 8)
    (goal 9 0)
    (stance-toward 8 neutral)
    (not
      (players-stance 8 ally)
    )
    (player-in-game 8)
    (goal 6 1)
=>
    (set-stance 8 enemy)
    (up-jump-rule 48)
)
(defrule
    (random-number == 1)
    (goal 9 0)
    (stance-toward 1 neutral)
    (players-stance 1 ally)
    (player-in-game 1)
    (goal 6 1)
=>
    (set-stance 1 enemy)
    (up-jump-rule 47)
)
(defrule
    (random-number == 2)
    (goal 9 0)
    (stance-toward 2 neutral)
    (players-stance 2 ally)
    (player-in-game 2)
    (goal 6 1)
=>
    (set-stance 2 enemy)
    (up-jump-rule 46)
)
(defrule
    (random-number == 3)
    (goal 9 0)
    (stance-toward 3 neutral)
    (players-stance 3 ally)
    (player-in-game 3)
    (goal 6 1)
=>
    (set-stance 3 enemy)
    (up-jump-rule 45)
)
(defrule
    (random-number == 4)
    (goal 9 0)
    (stance-toward 4 neutral)
    (players-stance 4 ally)
    (player-in-game 4)
    (goal 6 1)
=>
    (set-stance 4 enemy)
    (up-jump-rule 44)
)
(defrule
    (random-number == 5)
    (goal 9 0)
    (stance-toward 5 neutral)
    (players-stance 5 ally)
    (player-in-game 5)
    (goal 6 1)
=>
    (set-stance 5 enemy)
    (up-jump-rule 43)
)
(defrule
    (random-number == 6)
    (goal 9 0)
    (stance-toward 6 neutral)
    (players-stance 6 ally)
    (player-in-game 6)
    (goal 6 1)
=>
    (set-stance 6 enemy)
    (up-jump-rule 42)
)
(defrule
    (random-number == 7)
    (goal 9 0)
    (stance-toward 7 neutral)
    (players-stance 7 ally)
    (player-in-game 7)
    (goal 6 1)
=>
    (set-stance 7 enemy)
    (up-jump-rule 41)
)
(defrule
    (random-number == 8)
    (goal 9 0)
    (stance-toward 8 neutral)
    (players-stance 8 ally)
    (player-in-game 8)
    (goal 6 1)
=>
    (set-stance 8 enemy)
    (up-jump-rule 40)
)
(defrule
    (random-number == 1)
    (goal 9 0)
    (goal 8 0)
    (player-in-game 1)
    (goal 6 1)
=>
    (set-stance 1 enemy)
    (up-jump-rule 39)
)
(defrule
    (random-number == 2)
    (goal 9 0)
    (goal 8 0)
    (player-in-game 2)
    (goal 6 1)
=>
    (set-stance 2 enemy)
    (up-jump-rule 38)
)
(defrule
    (random-number == 3)
    (goal 9 0)
    (goal 8 0)
    (player-in-game 3)
    (goal 6 1)
=>
    (set-stance 3 enemy)
    (up-jump-rule 37)
)
(defrule
    (random-number == 4)
    (goal 9 0)
    (goal 8 0)
    (player-in-game 4)
    (goal 6 1)
=>
    (set-stance 4 enemy)
    (up-jump-rule 36)
)
(defrule
    (random-number == 5)
    (goal 9 0)
    (goal 8 0)
    (player-in-game 5)
    (goal 6 1)
=>
    (set-stance 5 enemy)
    (up-jump-rule 35)
)
(defrule
    (random-number == 6)
    (goal 9 0)
    (goal 8 0)
    (player-in-game 6)
    (goal 6 1)
=>
    (set-stance 6 enemy)
    (up-jump-rule 34)
)
(defrule
    (random-number == 7)
    (goal 9 0)
    (goal 8 0)
    (player-in-game 7)
    (goal 6 1)
=>
    (set-stance 7 enemy)
    (up-jump-rule 33)
)
(defrule
    (random-number == 8)
    (goal 9 0)
    (goal 8 0)
    (player-in-game 8)
    (goal 6 1)
=>
    (set-stance 8 enemy)
    (up-jump-rule 32)
)
(defrule
    (random-number == 1)
    (not
      (goal 9 0)
    )
    (stance-toward 1 neutral)
    (not
      (players-stance 1 enemy)
    )
    (player-in-game 1)
    (goal 6 1)
=>
    (set-stance 1 ally)
    (up-jump-rule 31)
)
(defrule
    (random-number == 2)
    (not
      (goal 9 0)
    )
    (stance-toward 2 neutral)
    (not
      (players-stance 2 enemy)
    )
    (player-in-game 2)
    (goal 6 1)
=>
    (set-stance 2 ally)
    (up-jump-rule 30)
)
(defrule
    (random-number == 3)
    (not
      (goal 9 0)
    )
    (stance-toward 3 neutral)
    (not
      (players-stance 3 enemy)
    )
    (player-in-game 3)
    (goal 6 1)
=>
    (set-stance 3 ally)
    (up-jump-rule 29)
)
(defrule
    (random-number == 4)
    (not
      (goal 9 0)
    )
    (stance-toward 4 neutral)
    (not
      (players-stance 4 enemy)
    )
    (player-in-game 4)
    (goal 6 1)
=>
    (set-stance 4 ally)
    (up-jump-rule 28)
)
(defrule
    (random-number == 5)
    (not
      (goal 9 0)
    )
    (stance-toward 5 neutral)
    (not
      (players-stance 5 enemy)
    )
    (player-in-game 5)
    (goal 6 1)
=>
    (set-stance 5 ally)
    (up-jump-rule 27)
)
(defrule
    (random-number == 6)
    (not
      (goal 9 0)
    )
    (stance-toward 6 neutral)
    (not
      (players-stance 6 enemy)
    )
    (player-in-game 6)
    (goal 6 1)
=>
    (set-stance 6 ally)
    (up-jump-rule 26)
)
(defrule
    (random-number == 7)
    (not
      (goal 9 0)
    )
    (stance-toward 7 neutral)
    (not
      (players-stance 7 enemy)
    )
    (player-in-game 7)
    (goal 6 1)
=>
    (set-stance 7 ally)
    (up-jump-rule 25)
)
(defrule
    (random-number == 8)
    (not
      (goal 9 0)
    )
    (stance-toward 8 neutral)
    (not
      (players-stance 8 enemy)
    )
    (player-in-game 8)
    (goal 6 1)
=>
    (set-stance 8 ally)
    (up-jump-rule 24)
)
(defrule
    (random-number == 1)
    (up-compare-goal 9 >= 2)
    (stance-toward 1 enemy)
    (players-stance 1 enemy)
    (player-in-game 1)
    (goal 6 1)
=>
    (set-stance 1 ally)
    (disable-self)
    (up-jump-rule 23)
)
(defrule
    (random-number == 2)
    (up-compare-goal 9 >= 2)
    (stance-toward 2 enemy)
    (players-stance 2 enemy)
    (player-in-game 2)
    (goal 6 1)
=>
    (set-stance 2 ally)
    (disable-self)
    (up-jump-rule 22)
)
(defrule
    (random-number == 3)
    (up-compare-goal 9 >= 2)
    (stance-toward 3 enemy)
    (players-stance 3 enemy)
    (player-in-game 3)
    (goal 6 1)
=>
    (set-stance 3 ally)
    (disable-self)
    (up-jump-rule 21)
)
(defrule
    (random-number == 4)
    (up-compare-goal 9 >= 2)
    (stance-toward 4 enemy)
    (players-stance 4 enemy)
    (player-in-game 4)
    (goal 6 1)
=>
    (set-stance 4 ally)
    (disable-self)
    (up-jump-rule 20)
)
(defrule
    (random-number == 5)
    (up-compare-goal 9 >= 2)
    (stance-toward 5 enemy)
    (players-stance 5 enemy)
    (player-in-game 5)
    (goal 6 1)
=>
    (set-stance 5 ally)
    (disable-self)
    (up-jump-rule 19)
)
(defrule
    (random-number == 6)
    (up-compare-goal 9 >= 2)
    (stance-toward 6 enemy)
    (players-stance 6 enemy)
    (player-in-game 6)
    (goal 6 1)
=>
    (set-stance 6 ally)
    (disable-self)
    (up-jump-rule 18)
)
(defrule
    (random-number == 7)
    (up-compare-goal 9 >= 2)
    (stance-toward 7 enemy)
    (players-stance 7 enemy)
    (player-in-game 7)
    (goal 6 1)
=>
    (set-stance 7 ally)
    (disable-self)
    (up-jump-rule 17)
)
(defrule
    (random-number == 8)
    (up-compare-goal 9 >= 2)
    (stance-toward 8 enemy)
    (players-stance 8 enemy)
    (player-in-game 8)
    (goal 6 1)
=>
    (set-stance 8 ally)
    (disable-self)
    (up-jump-rule 16)
)
(defrule
    (random-number == 1)
    (up-compare-goal 9 >= 2)
    (not
      (stance-toward 1 ally)
    )
    (players-stance 1 ally)
    (player-in-game 1)
    (goal 6 1)
=>
    (set-stance 1 ally)
    (up-jump-rule 15)
)
(defrule
    (random-number == 2)
    (up-compare-goal 9 >= 2)
    (not
      (stance-toward 2 ally)
    )
    (players-stance 2 ally)
    (player-in-game 2)
    (goal 6 1)
=>
    (set-stance 2 ally)
    (up-jump-rule 14)
)
(defrule
    (random-number == 3)
    (up-compare-goal 9 >= 2)
    (not
      (stance-toward 3 ally)
    )
    (players-stance 3 ally)
    (player-in-game 3)
    (goal 6 1)
=>
    (set-stance 3 ally)
    (up-jump-rule 13)
)
(defrule
    (random-number == 4)
    (up-compare-goal 9 >= 2)
    (not
      (stance-toward 4 ally)
    )
    (players-stance 4 ally)
    (player-in-game 4)
    (goal 6 1)
=>
    (set-stance 4 ally)
    (up-jump-rule 12)
)
(defrule
    (random-number == 5)
    (up-compare-goal 9 >= 2)
    (not
      (stance-toward 5 ally)
    )
    (players-stance 5 ally)
    (player-in-game 5)
    (goal 6 1)
=>
    (set-stance 5 ally)
    (up-jump-rule 11)
)
(defrule
    (random-number == 6)
    (up-compare-goal 9 >= 2)
    (not
      (stance-toward 6 ally)
    )
    (players-stance 6 ally)
    (player-in-game 6)
    (goal 6 1)
=>
    (set-stance 6 ally)
    (up-jump-rule 10)
)
(defrule
    (random-number == 7)
    (up-compare-goal 9 >= 2)
    (not
      (stance-toward 7 ally)
    )
    (players-stance 7 ally)
    (player-in-game 7)
    (goal 6 1)
=>
    (set-stance 7 ally)
    (up-jump-rule 9)
)
(defrule
    (random-number == 8)
    (up-compare-goal 9 >= 2)
    (not
      (stance-toward 8 ally)
    )
    (players-stance 8 ally)
    (player-in-game 8)
    (goal 6 1)
=>
    (set-stance 8 ally)
    (up-jump-rule 8)
)
(defrule
    (random-number == 1)
    (stance-toward 1 neutral)
    (players-stance 1 enemy)
    (player-in-game 1)
    (goal 6 1)
=>
    (set-stance 1 enemy)
    (up-jump-rule 7)
)
(defrule
    (random-number == 2)
    (stance-toward 2 neutral)
    (players-stance 2 enemy)
    (player-in-game 2)
    (goal 6 1)
=>
    (set-stance 2 enemy)
    (up-jump-rule 6)
)
(defrule
    (random-number == 3)
    (stance-toward 3 neutral)
    (players-stance 3 enemy)
    (player-in-game 3)
    (goal 6 1)
=>
    (set-stance 3 enemy)
    (up-jump-rule 5)
)
(defrule
    (random-number == 4)
    (stance-toward 4 neutral)
    (players-stance 4 enemy)
    (player-in-game 4)
    (goal 6 1)
=>
    (set-stance 4 enemy)
    (up-jump-rule 4)
)
(defrule
    (random-number == 5)
    (stance-toward 5 neutral)
    (players-stance 5 enemy)
    (player-in-game 5)
    (goal 6 1)
=>
    (set-stance 5 enemy)
    (up-jump-rule 3)
)
(defrule
    (random-number == 6)
    (stance-toward 6 neutral)
    (players-stance 6 enemy)
    (player-in-game 6)
    (goal 6 1)
=>
    (set-stance 6 enemy)
    (up-jump-rule 2)
)
(defrule
    (random-number == 7)
    (stance-toward 7 neutral)
    (players-stance 7 enemy)
    (player-in-game 7)
    (goal 6 1)
=>
    (set-stance 7 enemy)
    (up-jump-rule 1)
)
(defrule
    (random-number == 8)
    (stance-toward 8 neutral)
    (players-stance 8 enemy)
    (player-in-game 8)
    (goal 6 1)
=>
    (set-stance 8 enemy)
)
(defrule
    (game-time >= 1200)
    (population < 10)
    (goal 6 1)
=>
    (set-stance every-enemy ally)
    (set-stance every-neutral ally)
    (resign)
)
(defrule
    (players-stance 1 ally)
    (not
      (stance-toward 1 ally)
    )
    (not
      (player-in-game 1)
    )
    (goal 6 1)
=>
    (set-stance 1 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 2 ally)
    (not
      (stance-toward 2 ally)
    )
    (not
      (player-in-game 2)
    )
    (goal 6 1)
=>
    (set-stance 2 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 3 ally)
    (not
      (stance-toward 3 ally)
    )
    (not
      (player-in-game 3)
    )
    (goal 6 1)
=>
    (set-stance 3 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 4 ally)
    (not
      (stance-toward 4 ally)
    )
    (not
      (player-in-game 4)
    )
    (goal 6 1)
=>
    (set-stance 4 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 5 ally)
    (not
      (stance-toward 5 ally)
    )
    (not
      (player-in-game 5)
    )
    (goal 6 1)
=>
    (set-stance 5 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 6 ally)
    (not
      (stance-toward 6 ally)
    )
    (not
      (player-in-game 6)
    )
    (goal 6 1)
=>
    (set-stance 6 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 7 ally)
    (not
      (stance-toward 7 ally)
    )
    (not
      (player-in-game 7)
    )
    (goal 6 1)
=>
    (set-stance 7 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 8 ally)
    (not
      (stance-toward 8 ally)
    )
    (not
      (player-in-game 8)
    )
    (goal 6 1)
=>
    (set-stance 8 ally)
    (up-reset-unit c: -1)
)
(defrule
    (goal 6 1)
=>
    (up-get-threat-data 9 8 -1 -1)
)
(defrule
    (goal 8 1)
    (up-compare-goal 9 c:< 1000)
    (not
      (stance-toward 1 enemy)
    )
    (goal 6 1)
=>
    (set-stance 1 enemy)
)
(defrule
    (goal 8 2)
    (up-compare-goal 9 c:< 1000)
    (not
      (stance-toward 2 enemy)
    )
    (goal 6 1)
=>
    (set-stance 2 enemy)
)
(defrule
    (goal 8 3)
    (up-compare-goal 9 c:< 1000)
    (not
      (stance-toward 3 enemy)
    )
    (goal 6 1)
=>
    (set-stance 3 enemy)
)
(defrule
    (goal 8 4)
    (up-compare-goal 9 c:< 1000)
    (not
      (stance-toward 4 enemy)
    )
    (goal 6 1)
=>
    (set-stance 4 enemy)
)
(defrule
    (goal 8 5)
    (up-compare-goal 9 c:< 1000)
    (not
      (stance-toward 5 enemy)
    )
    (goal 6 1)
=>
    (set-stance 5 enemy)
)
(defrule
    (goal 8 6)
    (up-compare-goal 9 c:< 1000)
    (not
      (stance-toward 6 enemy)
    )
    (goal 6 1)
=>
    (set-stance 6 enemy)
)
(defrule
    (goal 8 7)
    (up-compare-goal 9 c:< 1000)
    (not
      (stance-toward 7 enemy)
    )
    (goal 6 1)
=>
    (set-stance 7 enemy)
)
(defrule
    (goal 8 8)
    (up-compare-goal 9 c:< 1000)
    (not
      (stance-toward 8 enemy)
    )
    (goal 6 1)
=>
    (set-stance 8 enemy)
)
(defrule
    (goal 6 1)
=>
    (set-stance my-player-number ally)
)
(defrule
    (goal 6 2)
=>
    (set-stance every-enemy neutral)
    (disable-self)
)
(defrule
    (goal 6 2)
=>
    (generate-random-number 8)
    (set-goal 8 0)
    (set-goal 9 0)
    (set-goal 7 0)
)
(defrule
    (player-in-game 1)
    (stance-toward 1 ally)
    (goal 6 2)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 1)
    (stance-toward 1 neutral)
    (goal 6 2)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 1)
    (stance-toward 1 enemy)
    (goal 6 2)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 2)
    (stance-toward 2 ally)
    (goal 6 2)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 2)
    (stance-toward 2 neutral)
    (goal 6 2)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 2)
    (stance-toward 2 enemy)
    (goal 6 2)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 3)
    (stance-toward 3 ally)
    (goal 6 2)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 3)
    (stance-toward 3 neutral)
    (goal 6 2)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 3)
    (stance-toward 3 enemy)
    (goal 6 2)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 4)
    (stance-toward 4 ally)
    (goal 6 2)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 4)
    (stance-toward 4 neutral)
    (goal 6 2)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 4)
    (stance-toward 4 enemy)
    (goal 6 2)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 5)
    (stance-toward 5 ally)
    (goal 6 2)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 5)
    (stance-toward 5 neutral)
    (goal 6 2)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 5)
    (stance-toward 5 enemy)
    (goal 6 2)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 6)
    (stance-toward 6 ally)
    (goal 6 2)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 6)
    (stance-toward 6 neutral)
    (goal 6 2)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 6)
    (stance-toward 6 enemy)
    (goal 6 2)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 7)
    (stance-toward 7 ally)
    (goal 6 2)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 7)
    (stance-toward 7 neutral)
    (goal 6 2)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 7)
    (stance-toward 7 enemy)
    (goal 6 2)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (player-in-game 8)
    (stance-toward 8 ally)
    (goal 6 2)
=>
    (up-modify-goal 8 c:+ 1)
)
(defrule
    (player-in-game 8)
    (stance-toward 8 neutral)
    (goal 6 2)
=>
    (up-modify-goal 9 c:+ 1)
)
(defrule
    (player-in-game 8)
    (stance-toward 8 enemy)
    (goal 6 2)
=>
    (up-modify-goal 7 c:+ 1)
)
(defrule
    (stance-toward my-player-number ally)
    (goal 6 2)
=>
    (up-modify-goal 8 c:- 1)
)
(defrule
    (stance-toward my-player-number neutral)
    (goal 6 2)
=>
    (up-modify-goal 9 c:- 1)
)
(defrule
    (stance-toward my-player-number enemy)
    (goal 6 2)
=>
    (up-modify-goal 7 c:- 1)
)
(defrule
    (random-number == 1)
    (goal 7 0)
    (stance-toward 1 neutral)
    (not
      (players-stance 1 ally)
    )
    (player-in-game 1)
    (goal 6 2)
=>
    (set-stance 1 enemy)
    (up-jump-rule 55)
)
(defrule
    (random-number == 2)
    (goal 7 0)
    (stance-toward 2 neutral)
    (not
      (players-stance 2 ally)
    )
    (player-in-game 2)
    (goal 6 2)
=>
    (set-stance 2 enemy)
    (up-jump-rule 54)
)
(defrule
    (random-number == 3)
    (goal 7 0)
    (stance-toward 3 neutral)
    (not
      (players-stance 3 ally)
    )
    (player-in-game 3)
    (goal 6 2)
=>
    (set-stance 3 enemy)
    (up-jump-rule 53)
)
(defrule
    (random-number == 4)
    (goal 7 0)
    (stance-toward 4 neutral)
    (not
      (players-stance 4 ally)
    )
    (player-in-game 4)
    (goal 6 2)
=>
    (set-stance 4 enemy)
    (up-jump-rule 52)
)
(defrule
    (random-number == 5)
    (goal 7 0)
    (stance-toward 5 neutral)
    (not
      (players-stance 5 ally)
    )
    (player-in-game 5)
    (goal 6 2)
=>
    (set-stance 5 enemy)
    (up-jump-rule 51)
)
(defrule
    (random-number == 6)
    (goal 7 0)
    (stance-toward 6 neutral)
    (not
      (players-stance 6 ally)
    )
    (player-in-game 6)
    (goal 6 2)
=>
    (set-stance 6 enemy)
    (up-jump-rule 50)
)
(defrule
    (random-number == 7)
    (goal 7 0)
    (stance-toward 7 neutral)
    (not
      (players-stance 7 ally)
    )
    (player-in-game 7)
    (goal 6 2)
=>
    (set-stance 7 enemy)
    (up-jump-rule 49)
)
(defrule
    (random-number == 8)
    (goal 7 0)
    (stance-toward 8 neutral)
    (not
      (players-stance 8 ally)
    )
    (player-in-game 8)
    (goal 6 2)
=>
    (set-stance 8 enemy)
    (up-jump-rule 48)
)
(defrule
    (random-number == 1)
    (goal 7 0)
    (stance-toward 1 neutral)
    (players-stance 1 ally)
    (player-in-game 1)
    (goal 6 2)
=>
    (set-stance 1 enemy)
    (up-jump-rule 47)
)
(defrule
    (random-number == 2)
    (goal 7 0)
    (stance-toward 2 neutral)
    (players-stance 2 ally)
    (player-in-game 2)
    (goal 6 2)
=>
    (set-stance 2 enemy)
    (up-jump-rule 46)
)
(defrule
    (random-number == 3)
    (goal 7 0)
    (stance-toward 3 neutral)
    (players-stance 3 ally)
    (player-in-game 3)
    (goal 6 2)
=>
    (set-stance 3 enemy)
    (up-jump-rule 45)
)
(defrule
    (random-number == 4)
    (goal 7 0)
    (stance-toward 4 neutral)
    (players-stance 4 ally)
    (player-in-game 4)
    (goal 6 2)
=>
    (set-stance 4 enemy)
    (up-jump-rule 44)
)
(defrule
    (random-number == 5)
    (goal 7 0)
    (stance-toward 5 neutral)
    (players-stance 5 ally)
    (player-in-game 5)
    (goal 6 2)
=>
    (set-stance 5 enemy)
    (up-jump-rule 43)
)
(defrule
    (random-number == 6)
    (goal 7 0)
    (stance-toward 6 neutral)
    (players-stance 6 ally)
    (player-in-game 6)
    (goal 6 2)
=>
    (set-stance 6 enemy)
    (up-jump-rule 42)
)
(defrule
    (random-number == 7)
    (goal 7 0)
    (stance-toward 7 neutral)
    (players-stance 7 ally)
    (player-in-game 7)
    (goal 6 2)
=>
    (set-stance 7 enemy)
    (up-jump-rule 41)
)
(defrule
    (random-number == 8)
    (goal 7 0)
    (stance-toward 8 neutral)
    (players-stance 8 ally)
    (player-in-game 8)
    (goal 6 2)
=>
    (set-stance 8 enemy)
    (up-jump-rule 40)
)
(defrule
    (random-number == 1)
    (goal 7 0)
    (goal 9 0)
    (up-compare-goal 8 >= 2)
    (player-in-game 1)
    (goal 6 2)
=>
    (set-stance 1 enemy)
    (up-jump-rule 39)
)
(defrule
    (random-number == 2)
    (goal 7 0)
    (goal 9 0)
    (up-compare-goal 8 >= 2)
    (player-in-game 2)
    (goal 6 2)
=>
    (set-stance 2 enemy)
    (up-jump-rule 38)
)
(defrule
    (random-number == 3)
    (goal 7 0)
    (goal 9 0)
    (up-compare-goal 8 >= 2)
    (player-in-game 3)
    (goal 6 2)
=>
    (set-stance 3 enemy)
    (up-jump-rule 37)
)
(defrule
    (random-number == 4)
    (goal 7 0)
    (goal 9 0)
    (up-compare-goal 8 >= 2)
    (player-in-game 4)
    (goal 6 2)
=>
    (set-stance 4 enemy)
    (up-jump-rule 36)
)
(defrule
    (random-number == 5)
    (goal 7 0)
    (goal 9 0)
    (up-compare-goal 8 >= 2)
    (player-in-game 5)
    (goal 6 2)
=>
    (set-stance 5 enemy)
    (up-jump-rule 35)
)
(defrule
    (random-number == 6)
    (goal 7 0)
    (goal 9 0)
    (up-compare-goal 8 >= 2)
    (player-in-game 6)
    (goal 6 2)
=>
    (set-stance 6 enemy)
    (up-jump-rule 34)
)
(defrule
    (random-number == 7)
    (goal 7 0)
    (goal 9 0)
    (up-compare-goal 8 >= 2)
    (player-in-game 7)
    (goal 6 2)
=>
    (set-stance 7 enemy)
    (up-jump-rule 33)
)
(defrule
    (random-number == 8)
    (goal 7 0)
    (goal 9 0)
    (up-compare-goal 8 >= 2)
    (player-in-game 8)
    (goal 6 2)
=>
    (set-stance 8 enemy)
    (up-jump-rule 32)
)
(defrule
    (random-number == 1)
    (not
      (goal 7 0)
    )
    (stance-toward 1 neutral)
    (not
      (players-stance 1 enemy)
    )
    (player-in-game 1)
    (goal 6 2)
=>
    (set-stance 1 ally)
    (up-jump-rule 31)
)
(defrule
    (random-number == 2)
    (not
      (goal 7 0)
    )
    (stance-toward 2 neutral)
    (not
      (players-stance 2 enemy)
    )
    (player-in-game 2)
    (goal 6 2)
=>
    (set-stance 2 ally)
    (up-jump-rule 30)
)
(defrule
    (random-number == 3)
    (not
      (goal 7 0)
    )
    (stance-toward 3 neutral)
    (not
      (players-stance 3 enemy)
    )
    (player-in-game 3)
    (goal 6 2)
=>
    (set-stance 3 ally)
    (up-jump-rule 29)
)
(defrule
    (random-number == 4)
    (not
      (goal 7 0)
    )
    (stance-toward 4 neutral)
    (not
      (players-stance 4 enemy)
    )
    (player-in-game 4)
    (goal 6 2)
=>
    (set-stance 4 ally)
    (up-jump-rule 28)
)
(defrule
    (random-number == 5)
    (not
      (goal 7 0)
    )
    (stance-toward 5 neutral)
    (not
      (players-stance 5 enemy)
    )
    (player-in-game 5)
    (goal 6 2)
=>
    (set-stance 5 ally)
    (up-jump-rule 27)
)
(defrule
    (random-number == 6)
    (not
      (goal 7 0)
    )
    (stance-toward 6 neutral)
    (not
      (players-stance 6 enemy)
    )
    (player-in-game 6)
    (goal 6 2)
=>
    (set-stance 6 ally)
    (up-jump-rule 26)
)
(defrule
    (random-number == 7)
    (not
      (goal 7 0)
    )
    (stance-toward 7 neutral)
    (not
      (players-stance 7 enemy)
    )
    (player-in-game 7)
    (goal 6 2)
=>
    (set-stance 7 ally)
    (up-jump-rule 25)
)
(defrule
    (random-number == 8)
    (not
      (goal 7 0)
    )
    (stance-toward 8 neutral)
    (not
      (players-stance 8 enemy)
    )
    (player-in-game 8)
    (goal 6 2)
=>
    (set-stance 8 ally)
    (up-jump-rule 24)
)
(defrule
    (random-number == 1)
    (up-compare-goal 7 >= 2)
    (stance-toward 1 enemy)
    (players-stance 1 enemy)
    (player-in-game 1)
    (goal 6 2)
=>
    (set-stance 1 ally)
    (disable-self)
    (up-jump-rule 23)
)
(defrule
    (random-number == 2)
    (up-compare-goal 7 >= 2)
    (stance-toward 2 enemy)
    (players-stance 2 enemy)
    (player-in-game 2)
    (goal 6 2)
=>
    (set-stance 2 ally)
    (disable-self)
    (up-jump-rule 22)
)
(defrule
    (random-number == 3)
    (up-compare-goal 7 >= 2)
    (stance-toward 3 enemy)
    (players-stance 3 enemy)
    (player-in-game 3)
    (goal 6 2)
=>
    (set-stance 3 ally)
    (disable-self)
    (up-jump-rule 21)
)
(defrule
    (random-number == 4)
    (up-compare-goal 7 >= 2)
    (stance-toward 4 enemy)
    (players-stance 4 enemy)
    (player-in-game 4)
    (goal 6 2)
=>
    (set-stance 4 ally)
    (disable-self)
    (up-jump-rule 20)
)
(defrule
    (random-number == 5)
    (up-compare-goal 7 >= 2)
    (stance-toward 5 enemy)
    (players-stance 5 enemy)
    (player-in-game 5)
    (goal 6 2)
=>
    (set-stance 5 ally)
    (disable-self)
    (up-jump-rule 19)
)
(defrule
    (random-number == 6)
    (up-compare-goal 7 >= 2)
    (stance-toward 6 enemy)
    (players-stance 6 enemy)
    (player-in-game 6)
    (goal 6 2)
=>
    (set-stance 6 ally)
    (disable-self)
    (up-jump-rule 18)
)
(defrule
    (random-number == 7)
    (up-compare-goal 7 >= 2)
    (stance-toward 7 enemy)
    (players-stance 7 enemy)
    (player-in-game 7)
    (goal 6 2)
=>
    (set-stance 7 ally)
    (disable-self)
    (up-jump-rule 17)
)
(defrule
    (random-number == 8)
    (up-compare-goal 7 >= 2)
    (stance-toward 8 enemy)
    (players-stance 8 enemy)
    (player-in-game 8)
    (goal 6 2)
=>
    (set-stance 8 ally)
    (disable-self)
    (up-jump-rule 16)
)
(defrule
    (random-number == 1)
    (up-compare-goal 7 >= 2)
    (not
      (stance-toward 1 ally)
    )
    (players-stance 1 ally)
    (player-in-game 1)
    (goal 6 2)
=>
    (set-stance 1 ally)
    (up-jump-rule 15)
)
(defrule
    (random-number == 2)
    (up-compare-goal 7 >= 2)
    (not
      (stance-toward 2 ally)
    )
    (players-stance 2 ally)
    (player-in-game 2)
    (goal 6 2)
=>
    (set-stance 2 ally)
    (up-jump-rule 14)
)
(defrule
    (random-number == 3)
    (up-compare-goal 7 >= 2)
    (not
      (stance-toward 3 ally)
    )
    (players-stance 3 ally)
    (player-in-game 3)
    (goal 6 2)
=>
    (set-stance 3 ally)
    (up-jump-rule 13)
)
(defrule
    (random-number == 4)
    (up-compare-goal 7 >= 2)
    (not
      (stance-toward 4 ally)
    )
    (players-stance 4 ally)
    (player-in-game 4)
    (goal 6 2)
=>
    (set-stance 4 ally)
    (up-jump-rule 12)
)
(defrule
    (random-number == 5)
    (up-compare-goal 7 >= 2)
    (not
      (stance-toward 5 ally)
    )
    (players-stance 5 ally)
    (player-in-game 5)
    (goal 6 2)
=>
    (set-stance 5 ally)
    (up-jump-rule 11)
)
(defrule
    (random-number == 6)
    (up-compare-goal 7 >= 2)
    (not
      (stance-toward 6 ally)
    )
    (players-stance 6 ally)
    (player-in-game 6)
    (goal 6 2)
=>
    (set-stance 6 ally)
    (up-jump-rule 10)
)
(defrule
    (random-number == 7)
    (up-compare-goal 7 >= 2)
    (not
      (stance-toward 7 ally)
    )
    (players-stance 7 ally)
    (player-in-game 7)
    (goal 6 2)
=>
    (set-stance 7 ally)
    (up-jump-rule 9)
)
(defrule
    (random-number == 8)
    (up-compare-goal 7 >= 2)
    (not
      (stance-toward 8 ally)
    )
    (players-stance 8 ally)
    (player-in-game 8)
    (goal 6 2)
=>
    (set-stance 8 ally)
    (up-jump-rule 8)
)
(defrule
    (random-number == 1)
    (stance-toward 1 neutral)
    (players-stance 1 enemy)
    (player-in-game 1)
    (goal 6 2)
=>
    (set-stance 1 enemy)
    (up-jump-rule 7)
)
(defrule
    (random-number == 2)
    (stance-toward 2 neutral)
    (players-stance 2 enemy)
    (player-in-game 2)
    (goal 6 2)
=>
    (set-stance 2 enemy)
    (up-jump-rule 6)
)
(defrule
    (random-number == 3)
    (stance-toward 3 neutral)
    (players-stance 3 enemy)
    (player-in-game 3)
    (goal 6 2)
=>
    (set-stance 3 enemy)
    (up-jump-rule 5)
)
(defrule
    (random-number == 4)
    (stance-toward 4 neutral)
    (players-stance 4 enemy)
    (player-in-game 4)
    (goal 6 2)
=>
    (set-stance 4 enemy)
    (up-jump-rule 4)
)
(defrule
    (random-number == 5)
    (stance-toward 5 neutral)
    (players-stance 5 enemy)
    (player-in-game 5)
    (goal 6 2)
=>
    (set-stance 5 enemy)
    (up-jump-rule 3)
)
(defrule
    (random-number == 6)
    (stance-toward 6 neutral)
    (players-stance 6 enemy)
    (player-in-game 6)
    (goal 6 2)
=>
    (set-stance 6 enemy)
    (up-jump-rule 2)
)
(defrule
    (random-number == 7)
    (stance-toward 7 neutral)
    (players-stance 7 enemy)
    (player-in-game 7)
    (goal 6 2)
=>
    (set-stance 7 enemy)
    (up-jump-rule 1)
)
(defrule
    (random-number == 8)
    (stance-toward 8 neutral)
    (players-stance 8 enemy)
    (player-in-game 8)
    (goal 6 2)
=>
    (set-stance 8 enemy)
)
(defrule
    (game-time >= 1200)
    (population < 10)
    (goal 6 2)
=>
    (set-stance every-enemy ally)
    (set-stance every-neutral ally)
    (resign)
)
(defrule
    (players-stance 1 ally)
    (not
      (stance-toward 1 ally)
    )
    (not
      (player-in-game 1)
    )
    (goal 6 2)
=>
    (set-stance 1 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 2 ally)
    (not
      (stance-toward 2 ally)
    )
    (not
      (player-in-game 2)
    )
    (goal 6 2)
=>
    (set-stance 2 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 3 ally)
    (not
      (stance-toward 3 ally)
    )
    (not
      (player-in-game 3)
    )
    (goal 6 2)
=>
    (set-stance 3 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 4 ally)
    (not
      (stance-toward 4 ally)
    )
    (not
      (player-in-game 4)
    )
    (goal 6 2)
=>
    (set-stance 4 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 5 ally)
    (not
      (stance-toward 5 ally)
    )
    (not
      (player-in-game 5)
    )
    (goal 6 2)
=>
    (set-stance 5 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 6 ally)
    (not
      (stance-toward 6 ally)
    )
    (not
      (player-in-game 6)
    )
    (goal 6 2)
=>
    (set-stance 6 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 7 ally)
    (not
      (stance-toward 7 ally)
    )
    (not
      (player-in-game 7)
    )
    (goal 6 2)
=>
    (set-stance 7 ally)
    (up-reset-unit c: -1)
)
(defrule
    (players-stance 8 ally)
    (not
      (stance-toward 8 ally)
    )
    (not
      (player-in-game 8)
    )
    (goal 6 2)
=>
    (set-stance 8 ally)
    (up-reset-unit c: -1)
)
(defrule
    (goal 6 2)
=>
    (up-get-threat-data 7 9 -1 -1)
)
(defrule
    (goal 9 1)
    (up-compare-goal 7 c:< 1000)
    (not
      (stance-toward 1 enemy)
    )
    (goal 6 2)
=>
    (set-stance 1 enemy)
)
(defrule
    (goal 9 2)
    (up-compare-goal 7 c:< 1000)
    (not
      (stance-toward 2 enemy)
    )
    (goal 6 2)
=>
    (set-stance 2 enemy)
)
(defrule
    (goal 9 3)
    (up-compare-goal 7 c:< 1000)
    (not
      (stance-toward 3 enemy)
    )
    (goal 6 2)
=>
    (set-stance 3 enemy)
)
(defrule
    (goal 9 4)
    (up-compare-goal 7 c:< 1000)
    (not
      (stance-toward 4 enemy)
    )
    (goal 6 2)
=>
    (set-stance 4 enemy)
)
(defrule
    (goal 9 5)
    (up-compare-goal 7 c:< 1000)
    (not
      (stance-toward 5 enemy)
    )
    (goal 6 2)
=>
    (set-stance 5 enemy)
)
(defrule
    (goal 9 6)
    (up-compare-goal 7 c:< 1000)
    (not
      (stance-toward 6 enemy)
    )
    (goal 6 2)
=>
    (set-stance 6 enemy)
)
(defrule
    (goal 9 7)
    (up-compare-goal 7 c:< 1000)
    (not
      (stance-toward 7 enemy)
    )
    (goal 6 2)
=>
    (set-stance 7 enemy)
)
(defrule
    (goal 9 8)
    (up-compare-goal 7 c:< 1000)
    (not
      (stance-toward 8 enemy)
    )
    (goal 6 2)
=>
    (set-stance 8 enemy)
)
(defrule
    (goal 6 2)
=>
    (set-stance my-player-number ally)
)
(defrule
    (true)
=>
    (up-modify-sn sn-wood-gatherer-percentage g:- wood-modifier-percentage)
    (up-modify-sn sn-food-gatherer-percentage g:- food-modifier-percentage)
    (up-modify-sn sn-gold-gatherer-percentage g:- gold-modifier-percentage)
)
(defrule
    (true)
=>
    (up-change-name "Tango")
    (set-strategic-number sn-wood-gatherer-percentage 20)
    (set-strategic-number sn-food-gatherer-percentage 80)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (current-age == dark-age)
    (game-time < 10)
=>
    (set-goal initial-age dark-age)
    (disable-self)
)
(defrule
    (not
      (current-age == dark-age)
    )
    (current-age == feudal-age)
    (game-time < 10)
=>
    (set-goal initial-age feudal-age)
    (disable-self)
)
(defrule
    (not
      (current-age == dark-age)
    )
    (not
      (current-age == feudal-age)
    )
    (current-age == castle-age)
    (game-time < 10)
=>
    (set-goal initial-age castle-age)
    (disable-self)
)
(defrule
    (not
      (current-age == dark-age)
    )
    (not
      (current-age == feudal-age)
    )
    (not
      (current-age == castle-age)
    )
    (game-time < 10)
=>
    (set-goal initial-age imperial-age)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal desired-villagers 0)
    (set-goal desired-villagers-with-trade 0)
    (set-goal desired-trade 0)
    (up-get-fact population-cap 0 desired-villagers)
    (up-modify-goal desired-villagers c:* civilian-percentage)
    (up-modify-goal desired-villagers c:/ 100)
    (up-modify-goal desired-trade g:= desired-villagers)
    (up-modify-goal desired-trade c:* civilian-trade-percentage)
    (up-modify-goal desired-trade c:/ 100)
    (up-modify-goal desired-villagers-with-trade g:= desired-villagers)
    (up-modify-goal desired-villagers-with-trade g:- desired-trade)
    (disable-self)
)
(defrule
    (false)
=>
    (up-chat-data-to-all "vills: %d" g: desired-villagers)
    (up-chat-data-to-all "trade: %d" g: desired-trade)
    (up-chat-data-to-all "vills with trade: %d" g: desired-villagers-with-trade)
    (disable-self)
)
(defrule
    (true)
=>
    (up-assign-builders c: wonder c: 32)
    (up-assign-builders c: castle c: 8)
    (up-assign-builders c: town-center-foundation c: 4)
    (up-assign-builders c: market c: 2)
    (up-assign-builders c: barracks c: 2)
    (up-assign-builders c: archery-range c: 2)
    (up-assign-builders c: stable c: 2)
    (set-goal research-economy-upgrades 1)
    (set-goal age-up 1)
    (set-goal age-up-now 0)
    (set-goal turtle 0)
    (set-goal militant 0)
    (set-goal use-town-size-attack 1)
    (set-goal boom 1)
    (set-goal threat-time 0)
    (set-goal threat-player 0)
    (set-goal threat-source 0)
    (set-goal threat-target 0)
    (set-goal resign 0)
    (set-goal build-walls 0)
    (set-goal help-allies 1)
    (disable-self)
)
(defrule
    (true)
=>
    (set-strategic-number sn-enable-new-building-system 1)
    (set-strategic-number sn-percent-building-cancellation 20)
    (set-strategic-number sn-cap-civilian-builders 200)
    (set-difficulty-parameter ability-to-maintain-distance 0)
    (set-difficulty-parameter ability-to-dodge-missiles 100)
    (set-strategic-number sn-percent-attack-soldiers 100)
    (set-strategic-number sn-percent-attack-boats 100)
    (set-strategic-number sn-livestock-to-town-center 1)
    (set-strategic-number sn-enable-patrol-attack 1)
    (set-strategic-number sn-attack-intelligence 0)
    (set-strategic-number sn-local-targeting-mode 1)
    (set-strategic-number sn-percent-enemy-sighted-response 100)
    (set-strategic-number sn-task-ungrouped-soldiers 0)
    (set-strategic-number sn-gather-defense-units 1)
    (set-strategic-number sn-defer-dropsite-update 1)
    (set-strategic-number sn-do-not-scale-for-difficulty-level 1)
    (set-strategic-number sn-dropsite-separation-distance 8)
    (set-strategic-number sn-wall-targeting-mode 1)
    (set-strategic-number sn-minimum-water-body-size-for-dock 999)
    (set-strategic-number sn-consecutive-idle-unit-limit 1)
    (set-strategic-number sn-enable-offensive-priority 1)
    (set-strategic-number sn-zero-priority-distance 255)
    (set-strategic-number sn-scale-minimum-attack-group-size 0)
    (set-strategic-number sn-garrison-rams 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-strategic-number sn-maximum-wood-drop-distance -1)
    (set-strategic-number sn-maximum-food-drop-distance 8)
    (set-strategic-number sn-maximum-gold-drop-distance 8)
    (set-strategic-number sn-maximum-stone-drop-distance 8)
    (set-strategic-number sn-maximum-hunt-drop-distance 48)
    (set-strategic-number sn-mill-max-distance 25)
    (set-strategic-number sn-camp-max-distance 25)
    (set-strategic-number sn-dropsite-separation-distance 5)
    (set-strategic-number sn-allow-adjacent-dropsites 1)
    (set-strategic-number sn-percent-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
    (set-strategic-number sn-total-number-explorers 1)
    (set-strategic-number sn-number-explore-groups 1)
    (set-strategic-number sn-initial-exploration-required 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-strategic-number sn-enable-boar-hunting 2)
    (set-strategic-number sn-minimum-number-hunters 3)
    (set-strategic-number sn-minimum-boar-lure-group-size 3)
    (set-strategic-number sn-minimum-boar-hunt-group-size 3)
    (set-strategic-number sn-wall-targeting-mode 1)
    (set-strategic-number sn-maximum-gold-drop-distance 8)
    (set-strategic-number sn-maximum-stone-drop-distance 8)
    (set-strategic-number sn-maximum-food-drop-distance dark-age-town-size)
    (set-strategic-number sn-maximum-hunt-drop-distance 48)
    (set-strategic-number sn-max-retask-gather-amount 0)
    (set-strategic-number sn-retask-gather-amount 0)
    (set-strategic-number sn-camp-max-distance 15)
    (set-strategic-number sn-mill-max-distance 32)
    (set-strategic-number sn-town-center-placement lumber-camp)
    (set-strategic-number sn-random-placement-factor 0)
    (disable-self)
)
(defrule
    (true)
=>
    (set-strategic-number sn-ignore-tower-elevation 1)
    (set-strategic-number sn-zero-priority-distance 450)
    (set-strategic-number sn-special-attack-type2 trebuchet-set)
    (set-strategic-number sn-target-evaluation-attack-attempts 0)
    (set-strategic-number sn-target-evaluation-ally-proximity 0)
    (set-strategic-number sn-target-evaluation-boat 0)
    (set-strategic-number sn-target-evaluation-continent 0)
    (set-strategic-number sn-target-evaluation-damage-capability 0)
    (set-strategic-number sn-target-evaluation-distance -100)
    (set-strategic-number sn-target-evaluation-hitpoints 0)
    (set-strategic-number sn-target-evaluation-in-progress 0)
    (set-strategic-number sn-target-evaluation-kills 0)
    (set-strategic-number sn-target-evaluation-randomness 0)
    (set-strategic-number sn-target-evaluation-range 0)
    (set-strategic-number sn-target-evaluation-rof 0)
    (set-strategic-number sn-target-evaluation-siege-weapon 500)
    (disable-self)
)
(defrule
    (true)
=>
    (set-strategic-number sn-target-evaluation-time-kill-ratio 0)
    (set-strategic-number sn-ttkfactor-scalar 500)
    (disable-self)
)
(defrule
    (cc-players-unit-type-count any-ally villager > 0)
=>
    (set-goal team-game 1)
    (disable-self)
)
(defrule
    (not
      (cc-players-unit-type-count any-ally villager > 0)
    )
=>
    (set-goal team-game 0)
    (disable-self)
)
(defrule
    (goal team-game 0)
    (player-valid 1)
    (player-valid 2)
    (player-valid 3)
=>
    (chat-to-all chat-a7616ae92edcf1e8cd9be23cff264901472d73cf)
    (set-goal free-for-all 1)
    (set-goal turtle 0)
    (disable-self)
)
(defrule
    (nand
      (goal team-game 0)
      (and
        (player-valid 1)
        (and
          (player-valid 2)
          (player-valid 3)
        )
      )
    )
=>
    (set-goal free-for-all 0)
    (disable-self)
)
(defrule
    (or
      (goal free-for-all 1)
      (goal team-game 1)
    )
=>
    (set-goal boom 1)
    (disable-self)
)
(defrule
    (not
      (goal free-for-all 1)
    )
    (not
      (goal team-game 1)
    )
=>
    (set-goal boom 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-threat-data threat-time threat-player threat-source threat-target)
    (set-escrow-percentage wood 0)
    (set-escrow-percentage food 0)
    (set-escrow-percentage gold 0)
    (set-escrow-percentage stone 0)
)
(defrule
    (or
      (and
        (current-age == feudal-age)
        (escrow-amount wood < 200)
      )
      (or
        (and
          (current-age == castle-age)
          (escrow-amount wood < 300)
        )
        (and
          (current-age == imperial-age)
          (escrow-amount wood < 1100)
        )
      )
    )
    (goal militant 1)
    (strategic-number sn-enable-training-queue == 0)
=>
    (set-escrow-percentage wood 10)
)
(defrule
    (or
      (and
        (current-age == feudal-age)
        (escrow-amount food < 800)
      )
      (or
        (and
          (current-age == castle-age)
          (escrow-amount food < 1000)
        )
        (and
          (current-age == imperial-age)
          (escrow-amount food < 1300)
        )
      )
    )
    (or
      (up-compare-goal non-escrowed-food >= 100)
      (true)
    )
    (goal militant 1)
    (strategic-number sn-enable-training-queue == 0)
=>
    (set-escrow-percentage food 10)
)
(defrule
    (or
      (and
        (current-age == feudal-age)
        (escrow-amount gold < 200)
      )
      (and
        (current-age >= castle-age)
        (escrow-amount gold < 800)
      )
    )
    (goal militant 1)
    (strategic-number sn-enable-training-queue == 0)
=>
    (set-escrow-percentage gold 10)
)
(defrule
    (civilian-population < 20)
    (current-age >= feudal-age)
=>
    (release-escrow wood)
    (release-escrow gold)
    (release-escrow food)
)
(defrule
    (true)
=>
    (set-goal escrowed-wood 0)
    (set-goal escrowed-food 0)
    (set-goal escrowed-gold 0)
    (set-goal non-escrowed-wood 0)
    (set-goal non-escrowed-food 0)
    (set-goal non-escrowed-gold 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact escrow-amount wood escrowed-wood)
    (up-get-fact escrow-amount food escrowed-food)
    (up-get-fact escrow-amount gold escrowed-gold)
    (up-get-fact resource-amount wood non-escrowed-wood)
    (up-get-fact resource-amount food non-escrowed-food)
    (up-get-fact resource-amount gold non-escrowed-gold)
    (up-modify-goal non-escrowed-wood g:- escrowed-wood)
    (up-modify-goal non-escrowed-food g:- escrowed-food)
    (up-modify-goal non-escrowed-gold g:- escrowed-gold)
)
(defrule
    (false)
=>
    (chat-local-to-self chat-8f775db70fe5e634c9f299d0e75c42a82ad7f2fc)
    (up-chat-data-to-all "wood: %d" g: non-escrowed-wood)
    (up-chat-data-to-all "food: %d" g: non-escrowed-food)
    (up-chat-data-to-all "gold: %d" g: non-escrowed-gold)
)
(defrule
    (true)
=>
    (set-goal total-villagers 0)
    (set-goal total-trade 0)
    (set-goal total-wood-gatherer-percentage 0)
    (set-goal total-food-gatherer-percentage 0)
    (set-goal total-gold-gatherer-percentage 0)
    (set-goal total-stone-gatherer-percentage 0)
    (set-goal expected-wood-gatherers 0)
    (set-goal expected-food-gatherers 0)
    (set-goal expected-gold-gatherers 0)
    (set-goal expected-stone-gatherers 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact unit-type-count villager total-villagers)
    (up-get-fact unit-type-count trade-cart total-trade)
    (up-get-fact unit-type-count villager expected-wood-gatherers)
    (up-modify-goal total-wood-gatherer-percentage s:= sn-wood-gatherer-percentage)
    (up-modify-goal total-wood-gatherer-percentage g:+ wood-modifier-percentage)
    (up-modify-goal expected-wood-gatherers g:* total-wood-gatherer-percentage)
    (up-modify-goal expected-wood-gatherers c:/ 100)
    (up-get-fact unit-type-count villager expected-food-gatherers)
    (up-modify-goal total-food-gatherer-percentage s:= sn-food-gatherer-percentage)
    (up-modify-goal total-food-gatherer-percentage g:+ food-modifier-percentage)
    (up-modify-goal expected-food-gatherers g:* total-food-gatherer-percentage)
    (up-modify-goal expected-food-gatherers c:/ 100)
    (up-get-fact unit-type-count villager expected-gold-gatherers)
    (up-modify-goal total-gold-gatherer-percentage s:= sn-gold-gatherer-percentage)
    (up-modify-goal total-gold-gatherer-percentage g:+ gold-modifier-percentage)
    (up-modify-goal expected-gold-gatherers g:* total-gold-gatherer-percentage)
    (up-modify-goal expected-gold-gatherers c:/ 100)
    (up-get-fact unit-type-count villager expected-stone-gatherers)
    (up-modify-goal total-stone-gatherer-percentage s:= sn-stone-gatherer-percentage)
    (up-modify-goal total-stone-gatherer-percentage g:+ stone-modifier-percentage)
    (up-modify-goal expected-stone-gatherers g:* total-stone-gatherer-percentage)
    (up-modify-goal expected-stone-gatherers c:/ 100)
)
(defrule
    (or
      (and
        (town-under-attack)
        (and
          (goal militant 0)
          (and
            (current-age >= feudal-age)
            (civilian-population >= 24)
          )
        )
      )
      (death-match-game)
    )
=>
    (set-goal militant 1)
)
(defrule
    (goal resign 1)
=>
    (resign)
)
(defrule
    (or
      (and
        (building-type-count-total town-center == 0)
        (and
          (civilian-population < 30)
          (and
            (game-time >= 600)
            (goal team-game 0)
          )
        )
      )
      (and
        (civilian-population == 0)
        (and
          (food-amount < 50)
          (goal team-game 0)
        )
      )
    )
=>
    (set-goal resign 1)
)
(defrule
    (goal team-game 1)
    (or
      (and
        (building-type-count-total town-center == 0)
        (and
          (civilian-population < 30)
          (and
            (game-time >= 600)
            (goal team-game 0)
          )
        )
      )
      (and
        (civilian-population == 0)
        (and
          (food-amount < 50)
          (goal team-game 0)
        )
      )
    )
=>
    (release-escrow wood)
    (release-escrow food)
    (release-escrow gold)
    (release-escrow stone)
    (tribute-to-player any-ally wood 10000)
    (tribute-to-player any-ally food 10000)
    (tribute-to-player any-ally gold 10000)
    (tribute-to-player any-ally stone 10000)
)
(defrule
    (goal military-superiority 1)
    (goal attacking 1)
=>
    (chat-to-all chat-0fb05f52207007a291b6919d865b3f08c65255b4)
    (set-goal age-up-now 1)
)
(defrule
    (nand
      (goal military-superiority 1)
      (goal attacking 1)
    )
=>
    (set-goal age-up-now 0)
)
(defrule
    (food-amount < 800)
    (current-age == feudal-age)
    (goal age-up-now 1)
    (goal age-up 1)
=>
    (set-escrow-percentage food 50)
)
(defrule
    (gold-amount < 200)
    (current-age == feudal-age)
    (goal age-up-now 1)
    (goal age-up 1)
=>
    (set-escrow-percentage gold 50)
)
(defrule
    (food-amount < 1000)
    (not
      (current-age == feudal-age)
    )
    (current-age == castle-age)
    (goal age-up-now 1)
    (goal age-up 1)
=>
    (set-escrow-percentage food 50)
)
(defrule
    (gold-amount < 800)
    (not
      (current-age == feudal-age)
    )
    (current-age == castle-age)
    (goal age-up-now 1)
    (goal age-up 1)
=>
    (set-escrow-percentage gold 50)
)
(defrule
    (true)
=>
    (set-goal 48 0)
    (disable-self)
)
(defrule
    (can-research-with-escrow feudal-age)
    (goal age-up 1)
=>
    (release-escrow food)
    (research feudal-age)
    (set-goal 48 1)
)
(defrule
    (goal 48 1)
    (goal age-up 1)
=>
    (set-goal age-up-now 0)
)
(defrule
    (true)
=>
    (set-goal 48 0)
)
(defrule
    (true)
=>
    (set-goal 49 0)
    (disable-self)
)
(defrule
    (can-research-with-escrow castle-age)
    (goal age-up 1)
=>
    (release-escrow food)
    (release-escrow gold)
    (research castle-age)
    (set-goal 49 1)
)
(defrule
    (goal 49 1)
    (goal age-up 1)
=>
    (set-goal age-up-now 0)
)
(defrule
    (true)
=>
    (set-goal 49 0)
)
(defrule
    (true)
=>
    (set-goal 50 0)
    (disable-self)
)
(defrule
    (can-research-with-escrow imperial-age)
    (goal age-up 1)
=>
    (release-escrow food)
    (release-escrow gold)
    (research imperial-age)
    (set-goal 50 1)
)
(defrule
    (goal 50 1)
    (goal age-up 1)
=>
    (set-goal age-up-now 0)
)
(defrule
    (true)
=>
    (set-goal 50 0)
)
(defrule
    (up-research-status c: imperial-age >= research-pending)
=>
    (set-strategic-number sn-maximum-town-size imperial-age-town-size)
    (set-strategic-number sn-minimum-town-size imperial-age-town-size)
    (set-strategic-number sn-safe-town-size imperial-age-town-size)
    (set-strategic-number sn-maximum-food-drop-distance imperial-age-town-size)
    (disable-self)
)
(defrule
    (not
      (up-research-status c: imperial-age >= research-pending)
    )
    (up-research-status c: castle-age >= research-pending)
=>
    (set-strategic-number sn-maximum-town-size castle-age-town-size)
    (set-strategic-number sn-minimum-town-size castle-age-town-size)
    (set-strategic-number sn-safe-town-size castle-age-town-size)
    (set-strategic-number sn-maximum-food-drop-distance castle-age-town-size)
    (disable-self)
)
(defrule
    (not
      (up-research-status c: imperial-age >= research-pending)
    )
    (not
      (up-research-status c: castle-age >= research-pending)
    )
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-strategic-number sn-maximum-town-size feudal-age-town-size)
    (set-strategic-number sn-minimum-town-size feudal-age-town-size)
    (set-strategic-number sn-safe-town-size feudal-age-town-size)
    (set-strategic-number sn-maximum-food-drop-distance feudal-age-town-size)
    (disable-self)
)
(defrule
    (not
      (goal research-economy-upgrades 1)
    )
=>
    (up-jump-rule 29)
)
(defrule
    (can-research-with-escrow ri-loom)
    (or
      (current-age >= feudal-age)
      (and
        (up-pending-objects c: villager == 0)
        (and
          (food-amount < 50)
          (game-time >= 2)
        )
      )
    )
=>
    (release-escrow gold)
    (research ri-loom)
)
(defrule
    (can-research ri-wheel-barrow)
    (building-type-count-total town-center >= 2)
=>
    (research ri-wheel-barrow)
)
(defrule
    (can-research ri-hand-cart)
    (current-age == imperial-age)
=>
    (research ri-hand-cart)
)
(defrule
    (can-research-with-escrow ri-caravan)
    (goal team-game 1)
    (unit-type-count-total trade-cart >= 1)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-caravan)
)
(defrule
    (can-research-with-escrow ri-coinage)
    (goal team-game 1)
    (unit-type-count-total trade-cart >= 1)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-coinage)
)
(defrule
    (can-research-with-escrow ri-banking)
    (goal team-game 1)
    (unit-type-count-total trade-cart >= 1)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-banking)
)
(defrule
    (can-research ri-cartography)
=>
    (research ri-cartography)
)
(defrule
    (can-research ri-double-bit-axe)
    (or
      (goal militant 0)
      (military-population > 10)
    )
=>
    (research ri-double-bit-axe)
)
(defrule
    (can-research ri-bow-saw)
    (or
      (goal militant 0)
      (military-population > 10)
    )
=>
    (research ri-bow-saw)
)
(defrule
    (can-research ri-two-man-saw)
    (or
      (goal militant 0)
      (military-population > 10)
    )
=>
    (research ri-two-man-saw)
)
(defrule
    (can-research ri-horse-collar)
    (or
      (goal militant 0)
      (military-population > 10)
    )
=>
    (research ri-horse-collar)
)
(defrule
    (can-research ri-heavy-plow)
    (or
      (goal militant 0)
      (military-population > 10)
    )
=>
    (research ri-heavy-plow)
)
(defrule
    (can-research ri-crop-rotation)
    (or
      (goal militant 0)
      (military-population > 10)
    )
=>
    (research ri-crop-rotation)
)
(defrule
    (can-research ri-gold-mining)
    (or
      (goal militant 0)
      (military-population > 10)
    )
=>
    (research ri-gold-mining)
)
(defrule
    (can-research ri-gold-shaft-mining)
    (or
      (goal militant 0)
      (military-population > 10)
    )
=>
    (research ri-gold-shaft-mining)
)
(defrule
    (can-research ri-murder-holes)
    (building-type-count-total castle >= 1)
=>
    (research ri-murder-holes)
)
(defrule
    (can-research-with-escrow ri-chemistry)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-chemistry)
)
(defrule
    (can-research ri-fortified-wall)
    (building-type-count-total stone-wall-line > 0)
=>
    (research ri-fortified-wall)
)
(defrule
    (can-research ri-masonry)
=>
    (research ri-masonry)
)
(defrule
    (can-research ri-architecture)
=>
    (research ri-architecture)
)
(defrule
    (can-research ri-bombard-tower)
=>
    (research ri-bombard-tower)
)
(defrule
    (can-research ri-hoardings)
=>
    (research ri-hoardings)
)
(defrule
    (can-research-with-escrow ri-conscription)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-conscription)
)
(defrule
    (can-research ri-guard-tower)
    (building-type-count-total watch-tower-line >= 2)
=>
    (research ri-guard-tower)
)
(defrule
    (can-research ri-keep)
    (building-type-count-total watch-tower-line >= 2)
=>
    (research ri-keep)
)
(defrule
    (can-research ri-arrowslits)
    (building-type-count-total watch-tower-line >= 2)
=>
    (research ri-arrowslits)
)
(defrule
    (can-research ri-fletching)
    (building-type-count-total watch-tower-line >= 2)
=>
    (research ri-fletching)
)
(defrule
    (can-research ri-bodkin-arrow)
    (building-type-count-total watch-tower-line >= 2)
=>
    (research ri-bodkin-arrow)
)
(defrule
    (can-research ri-bracer)
    (building-type-count-total watch-tower-line >= 2)
=>
    (research ri-bracer)
)
(defrule
    (current-age >= castle-age)
=>
    (delete-building stone-wall-line)
    (delete-building palisade-wall)
    (delete-building 789)
    (delete-building 793)
    (delete-building 797)
    (delete-building 801)
    (delete-building 64)
    (delete-building 88)
    (delete-building 659)
    (delete-building 667)
    (delete-building 63)
    (delete-building 85)
    (delete-building 660)
    (delete-building 668)
)
(defrule
    (true)
=>
    (set-goal should-make-villagers 0)
)
(defrule
    (up-compare-goal desired-villagers g:< total-villagers)
    (population-headroom == 0)
    (housing-headroom == 0)
=>
    (delete-unit villager)
)
(defrule
    (up-compare-goal total-villagers g:< desired-villagers-with-trade)
    (nand
      (up-compare-goal desired-villagers g:< total-villagers)
      (and
        (population-headroom == 0)
        (housing-headroom == 0)
      )
    )
    (unit-type-count-total trade-cart > 0)
=>
    (set-goal should-make-villagers 1)
)
(defrule
    (up-compare-goal total-villagers g:< desired-villagers)
    (nand
      (up-compare-goal desired-villagers g:< total-villagers)
      (and
        (population-headroom == 0)
        (housing-headroom == 0)
      )
    )
    (not
      (unit-type-count-total trade-cart > 0)
    )
=>
    (set-goal should-make-villagers 1)
)
(defrule
    (can-train villager)
    (goal should-make-villagers 1)
=>
    (train villager)
)
(defrule
    (can-train trade-cart)
    (up-compare-goal total-trade g:< desired-trade)
    (players-building-type-count any-ally market >= 1)
    (goal team-game 1)
    (current-age >= castle-age)
    (military-population >= min-army)
=>
    (train trade-cart)
)
(defrule
    (not
      (players-building-type-count any-ally market >= 1)
    )
    (goal team-game 1)
    (current-age >= castle-age)
    (military-population >= min-army)
=>
    (chat-to-allies chat-80b7f58791874cd5736eac7bcdc4ea5510ffe468)
    (disable-self)
)
(defrule
    (can-train monk)
    (unit-type-count-total monk-set < 1)
    (unit-type-count-total monk-set == 0)
=>
    (train monk)
)
(defrule
    (up-compare-goal non-escrowed-food < 50)
    (goal should-make-villagers 1)
    (current-age <= dark-age)
=>
    (up-drop-resources sheep-food c: 5)
    (up-drop-resources farm-food c: 5)
    (up-drop-resources forage-food c: 5)
    (up-drop-resources deer-food c: 20)
    (up-drop-resources boar-food c: 10)
)
(defrule
    (true)
=>
    (set-goal 52 0)
    (disable-self)
)
(defrule
    (or
      (and
        (dropsite-min-distance wood > 2)
        (resource-found wood)
      )
      (and
        (game-time >= 60)
        (building-type-count-total lumber-camp == 0)
      )
    )
    (up-pending-objects c: lumber-camp == 0)
    (can-build lumber-camp)
    (dropsite-min-distance wood != 255)
=>
    (build lumber-camp)
    (set-goal 52 1)
)
(defrule
    (goal 52 1)
=>
    (up-modify-sn sn-camp-max-distance c:+ 4)
)
(defrule
    (true)
=>
    (set-goal 52 0)
    (set-goal 9 0)
    (up-get-fact building-type-count-total town-center 7)
    (up-modify-goal 7 c:* 9)
    (up-modify-goal 9 g:+ 7)
    (up-get-fact building-type-count-total mill 7)
    (up-modify-goal 7 c:* 6)
    (up-modify-goal 9 g:+ 7)
    (up-get-fact building-type-count-total farm 7)
)
(defrule
    (or
      (building-type-count-total mill == 0)
      (and
        (not
          (civ-selected khmer)
        )
        (up-compare-goal 7 g:>= 9)
      )
    )
    (or
      (resource-found food)
      (and
        (not
          (civ-selected khmer)
        )
        (game-time >= 60)
      )
    )
    (can-build mill)
=>
    (build mill)
)
(defrule
    (can-build-with-escrow mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill < 1)
    (building-type-count-total mill == 0)
    (game-time >= 360)
=>
    (release-escrow wood)
    (build mill)
)
(defrule
    (can-build wonder)
    (up-pending-objects c: wonder < 5)
    (not
      (death-match-game)
    )
=>
    (build wonder)
)
(defrule
    (can-build-with-escrow town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 1)
=>
    (release-escrow wood)
    (release-escrow stone)
    (build town-center)
)
(defrule
    (current-age >= castle-age)
    (building-type-count-total town-center < 3)
    (goal boom 1)
    (goal should-make-villagers 1)
=>
    (set-escrow-percentage wood 100)
    (set-escrow-percentage stone 100)
)
(defrule
    (can-build-with-escrow town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < 3)
    (goal boom 1)
    (goal should-make-villagers 1)
=>
    (release-escrow wood)
    (release-escrow stone)
    (build town-center)
)
(defrule
    (can-build town-center)
    (up-pending-objects c: town-center < 5)
    (building-type-count-total town-center < max-town-centers)
=>
    (build town-center)
)
(defrule
    (can-build blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (or
      (civilian-population >= 20)
      (death-match-game)
    )
=>
    (build blacksmith)
)
(defrule
    (can-build-with-escrow market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (building-type-count-total blacksmith > 0)
    (or
      (civilian-population >= 20)
      (death-match-game)
    )
=>
    (release-escrow wood)
    (build market)
)
(defrule
    (can-build university)
    (up-pending-objects c: university < 5)
    (building-type-count-total university < 1)
=>
    (build university)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < 1)
=>
    (build monastery)
)
(defrule
    (can-build bombard-tower)
    (up-pending-objects c: bombard-tower < 5)
    (building-type-count-total bombard-tower < 5)
=>
    (build bombard-tower)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 5)
    (goal attacking 1)
    (goal use-town-size-attack 0)
=>
    (build-forward castle)
)
(defrule
    (can-build castle)
    (up-pending-objects c: castle < 5)
    (building-type-count-total castle < 5)
    (nand
      (goal attacking 1)
      (goal use-town-size-attack 0)
    )
=>
    (build castle)
)
(defrule
    (military-population < 5)
    (town-under-attack)
    (current-age <= feudal-age)
=>
    (up-assign-builders c: watch-tower-line c: 10)
)
(defrule
    (can-build-with-escrow watch-tower-line)
    (up-pending-objects c: watch-tower-line < 5)
    (building-type-count-total watch-tower-line < 3)
    (military-population < 5)
    (town-under-attack)
    (current-age <= feudal-age)
=>
    (release-escrow wood)
    (release-escrow stone)
    (build watch-tower-line)
)
(defrule
    (can-build farm)
    (up-pending-objects c: farm < 5)
    (building-type-count-total farm < 3)
    (building-type-count-total lumber-camp > 0)
    (up-research-status c: feudal-age < research-pending)
=>
    (build farm)
)
(defrule
    (building-type-count-total house == 0)
    (up-research-status c: feudal-age < research-pending)
=>
    (up-assign-builders c: house c: 2)
    (disable-self)
)
(defrule
    (not
      (building-type-count-total house == 0)
    )
    (up-research-status c: feudal-age < research-pending)
=>
    (up-assign-builders c: house c: 1)
    (disable-self)
)
(defrule
    (population-headroom != 0)
    (up-pending-objects c: house < 2)
    (can-build house)
    (housing-headroom < 5)
    (up-research-status c: feudal-age < research-pending)
=>
    (build house)
)
(defrule
    (population-headroom != 0)
    (up-pending-objects c: house < 2)
    (can-build house)
    (housing-headroom < 10)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (up-research-status c: feudal-age >= research-pending)
    (up-research-status c: castle-age < research-pending)
=>
    (build house)
)
(defrule
    (can-build lumber-camp)
    (up-pending-objects c: lumber-camp < 5)
    (building-type-count-total lumber-camp < 2)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (up-research-status c: feudal-age >= research-pending)
    (up-research-status c: castle-age < research-pending)
=>
    (build lumber-camp)
)
(defrule
    (can-build-with-escrow mining-camp)
    (up-pending-objects c: mining-camp < 5)
    (building-type-count-total mining-camp < 1)
    (building-type-count-total barracks >= 1)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (up-research-status c: feudal-age >= research-pending)
    (up-research-status c: castle-age < research-pending)
=>
    (release-escrow wood)
    (build mining-camp)
)
(defrule
    (wood-amount >= 400)
    (can-sell-commodity wood)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (up-research-status c: feudal-age >= research-pending)
    (up-research-status c: castle-age < research-pending)
=>
    (sell-commodity wood)
)
(defrule
    (food-amount >= 900)
    (can-sell-commodity food)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (up-research-status c: feudal-age >= research-pending)
    (up-research-status c: castle-age < research-pending)
=>
    (sell-commodity food)
)
(defrule
    (gold-amount >= 400)
    (can-buy-commodity food)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (up-research-status c: feudal-age >= research-pending)
    (up-research-status c: castle-age < research-pending)
=>
    (buy-commodity food)
)
(defrule
    (dropsite-min-distance stone > 3)
    (resource-found stone)
    (up-pending-objects c: mining-camp == 0)
    (can-build mining-camp)
    (dropsite-min-distance stone != 255)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (up-research-status c: castle-age < research-pending)
    )
=>
    (build mining-camp)
)
(defrule
    (population-headroom != 0)
    (up-pending-objects c: house < 2)
    (can-build house)
    (housing-headroom < 20)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (up-research-status c: castle-age < research-pending)
    )
=>
    (build house)
)
(defrule
    (population-headroom != 0)
    (housing-headroom == 0)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (up-research-status c: castle-age < research-pending)
    )
=>
    (enable-timer 1 60)
    (disable-self)
)
(defrule
    (timer-triggered 1)
    (population-headroom != 0)
    (housing-headroom == 0)
    (not
      (up-research-status c: feudal-age < research-pending)
    )
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (up-research-status c: castle-age < research-pending)
    )
=>
    (chat-to-all chat-dc11f49a61cbf05c5ba15f80e6ae6c3226d645b4)
    (up-modify-sn sn-minimum-town-size c:+ 5)
    (up-modify-sn sn-maximum-town-size c:+ 5)
    (disable-timer 1)
    (enable-timer 1 60)
)
(defrule
    (gold-amount >= 1000)
    (can-buy-commodity food)
    (current-age == castle-age)
=>
    (buy-commodity food)
)
(defrule
    (wood-amount >= 800)
    (can-sell-commodity wood)
    (current-age == castle-age)
=>
    (sell-commodity wood)
)
(defrule
    (nand
      (and
        (up-compare-goal non-escrowed-wood > 100)
        (dropsite-min-distance wood < 10)
      )
      (or
        (up-research-status c: feudal-age >= research-pending)
        (wood-amount > 200)
      )
    )
=>
    (up-jump-rule 8)
)
(defrule
    (true)
=>
    (set-goal current-farm-count 0)
    (up-get-fact building-type-count-total farm current-farm-count)
)
(defrule
    (can-build farm)
    (up-pending-objects c: farm < 5)
    (up-compare-goal current-farm-count g:< expected-food-gatherers)
=>
    (build farm)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (building-type-count-total mill <= 1)
    (building-type-count-total farm >= 17)
=>
    (build mill)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (nand
      (building-type-count-total mill <= 1)
      (building-type-count-total farm >= 17)
    )
    (building-type-count-total mill <= 2)
    (building-type-count-total farm >= 24)
=>
    (build mill)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (nand
      (building-type-count-total mill <= 1)
      (building-type-count-total farm >= 17)
    )
    (nand
      (building-type-count-total mill <= 2)
      (building-type-count-total farm >= 24)
    )
    (building-type-count-total mill <= 3)
    (building-type-count-total farm >= 31)
=>
    (build mill)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (nand
      (building-type-count-total mill <= 1)
      (building-type-count-total farm >= 17)
    )
    (nand
      (building-type-count-total mill <= 2)
      (building-type-count-total farm >= 24)
    )
    (nand
      (building-type-count-total mill <= 3)
      (building-type-count-total farm >= 31)
    )
    (building-type-count-total mill <= 4)
    (building-type-count-total farm >= 38)
=>
    (build mill)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (nand
      (building-type-count-total mill <= 1)
      (building-type-count-total farm >= 17)
    )
    (nand
      (building-type-count-total mill <= 2)
      (building-type-count-total farm >= 24)
    )
    (nand
      (building-type-count-total mill <= 3)
      (building-type-count-total farm >= 31)
    )
    (nand
      (building-type-count-total mill <= 4)
      (building-type-count-total farm >= 38)
    )
    (building-type-count-total mill <= 5)
    (building-type-count-total farm >= 45)
=>
    (build mill)
)
(defrule
    (can-build mill)
    (up-pending-objects c: mill < 5)
    (nand
      (building-type-count-total mill <= 1)
      (building-type-count-total farm >= 17)
    )
    (nand
      (building-type-count-total mill <= 2)
      (building-type-count-total farm >= 24)
    )
    (nand
      (building-type-count-total mill <= 3)
      (building-type-count-total farm >= 31)
    )
    (nand
      (building-type-count-total mill <= 4)
      (building-type-count-total farm >= 38)
    )
    (nand
      (building-type-count-total mill <= 5)
      (building-type-count-total farm >= 45)
    )
    (building-type-count-total mill <= 6)
    (building-type-count-total farm >= 52)
=>
    (build mill)
)
(defrule
    (true)
=>
    (set-goal 54 0)
    (disable-self)
)
(defrule
    (or
      (dropsite-min-distance gold > 3)
      (and
        (unit-type-count 579 == 0)
        (and
          (unit-type-count 581 == 0)
          (strategic-number sn-gold-gatherer-percentage > 0)
        )
      )
    )
    (resource-found gold)
    (up-pending-objects c: mining-camp == 0)
    (can-build mining-camp)
    (dropsite-min-distance gold != 255)
    (or
      (up-research-status c: feudal-age >= research-pending)
      (wood-amount > 200)
    )
=>
    (build mining-camp)
    (set-goal 54 1)
)
(defrule
    (goal 54 1)
    (or
      (up-research-status c: feudal-age >= research-pending)
      (wood-amount > 200)
    )
=>
    (up-modify-sn sn-camp-max-distance c:+ 10)
)
(defrule
    (true)
=>
    (set-goal 54 0)
)
(defrule
    (goal build-walls 1)
    (or
      (up-research-status c: feudal-age >= research-pending)
      (wood-amount > 200)
    )
=>
    (enable-wall-placement 2)
    (disable-self)
)
(defrule
    (can-build-wall 2 stone-wall-line)
    (goal build-walls 1)
    (or
      (up-research-status c: feudal-age >= research-pending)
      (wood-amount > 200)
    )
=>
    (build-wall 2 stone-wall-line)
)
(defrule
    (building-type-count-total stone-wall-line > 0)
    (can-build-gate 2)
    (building-type-count-total gate < 5)
    (goal build-walls 1)
    (or
      (up-research-status c: feudal-age >= research-pending)
      (wood-amount > 200)
    )
=>
    (build-gate 2)
)
(defrule
    (not
      (goal militant 1)
    )
=>
    (up-jump-rule 394)
)
(defrule
    (true)
=>
    (set-goal focus-player-military-population 0)
    (set-goal own-military-population 0)
    (set-goal temp 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-player-fact focus-player military-population 0 focus-player-military-population)
    (up-get-fact military-population 0 own-military-population)
    (up-modify-goal temp g:= own-military-population)
    (up-modify-goal temp c:* 100)
    (up-modify-goal temp c:/ 80)
)
(defrule
    (up-compare-goal temp g:> focus-player-military-population)
=>
    (set-goal military-superiority 1)
)
(defrule
    (not
      (up-compare-goal temp g:> focus-player-military-population)
    )
=>
    (set-goal military-superiority 0)
)
(defrule
    (true)
=>
    (set-goal produce-militia 0)
    (set-goal produce-spearmen 0)
    (set-goal produce-condottiero 0)
    (set-goal produce-archers 0)
    (set-goal produce-skirmishers 0)
    (set-goal produce-scouts 0)
    (set-goal produce-knights 0)
    (set-goal produce-rams 1)
    (set-goal produce-mangonels 0)
    (set-goal produce-scorpions 0)
    (set-goal produce-unique-unit 0)
    (set-goal produce-monks 0)
    (set-goal produce-trebuchets 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-camels 0)
    (set-goal produce-cavalry-archers 0)
    (set-goal produce-eagles 0)
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-bombard-cannons 0)
)
(defrule
    (or
      (dropsite-min-distance gold > 5)
      (dropsite-min-distance gold == -1)
    )
    (unit-type-count-total trade-cart == 0)
    (current-age >= feudal-age)
=>
    (set-goal producing-trash 1)
)
(defrule
    (nand
      (or
        (dropsite-min-distance gold > 5)
        (dropsite-min-distance gold == -1)
      )
      (and
        (unit-type-count-total trade-cart == 0)
        (current-age >= feudal-age)
      )
    )
=>
    (set-goal producing-trash 0)
)
(defrule
    (or
      (up-research-status c: feudal-age < research-pending)
      (and
        (current-age == dark-age)
        (death-match-game)
      )
    )
=>
    (set-goal produce-militia 1)
)
(defrule
    (nand
      (not
        (up-research-status c: feudal-age < research-pending)
      )
      (nand
        (current-age == dark-age)
        (death-match-game)
      )
    )
=>
    (up-jump-rule 29)
)
(defrule
    (civ-selected aztec)
=>
    (set-goal produce-eagles 1)
    (set-goal produce-monks 1)
)
(defrule
    (current-age <= feudal-age)
    (civ-selected berbers)
=>
    (set-goal produce-archers 1)
)
(defrule
    (not
      (current-age <= feudal-age)
    )
    (civ-selected berbers)
=>
    (set-goal produce-knights 1)
)
(defrule
    (or
      (civ-selected briton)
      (or
        (civ-selected ethiopian)
        (or
          (civ-selected chinese)
          (or
            (civ-selected vietnamese)
            (or
              (civ-selected magyar)
              (civ-selected viking)
            )
          )
        )
      )
    )
=>
    (set-goal produce-archers 1)
)
(defrule
    (current-age <= feudal-age)
    (civ-selected burmese)
=>
    (set-goal produce-archers 1)
)
(defrule
    (civ-selected burmese)
=>
    (set-goal produce-battle-elephants 1)
    (set-goal produce-monks 1)
)
(defrule
    (civ-selected byzantine)
=>
    (set-goal produce-archers 1)
    (set-goal produce-monks 1)
)
(defrule
    (civ-selected slavic)
=>
    (set-goal produce-mangonels 1)
    (set-goal produce-militia 1)
)
(defrule
    (current-age <= feudal-age)
    (or
      (civ-selected frankish)
      (civ-selected persian)
    )
=>
    (set-goal produce-scouts 1)
)
(defrule
    (not
      (current-age <= feudal-age)
    )
    (or
      (civ-selected frankish)
      (civ-selected persian)
    )
=>
    (set-goal produce-knights 1)
)
(defrule
    (current-age <= feudal-age)
    (or
      (civ-selected gothic)
      (or
        (civ-selected malian)
        (civ-selected celtic)
      )
    )
=>
    (set-goal produce-archers 1)
)
(defrule
    (not
      (current-age <= feudal-age)
    )
    (or
      (civ-selected gothic)
      (or
        (civ-selected malian)
        (civ-selected celtic)
      )
    )
=>
    (set-goal produce-militia 1)
)
(defrule
    (civ-selected hun)
=>
    (set-goal produce-cavalry-archers 1)
)
(defrule
    (civ-selected incan)
=>
    (set-goal produce-eagles 1)
)
(defrule
    (current-age <= feudal-age)
    (civ-selected indian)
=>
    (set-goal produce-archers 1)
)
(defrule
    (not
      (current-age <= feudal-age)
    )
    (civ-selected indian)
=>
    (set-goal produce-camels 1)
)
(defrule
    (civ-selected indian)
=>
    (set-goal produce-hand-cannoneer 1)
)
(defrule
    (civ-selected italian)
=>
    (set-goal produce-archers 1)
    (set-goal produce-hand-cannoneers 1)
    (set-goal produce-condottiero 1)
)
(defrule
    (civ-selected japanese)
=>
    (set-goal produce-cavalry-archers 1)
)
(defrule
    (or
      (civ-selected khmer)
      (civ-selected malay)
    )
=>
    (set-goal produce-battle-elephants 1)
    (set-goal produce-archers 1)
)
(defrule
    (civ-selected korean)
=>
    (set-goal produce-archers 1)
    (set-goal produce-mangonels 1)
)
(defrule
    (civ-selected mayan)
=>
    (set-goal produce-archers 1)
)
(defrule
    (civ-selected mongol)
=>
    (set-goal produce-cavalry-archers 1)
)
(defrule
    (current-age >= imperial-age)
    (civ-selected mongol)
=>
    (set-goal produce-scouts 1)
)
(defrule
    (civ-selected portuguese)
=>
    (set-goal produce-archers 1)
    (set-goal produce-hand-cannoneers 1)
)
(defrule
    (civ-selected saracen)
=>
    (set-goal produce-cavalry-archers 1)
)
(defrule
    (or
      (civ-selected spanish)
      (civ-selected turkish)
    )
=>
    (set-goal produce-cavalry-archers 1)
    (set-goal produce-hand-cannoneers 1)
)
(defrule
    (civ-selected teutonic)
=>
    (set-goal produce-militia 1)
)
(defrule
    (current-age >= castle)
    (civ-selected teutonic)
=>
    (set-goal produce-knights 1)
)
(defrule
    (nand
      (not
        (up-research-status c: feudal-age < research-pending)
      )
      (nand
        (current-age == dark-age)
        (death-match-game)
      )
    )
=>
    (up-jump-rule 70)
)
(defrule
    (players-unit-type-count any-enemy jaguar-man-line >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-militia 0)
    (set-goal produce-archers 1)
    (set-goal produce-hand-cannoneers 1)
)
(defrule
    (players-unit-type-count any-enemy camel-archer-line >= min-detection-units)
=>
    (set-goal produce-cavalry-archers 0)
    (set-goal produce-archers 1)
)
(defrule
    (players-unit-type-count any-enemy longbowman-line >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-militia 0)
    (set-goal produce-skirmishers 1)
    (set-goal produce-knights 1)
)
(defrule
    (players-unit-type-count any-enemy arambai-line >= min-detection-units)
=>
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
)
(defrule
    (players-unit-type-count any-enemy cataphract-line >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-militia 0)
    (set-goal produce-eagles 0)
    (set-goal produce-monks 1)
)
(defrule
    (players-unit-type-count any-enemy woad-raider-line >= min-detection-units)
=>
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
)
(defrule
    (players-unit-type-count any-enemy chu-ko-nu-line >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-militia 0)
    (set-goal produce-skirmishers 1)
    (set-goal produce-mangonels 1)
    (set-goal produce-knights 1)
    (set-goal produce-scorpions 1)
)
(defrule
    (players-unit-type-count any-enemy shotel-line >= min-detection-units)
=>
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
)
(defrule
    (players-unit-type-count any-enemy throwing-axeman-line >= min-detection-units)
=>
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
    (set-goal produce-scorpions 1)
)
(defrule
    (players-unit-type-count any-enemy huskarl-line >= min-detection-units)
=>
    (set-goal produce-archers 0)
    (set-goal produce-cavalry-archers 0)
)
(defrule
    (players-unit-type-count any-enemy tarkan-line >= min-detection-units)
=>
    (set-goal produce-spearmen 1)
    (set-goal produce-camels 1)
)
(defrule
    (players-unit-type-count any-enemy kamayuk-line >= min-detection-units)
=>
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
    (set-goal produce-scouts 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
)
(defrule
    (players-unit-type-count any-enemy elephant-archer-line >= min-detection-units)
=>
    (set-goal produce-monks 1)
    (set-goal produce-skirmishers 1)
    (set-goal produce-archers 0)
)
(defrule
    (players-unit-type-count any-enemy genoese-crossbowman-line >= min-detection-units)
=>
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
    (set-goal produce-scouts 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-skirmishers 1)
    (set-goal produce-mangonels 1)
    (set-goal produce-scorpions 1)
)
(defrule
    (players-unit-type-count any-enemy samurai-line >= min-detection-units)
=>
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
    (set-goal produce-scorpions 1)
    (set-goal produce-hand-cannoneers 1)
)
(defrule
    (players-unit-type-count any-enemy ballista-elephant-line >= min-detection-units)
=>
    (set-goal produce-spearmen 1)
    (set-goal produce-monks 1)
)
(defrule
    (players-unit-type-count any-enemy war-wagon-line >= min-detection-units)
=>
    (set-goal produce-spearmen 1)
    (set-goal produce-eagles 1)
)
(defrule
    (players-unit-type-count any-enemy magyar-huszar-line >= min-detection-units)
=>
    (set-goal produce-spearmen 1)
    (set-goal produce-eagles 1)
    (set-goal produce-camels 1)
)
(defrule
    (players-unit-type-count any-enemy karambit-warrior-line >= min-detection-units)
=>
    (set-goal produce-battle-elephants 1)
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
    (set-goal produce-hand-cannoneers 1)
)
(defrule
    (players-unit-type-count any-enemy gbeto-line >= min-detection-units)
=>
    (set-goal produce-monks 0)
    (set-goal produce-spearmen 0)
    (set-goal produce-militia 0)
    (set-goal produce-eagles 0)
    (set-goal produce-archers 1)
)
(defrule
    (players-unit-type-count any-enemy plumed-archer-line >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-militia 0)
    (set-goal produce-skirmishers 1)
    (set-goal produce-mangonels 1)
    (set-goal produce-knights 1)
    (set-goal produce-scorpions 1)
)
(defrule
    (players-unit-type-count any-enemy mangudai-line >= min-detection-units)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-skirmishers 1)
)
(defrule
    (players-unit-type-count any-enemy war-elephant-line >= min-detection-units)
=>
    (set-goal produce-monks 1)
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count any-enemy organ-gun-line >= min-detection-units)
=>
    (set-goal produce-mangonels 1)
)
(defrule
    (players-unit-type-count any-enemy mameluke-line >= min-detection-units)
=>
    (set-goal produce-knights 0)
    (set-goal produce-camels 0)
    (set-goal produce-scouts 0)
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
)
(defrule
    (players-unit-type-count any-enemy boyar-line >= min-detection-units)
=>
    (set-goal produce-spearmen 1)
    (set-goal produce-camels 1)
    (set-goal produce-skirmishers 0)
)
(defrule
    (players-unit-type-count any-enemy conquistador-line >= min-detection-units)
=>
    (set-goal produce-hand-cannoneers 1)
)
(defrule
    (players-unit-type-count any-enemy teutonic-knight-line >= min-detection-units)
=>
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
    (set-goal produce-monks 1)
    (set-goal produce-hand-cannoneers 1)
)
(defrule
    (players-unit-type-count any-enemy janissary-line >= min-detection-units)
=>
    (set-goal produce-archers 1)
)
(defrule
    (players-unit-type-count any-enemy rattan-archer-line >= min-detection-units)
=>
    (set-goal produce-knights 1)
)
(defrule
    (players-unit-type-count any-enemy berserk-line >= min-detection-units)
=>
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
    (set-goal produce-hand-cannoneers 1)
)
(defrule
    (players-building-type-count any-enemy archery-range >= 1)
    (current-age == feudal-age)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (unit-type-count-total spearman-line < 5)
    (players-building-type-count any-enemy stable >= 1)
    (current-age == feudal-age)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (or
      (current-age <= feudal-age)
      (true)
    )
=>
    (set-goal allowed-skirmishers 1)
)
(defrule
    (not
      (current-age <= feudal-age)
    )
    (not
      (true)
    )
=>
    (set-goal allowed-skirmishers 0)
)
(defrule
    (players-unit-type-count any-enemy battering-ram-line >= min-detection-units)
=>
    (set-goal produce-knights 1)
)
(defrule
    (players-unit-type-count any-enemy hand-cannoneer >= min-detection-units)
=>
    (set-goal produce-archers 1)
    (set-goal produce-militia 0)
)
(defrule
    (players-unit-type-count any-enemy monk-set >= min-detection-units)
=>
    (set-goal produce-knights 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-archers 1)
    (set-goal produce-mangonels 1)
)
(defrule
    (players-unit-type-count any-enemy archer-line >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-camels 0)
    (set-goal produce-militia 0)
    (set-goal produce-mangonels 1)
    (set-goal produce-battle-elephants 0)
)
(defrule
    (goal allowed-skirmishers 1)
    (goal produce-scouts 0)
    (players-unit-type-count any-enemy archer-line >= min-detection-units)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (current-age >= castle-age)
    (players-unit-type-count any-enemy archer-line >= min-detection-units)
=>
    (set-goal produce-knights 1)
)
(defrule
    (players-unit-type-count any-enemy archer-line >= min-detection-units)
=>
    (set-goal produce-scorpions 1)
    (set-goal produce-hand-cannoneers 0)
)
(defrule
    (current-age == castle-age)
    (building-type-count-total siege-workshop == 0)
    (goal military-superiority 1)
    (players-unit-type-count any-enemy archer-line >= min-detection-units)
=>
    (set-escrow-percentage wood 90)
)
(defrule
    (players-unit-type-count any-enemy cavalry-archer-line >= min-detection-units)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-militia 0)
    (set-goal produce-mangonels 1)
    (set-goal produce-battle-elephants 0)
)
(defrule
    (goal allowed-skirmishers 1)
    (players-unit-type-count any-enemy cavalry-archer-line >= min-detection-units)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (current-age >= castle-age)
    (players-unit-type-count any-enemy cavalry-archer-line >= min-detection-units)
=>
    (set-goal produce-knights 1)
    (set-goal produce-hand-cannoneers 0)
)
(defrule
    (current-age <= castle-age)
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
=>
    (set-goal produce-archers 0)
    (set-goal produce-cavalry-archers 0)
)
(defrule
    (goal allowed-skirmishers 1)
    (goal produce-scouts 0)
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
=>
    (set-goal produce-skirmishers 1)
)
(defrule
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
=>
    (set-goal produce-mangonels 1)
)
(defrule
    (current-age >= castle-age)
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
=>
    (set-goal produce-eagles 1)
    (set-goal produce-knights 1)
    (set-goal produce-scouts 1)
)
(defrule
    (players-unit-type-count any-enemy skirmisher-line >= min-detection-units)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-monks 0)
)
(defrule
    (players-unit-type-count any-enemy spearman-line >= min-detection-units)
=>
    (set-goal produce-camels 0)
    (set-goal produce-scouts 0)
    (set-goal produce-knights 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-scorpions 1)
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
    (set-goal produce-hand-cannoneers 1)
)
(defrule
    (players-unit-type-count any-enemy camel-line >= min-detection-units)
=>
    (set-goal produce-scouts 0)
    (set-goal produce-knights 0)
    (set-goal produce-battle-elephants 0)
    (set-goal produce-spearmen 1)
    (set-goal produce-archers 1)
    (set-goal produce-eagles 1)
)
(defrule
    (players-unit-type-count any-enemy militiaman-line >= min-detection-units)
=>
    (set-goal produce-eagles 0)
    (set-goal produce-archers 1)
    (set-goal produce-cavalry-archers 1)
    (set-goal produce-hand-cannoneers 1)
)
(defrule
    (players-unit-type-count any-enemy eagle-warrior-line >= min-detection-units)
=>
    (set-goal produce-archers 0)
    (set-goal produce-cavalry-archers 0)
    (set-goal produce-skirmishers 0)
    (set-goal produce-militia 1)
)
(defrule
    (unit-type-count-total spearman-line < 5)
    (current-age <= feudal-age)
    (players-unit-type-count any-enemy scout-cavalry-line >= min-detection-units)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (not
      (current-age <= feudal-age)
    )
    (players-unit-type-count any-enemy scout-cavalry-line >= min-detection-units)
=>
    (set-goal produce-spearmen 1)
)
(defrule
    (players-unit-type-count any-enemy scout-cavalry-line >= 20)
=>
    (set-goal produce-hand-cannoneers 0)
)
(defrule
    (players-unit-type-count any-enemy battle-elephant-line >= min-detection-units)
=>
    (set-goal produce-camels 1)
    (set-goal produce-spearmen 1)
    (set-goal produce-monks 1)
    (set-goal produce-skirmishers 0)
)
(defrule
    (players-unit-type-count any-enemy knight-line >= min-detection-units)
=>
    (set-goal produce-eagles 0)
    (set-goal produce-skirmishers 0)
    (set-goal produce-spearmen 1)
    (set-goal produce-camels 1)
)
(defrule
    (players-unit-type-count any-enemy mangonel-line >= min-detection-units)
=>
    (set-goal produce-scorpions 0)
)
(defrule
    (current-age <= castle-age)
    (players-unit-type-count any-enemy mangonel-line >= min-detection-units)
=>
    (set-goal produce-archers 0)
    (set-goal produce-cavalry 0)
)
(defrule
    (players-unit-type-count any-enemy mangonel-line >= min-detection-units)
=>
    (set-goal produce-skirmishers 0)
    (set-goal produce-scouts 1)
    (set-goal produce-knights 1)
    (set-goal produce-eagles 1)
)
(defrule
    (players-unit-type-count any-enemy scorpion-line >= min-detection-units)
=>
    (set-goal produce-mangonels 1)
)
(defrule
    (players-unit-type-count any-enemy trebuchet-set >= 1)
=>
    (set-goal produce-bombard-cannons 1)
)
(defrule
    (players-unit-type-count any-enemy archer-line >= min-detection-units)
    (current-age == feudal-age)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (players-building-type-count any-enemy wonder >= 1)
=>
    (set-goal produce-rams 1)
    (set-goal produce-trebuchets 1)
)
(defrule
    (players-building-type-count any-enemy castle >= 1)
=>
    (set-goal produce-rams 1)
    (set-goal produce-trebuchets 1)
)
(defrule
    (players-building-type-count any-enemy watch-tower-line >= 1)
=>
    (set-goal produce-rams 1)
    (set-goal produce-trebuchets 1)
)
(defrule
    (players-building-type-count any-enemy bombard-tower >= 1)
=>
    (set-goal produce-rams 1)
    (set-goal produce-trebuchets 1)
)
(defrule
    (nand
      (goal producing-trash 1)
      (and
        (not
          (up-research-status c: feudal-age < research-pending)
        )
        (nand
          (current-age == dark-age)
          (death-match-game)
        )
      )
    )
=>
    (up-jump-rule 9)
)
(defrule
    (goal produce-knights 1)
=>
    (set-goal produce-knights 0)
    (set-goal produce-scouts 1)
)
(defrule
    (goal produce-camels 1)
=>
    (set-goal produce-camels 0)
    (set-goal produce-spearmen 1)
    (set-goal produce-scouts 1)
)
(defrule
    (goal produce-eagles 1)
=>
    (set-goal produce-eagles 0)
    (set-goal produce-spearmen 1)
)
(defrule
    (goal produce-archers 1)
=>
    (set-goal produce-archers 0)
    (set-goal produce-skirmishers 1)
)
(defrule
    (goal produce-cavalry-archers 1)
=>
    (set-goal produce-cavalry-archers 0)
    (set-goal produce-skirmishers 1)
)
(defrule
    (goal produce-hand-cannoneers 1)
=>
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-skirmishers 1)
)
(defrule
    (goal produce-mangonels 1)
=>
    (set-goal produce-mangonels 0)
    (set-goal produce-skirmishers 1)
)
(defrule
    (goal produce-scorpions 1)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-skirmishers 1)
)
(defrule
    (goal produce-militia 1)
=>
    (set-goal produce-militia 0)
    (set-goal produce-spearmen 1)
)
(defrule
    (goal produce-unique-unit 1)
    (not
      (unit-available my-unique-unit)
    )
=>
    (set-goal produce-unique-unit 0)
)
(defrule
    (goal produce-eagles 1)
    (not
      (unit-available eagle-warrior-line)
    )
=>
    (set-goal produce-eagles 0)
)
(defrule
    (goal produce-cavalry-archers 1)
    (not
      (unit-available cavalry-archer-line)
    )
=>
    (set-goal produce-cavalry-archers 0)
    (set-goal produce-archers 1)
)
(defrule
    (goal produce-knights 1)
    (not
      (unit-available knight-line)
    )
=>
    (set-goal produce-knights 0)
    (set-goal produce-scouts 1)
)
(defrule
    (goal produce-scouts 1)
    (not
      (unit-available scout-cavalry-line)
    )
=>
    (set-goal produce-scouts 0)
)
(defrule
    (goal produce-camels 1)
    (not
      (unit-available camel-line)
    )
=>
    (set-goal produce-camels 0)
    (set-goal produce-spearmen 1)
)
(defrule
    (goal produce-battle-elephants 1)
    (not
      (unit-available battle-elephant-line)
    )
=>
    (set-goal produce-battle-elephants 0)
)
(defrule
    (goal produce-hand-cannoneers 1)
    (not
      (unit-available hand-cannoneer)
    )
=>
    (set-goal produce-hand-cannoneers 0)
)
(defrule
    (goal produce-trebuchets 1)
    (or
      (not
        (unit-available trebuchet)
      )
      (current-age <= castle-age)
    )
=>
    (set-goal produce-trebuchets 0)
)
(defrule
    (goal produce-rams 1)
    (not
      (unit-available battering-ram-line)
    )
=>
    (set-goal produce-rams 0)
)
(defrule
    (goal produce-mangonels 1)
    (not
      (unit-available mangonel-line)
    )
=>
    (set-goal produce-mangonels 0)
)
(defrule
    (goal produce-scorpions 1)
    (not
      (unit-available scorpion-line)
    )
=>
    (set-goal produce-scorpions 0)
)
(defrule
    (goal produce-bombard-cannons 1)
    (not
      (unit-available bombard-cannon)
    )
=>
    (set-goal produce-bombard-cannons 0)
)
(defrule
    (goal produce-condottiero 1)
    (not
      (unit-available condottiero)
    )
=>
    (set-goal produce-condottiero 0)
)
(defrule
    (goal produce-monks 1)
    (not
      (unit-available monk)
    )
=>
    (set-goal produce-monks 0)
)
(defrule
    (goal produce-archers 1)
    (not
      (research-available ri-crossbow)
    )
    (up-research-status c: ri-crossbow < research-pending)
    (current-age >= castle-age)
=>
    (set-goal produce-archers 0)
)
(defrule
    (goal produce-skirmishers 1)
    (not
      (research-available ri-elite-skirmisher)
    )
    (up-research-status c: ri-elite-skirmisher < research-pending)
    (current-age >= castle-age)
=>
    (set-goal produce-skirmishers 0)
)
(defrule
    (goal produce-scouts 1)
    (not
      (research-available ri-light-cavalry)
    )
    (up-research-status c: ri-light-cavalry < research-pending)
    (current-age >= castle-age)
=>
    (set-goal produce-scouts 0)
)
(defrule
    (goal produce-spearmen 1)
    (not
      (research-available ri-pikeman)
    )
    (up-research-status c: ri-pikeman < research-pending)
    (current-age >= castle-age)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (goal produce-cavalry-archers 1)
    (not
      (research-available ri-parthian-tactics)
    )
    (up-research-status c: ri-parthian-tactics < research-pending)
    (current-age >= castle-age)
=>
    (set-goal produce-cavalry-archers 0)
)
(defrule
    (goal produce-archers 1)
    (research-completed ri-crossbow)
    (not
      (research-available ri-arbalest)
    )
    (up-research-status c: ri-arbalest < research-pending)
    (current-age == imperial-age)
=>
    (set-goal produce-archers 0)
    (set-goal produce-cavalry-archers 1)
)
(defrule
    (goal produce-scouts 1)
    (research-completed ri-light-cavalry)
    (not
      (research-available ri-hussar)
    )
    (up-research-status c: ri-hussar < research-pending)
    (current-age == imperial-age)
=>
    (set-goal produce-scouts 0)
)
(defrule
    (goal produce-knights 1)
    (not
      (research-available ri-cavalier)
    )
    (up-research-status c: ri-cavalier < research-pending)
    (current-age == imperial-age)
=>
    (set-goal produce-knights 0)
)
(defrule
    (goal produce-camels 1)
    (not
      (research-available ri-heavy-camel)
    )
    (up-research-status c: ri-heavy-camel < research-pending)
    (current-age == imperial-age)
=>
    (set-goal produce-camels 0)
    (set-goal produce-spearmen 1)
)
(defrule
    (goal produce-rams 1)
    (not
      (research-available ri-capped-ram)
    )
    (up-research-status c: ri-capped-ram < research-pending)
    (building-type-count castle >= 1)
    (current-age == imperial-age)
=>
    (set-goal produce-rams 0)
    (set-goal produce-trebuchets 1)
)
(defrule
    (goal produce-mangonels 1)
    (not
      (research-available ri-onager)
    )
    (up-research-status c: ri-onager < research-pending)
    (current-age == imperial-age)
=>
    (set-goal produce-mangonels 0)
)
(defrule
    (goal produce-scorpions 1)
    (not
      (research-available ri-heavy-scorpion)
    )
    (up-research-status c: ri-heavy-scorpion < research-pending)
    (current-age == imperial-age)
=>
    (set-goal produce-scorpions 0)
)
(defrule
    (goal produce-spearmen 1)
    (research-completed ri-pikeman)
    (not
      (research-available ri-halberdier)
    )
    (up-research-status c: ri-halberdier < research-pending)
    (current-age == imperial-age)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (goal produce-monks 1)
    (not
      (research-available ri-theocracy)
    )
    (up-research-status c: ri-theocracy < research-pending)
    (current-age == imperial-age)
=>
    (set-goal produce-monks 0)
)
(defrule
    (goal produce-knights 1)
    (or
      (goal produce-archers 1)
      (goal produce-cavalry-archers 1)
    )
=>
    (set-goal produce-knights 0)
)
(defrule
    (goal produce-militia 1)
    (or
      (goal produce-archers 1)
      (goal produce-cavalry-archers 1)
    )
=>
    (set-goal produce-militia 0)
)
(defrule
    (goal produce-knights 1)
    (goal produce-militia 1)
=>
    (set-goal produce-militia 0)
)
(defrule
    (goal produce-knights 1)
    (goal produce-skirmishers 1)
=>
    (set-goal produce-skirmishers 0)
)
(defrule
    (goal produce-cavalry-archers 1)
    (goal produce-archers 1)
=>
    (set-goal produce-archers 0)
)
(defrule
    (goal produce-spearmen 1)
    (goal produce-camels 1)
=>
    (set-goal produce-spearmen 0)
)
(defrule
    (goal produce-knights 1)
    (goal produce-scouts 1)
=>
    (set-goal produce-scouts 0)
)
(defrule
    (goal produce-knights 1)
    (goal produce-camels 1)
=>
    (set-goal produce-knights 0)
)
(defrule
    (goal produce-battle-elephants 1)
    (goal produce-knights 1)
=>
    (set-goal produce-knights 0)
)
(defrule
    (goal produce-militia 1)
    (goal produce-condottiero 1)
=>
    (set-goal produce-militia 0)
)
(defrule
    (goal produce-mangonels 1)
    (goal produce-scorpions 1)
=>
    (set-goal produce-scorpions 0)
)
(defrule
    (goal produce-rams 1)
    (goal produce-trebuchets 1)
=>
    (set-goal produce-rams 0)
)
(defrule
    (goal produce-eagles 1)
    (goal produce-militia 1)
=>
    (set-goal produce-eagles 0)
)
(defrule
    (goal produce-rams 1)
    (unit-type-count-total battering-ram-line >= max-rams)
=>
    (set-goal produce-rams 0)
)
(defrule
    (goal produce-trebuchets 1)
    (unit-type-count-total trebuchet-set >= max-trebuchets)
=>
    (set-goal produce-trebuchets 0)
)
(defrule
    (goal produce-scouts 1)
    (goal produce-skirmishers 1)
    (current-age == feudal-age)
=>
    (set-goal produce-skirmishers 0)
)
(defrule
    (true)
=>
    (set-goal producing-infantry 0)
    (set-goal producing-cavalry 0)
    (set-goal producing-ranged 0)
    (set-goal producing-siege 0)
)
(defrule
    (or
      (goal produce-militia 1)
      (or
        (goal produce-spearmen 1)
        (or
          (goal produce-eagles 1)
          (goal produce-condottiero 1)
        )
      )
    )
=>
    (set-goal producing-infantry 1)
)
(defrule
    (or
      (goal produce-archers 1)
      (or
        (goal produce-skirmishers 1)
        (or
          (goal produce-cavalry-archers 1)
          (goal produce-hand-cannoneers 1)
        )
      )
    )
=>
    (set-goal producing-ranged 1)
)
(defrule
    (or
      (goal produce-scouts 1)
      (or
        (goal produce-knights 1)
        (or
          (goal produce-battle-elephants 1)
          (goal produce-camels 1)
        )
      )
    )
=>
    (set-goal producing-cavalry 1)
)
(defrule
    (or
      (goal produce-rams 1)
      (or
        (goal produce-mangonels 1)
        (or
          (goal produce-scorpions 1)
          (goal produce-bombard-cannons 1)
        )
      )
    )
=>
    (set-goal producing-siege 1)
)
(defrule
    (nand
      (building-type-count castle >= 2)
      (goal producing-trash 0)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (or
      (goal produce-archers 1)
      (goal produce-cavalry-archers 1)
    )
    (or
      (civ-selected berbers)
      (or
        (civ-selected briton)
        (or
          (civ-selected chinese)
          (or
            (civ-selected mayan)
            (or
              (civ-selected mongol)
              (or
                (civ-selected korean)
                (or
                  (civ-selected indian)
                  (or
                    (civ-selected italian)
                    (civ-selected burmese)
                  )
                )
              )
            )
          )
        )
      )
    )
=>
    (set-goal produce-archers 0)
    (set-goal produce-cavalry-archers 0)
    (set-goal produce-unique-unit 1)
)
(defrule
    (goal produce-militia 1)
    (or
      (civ-selected ethiopian)
      (or
        (civ-selected teutonic)
        (or
          (civ-selected viking)
          (or
            (civ-selected celtic)
            (or
              (civ-selected frankish)
              (or
                (civ-selected japanese)
                (or
                  (civ-selected malay)
                  (civ-selected malian)
                )
              )
            )
          )
        )
      )
    )
=>
    (set-goal produce-militia 0)
    (set-goal produce-unique-unit 1)
)
(defrule
    (goal produce-skirmishers 1)
    (or
      (civ-selected vietnamese)
      (civ-selected gothic)
    )
=>
    (set-goal produce-skirmishers 0)
    (set-goal produce-unique-unit 1)
)
(defrule
    (or
      (goal produce-knights 1)
      (goal produce-scouts 1)
    )
    (or
      (civ-selected byzantine)
      (or
        (civ-selected persian)
        (or
          (civ-selected slavic)
          (civ-selected magyar)
        )
      )
    )
=>
    (set-goal produce-knights 0)
    (set-goal produce-scouts 0)
    (set-goal produce-unique-unit 1)
)
(defrule
    (civ-selected incan)
    (goal produce-spearmen 1)
=>
    (set-goal produce-spearmen 0)
    (set-goal produce-unique-unit 1)
)
(defrule
    (civ-selected khmer)
    (goal produce-scorpions 1)
=>
    (set-goal produce-scorpions 0)
    (set-goal produce-unique-unit 1)
)
(defrule
    (goal produce-hand-cannoneers 1)
    (or
      (civ-selected spanish)
      (or
        (civ-selected turkish)
        (civ-selected portuguese)
      )
    )
=>
    (set-goal produce-hand-cannoneers 0)
    (set-goal produce-unique-unit 1)
)
(defrule
    (civ-selected saracen)
    (goal produce-camels 1)
=>
    (set-goal produce-camels 0)
    (set-goal produce-unique-unit 1)
)
(defrule
    (false)
=>
    (chat-local-to-self chat-8f775db70fe5e634c9f299d0e75c42a82ad7f2fc)
)
(defrule
    (goal produce-militia 1)
    (false)
=>
    (chat-local-to-self chat-1bf89ec1f98e82003ce4f980b4b067e58edaf4d8)
)
(defrule
    (goal produce-spearmen 1)
    (false)
=>
    (chat-local-to-self chat-080814ba91c1353d2f19b339640aa5dc57e7fa81)
)
(defrule
    (goal produce-condottiero 1)
    (false)
=>
    (chat-local-to-self chat-363ffec7dd0a9cd80403c686ca471da884772f6e)
)
(defrule
    (goal produce-archers 1)
    (false)
=>
    (chat-local-to-self chat-ef51e5603d8786964a2c6039c9e1cb794abd2324)
)
(defrule
    (goal produce-skirmishers 1)
    (false)
=>
    (chat-local-to-self chat-6b25242d1191614820a635dcc4fb519ce8cd2b19)
)
(defrule
    (goal produce-scouts 1)
    (false)
=>
    (chat-local-to-self chat-4c9be25f5e4f78dec3ce52791e58e3c24239a6c3)
)
(defrule
    (goal produce-knights 1)
    (false)
=>
    (chat-local-to-self chat-b1bd258d5af7cd5de7303540dbfb300cb5b490d0)
)
(defrule
    (goal produce-rams 1)
    (false)
=>
    (chat-local-to-self chat-ba459322adb9e72fc7957dd67a62d1920fd83d3e)
)
(defrule
    (goal produce-mangonels 1)
    (false)
=>
    (chat-local-to-self chat-9c2def26e0794d1347b396dc9ce9934e8b1f948b)
)
(defrule
    (goal produce-scorpions 1)
    (false)
=>
    (chat-local-to-self chat-df1515f82e2c4e8a08bdd64fb50222ea249b212a)
)
(defrule
    (goal produce-unique-unit 1)
    (false)
=>
    (chat-local-to-self chat-3eab6e3969bbd2f9906caa3e2216628658886b46)
)
(defrule
    (goal produce-monks 1)
    (false)
=>
    (chat-local-to-self chat-32e9a55d0d786d7b08fa3d04ec41210095d5041b)
)
(defrule
    (goal produce-trebuchets 1)
    (false)
=>
    (chat-local-to-self chat-c1527f5f4a9b1a91515e2d5e096a2c185d4e8c58)
)
(defrule
    (goal produce-battle-elephants 1)
    (false)
=>
    (chat-local-to-self chat-25f226dfcfaa010b71f8b1ff606dd119d2c4bebb)
)
(defrule
    (goal produce-camels 1)
    (false)
=>
    (chat-local-to-self chat-4ebecc54e7bed019c313b95e072da77b98cdd031)
)
(defrule
    (goal produce-cavalry-archers 1)
    (false)
=>
    (chat-local-to-self chat-f53bef687d16989e8da4065d3fc47d7c06a02eee)
)
(defrule
    (goal produce-eagles 1)
    (false)
=>
    (chat-local-to-self chat-49362e1ef21534ee17538849a64e5f190e7e1c52)
)
(defrule
    (goal produce-hand-cannoneers 1)
    (false)
=>
    (chat-local-to-self chat-e947f6dfd3359ca9759572d3a120ddfa89594453)
)
(defrule
    (goal produce-bombard-cannons 1)
    (false)
=>
    (chat-local-to-self chat-2b7dbde44c1d62cb248c73980e5dc1134075420d)
)
(defrule
    (goal team-game 0)
    (goal free-for-all 0)
=>
    (enable-timer 2 300)
    (disable-self)
)
(defrule
    (timer-triggered 2)
    (goal team-game 0)
    (goal free-for-all 0)
=>
    (up-send-scout group-type-land-explore scout-opposite)
    (disable-timer 2)
    (enable-timer 2 300)
)
(defrule
    (true)
=>
    (up-send-scout group-type-land-explore scout-opposite)
    (enable-timer 3 300)
    (disable-self)
)
(defrule
    (town-under-attack)
    (military-population < min-army)
    (timer-triggered 3)
=>
    (set-goal taunt-allies 12)
)
(defrule
    (timer-triggered 3)
=>
    (disable-timer 3)
    (enable-timer 3 300)
)
(defrule
    (true)
=>
    (set-strategic-number sn-home-exploration-time 0)
    (disable-self)
)
(defrule
    (town-under-attack)
    (current-age == castle-age)
    (building-type-count-total castle == 0)
=>
    (set-goal taunt-allies 6)
    (disable-self)
)
(defrule
    (can-research-with-escrow ri-heresy)
    (players-unit-type-count any-enemy monk >= 10)
=>
    (release-escrow gold)
    (research ri-heresy)
)
(defrule
    (can-research-with-escrow ri-devotion)
    (players-unit-type-count any-enemy monk >= 10)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-devotion)
)
(defrule
    (can-research-with-escrow ri-faith)
    (players-unit-type-count any-enemy monk >= 10)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-faith)
)
(defrule
    (can-research-with-escrow my-unique-research)
=>
    (release-escrow wood)
    (release-escrow food)
    (release-escrow gold)
    (research my-unique-research)
)
(defrule
    (nor
      (goal producing-infantry 1)
      (unit-type-count infantry-unit-class >= max-basic-units)
    )
=>
    (up-jump-rule 22)
)
(defrule
    (can-research-with-escrow ri-man-at-arms)
    (or
      (goal produce-militia 1)
      (unit-type-count militiaman-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-man-at-arms)
)
(defrule
    (can-research-with-escrow ri-long-swordsman)
    (or
      (goal produce-militia 1)
      (unit-type-count militiaman-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-long-swordsman)
)
(defrule
    (can-research-with-escrow ri-two-handed-swordsman)
    (or
      (goal produce-militia 1)
      (unit-type-count militiaman-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-two-handed-swordsman)
)
(defrule
    (can-research-with-escrow ri-champion)
    (or
      (goal produce-militia 1)
      (unit-type-count militiaman-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-champion)
)
(defrule
    (can-research-with-escrow ri-pikeman)
    (or
      (goal produce-spearmen 1)
      (unit-type-count spearman-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-pikeman)
)
(defrule
    (can-research-with-escrow ri-halberdier)
    (or
      (goal produce-spearmen 1)
      (unit-type-count spearman-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-halberdier)
)
(defrule
    (can-research-with-escrow ri-eagle-warrior)
    (or
      (goal produce-eagles 1)
      (unit-type-count eagle-warrior-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-eagle-warrior)
)
(defrule
    (can-research-with-escrow ri-elite-eagle-warrior)
    (or
      (goal produce-eagles 1)
      (unit-type-count eagle-warrior-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-elite-eagle-warrior)
)
(defrule
    (can-research-with-escrow ri-forging)
=>
    (release-escrow food)
    (research ri-forging)
)
(defrule
    (can-research-with-escrow ri-scale-mail)
=>
    (release-escrow food)
    (research ri-scale-mail)
)
(defrule
    (can-research-with-escrow ri-iron-casting)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-iron-casting)
)
(defrule
    (can-research-with-escrow ri-chain-mail)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-chain-mail)
)
(defrule
    (can-research-with-escrow ri-blast-furnace)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-blast-furnace)
)
(defrule
    (can-research-with-escrow ri-plate-mail)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-plate-mail)
)
(defrule
    (can-research-with-escrow ri-squires)
=>
    (release-escrow food)
    (research ri-squires)
)
(defrule
    (can-research-with-escrow ri-tracking)
    (unit-type-count-total infantry-unit-class > max-basic-units)
=>
    (release-escrow food)
    (research ri-tracking)
)
(defrule
    (can-research-with-escrow ri-arson)
    (unit-type-count-total infantry-unit-class > max-basic-units)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-arson)
)
(defrule
    (can-build-with-escrow barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < max-imperial-military-buildings)
    (or
      (current-age == imperial-age)
      (death-match-game)
    )
    (goal producing-infantry 1)
=>
    (release-escrow wood)
    (build barracks)
)
(defrule
    (can-build-with-escrow barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < max-castle-military-buildings)
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (current-age == castle-age)
    (goal producing-infantry 1)
=>
    (release-escrow wood)
    (build barracks)
)
(defrule
    (can-build-with-escrow barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (goal producing-cavalry 1)
    (building-type-count-total stable >= 2)
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (not
      (current-age == castle-age)
    )
    (goal producing-infantry 1)
=>
    (release-escrow wood)
    (build barracks)
)
(defrule
    (can-build-with-escrow barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
    (nand
      (goal producing-cavalry 1)
      (building-type-count-total stable >= 2)
    )
    (goal producing-ranged 1)
    (building-type-count-total archery-range >= 2)
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (not
      (current-age == castle-age)
    )
    (goal producing-infantry 1)
=>
    (release-escrow wood)
    (build barracks)
)
(defrule
    (can-build-with-escrow barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < max-feudal-military-buildings)
    (nand
      (goal producing-cavalry 1)
      (building-type-count-total stable >= 2)
    )
    (nand
      (goal producing-ranged 1)
      (building-type-count-total archery-range >= 2)
    )
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (not
      (current-age == castle-age)
    )
    (goal producing-infantry 1)
=>
    (release-escrow wood)
    (build barracks)
)
(defrule
    (nor
      (goal producing-ranged 1)
      (unit-type-count ranged-unit-class >= max-basic-units)
    )
=>
    (up-jump-rule 25)
)
(defrule
    (can-research-with-escrow ri-crossbow)
    (or
      (goal produce-archers 1)
      (unit-type-count archer-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-crossbow)
)
(defrule
    (can-research-with-escrow ri-arbalest)
    (or
      (goal produce-archers 1)
      (unit-type-count archer-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-arbalest)
)
(defrule
    (can-research-with-escrow ri-elite-skirmisher)
    (or
      (goal produce-skirmishers 1)
      (unit-type-count skirmisher-line >= max-basic-units)
    )
=>
    (release-escrow wood)
    (release-escrow gold)
    (research ri-elite-skirmisher)
)
(defrule
    (can-research-with-escrow ri-imperial-skirmisher)
    (or
      (goal produce-skirmishers 1)
      (unit-type-count skirmisher-line >= max-basic-units)
    )
=>
    (release-escrow wood)
    (release-escrow gold)
    (research ri-imperial-skirmisher)
)
(defrule
    (can-research-with-escrow ri-heavy-cavalry-archer)
    (or
      (goal produce-cavalry-archers 1)
      (unit-type-count cavalry-archer-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-heavy-cavalry-archer)
)
(defrule
    (can-research-with-escrow ri-parthian-tactics)
    (or
      (goal produce-cavalry-archers 1)
      (unit-type-count cavalry-archer-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-parthian-tactics)
)
(defrule
    (can-build-with-escrow stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (or
      (goal produce-cavalry-archers 1)
      (unit-type-count cavalry-archer-line >= max-basic-units)
    )
=>
    (release-escrow wood)
    (build stable)
)
(defrule
    (can-research-with-escrow ri-bloodlines)
    (or
      (goal produce-cavalry-archers 1)
      (unit-type-count cavalry-archer-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-bloodlines)
)
(defrule
    (can-research-with-escrow ri-husbandry)
    (or
      (goal produce-cavalry-archers 1)
      (unit-type-count cavalry-archer-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (research ri-husbandry)
)
(defrule
    (true)
=>
    (set-goal 87 0)
    (disable-self)
)
(defrule
    (can-research-with-escrow ri-padded-archer-armor)
    (goal 87 1)
=>
    (release-escrow food)
    (research ri-padded-archer-armor)
    (set-goal 87 0)
)
(defrule
    (can-research-with-escrow ri-fletching)
    (goal 87 0)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-fletching)
    (set-goal 87 1)
)
(defrule
    (true)
=>
    (set-goal 88 0)
    (disable-self)
)
(defrule
    (can-research-with-escrow ri-leather-archer-armor)
    (goal 88 1)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-leather-archer-armor)
    (set-goal 88 0)
)
(defrule
    (can-research-with-escrow ri-bodkin-arrow)
    (goal 88 0)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-bodkin-arrow)
    (set-goal 88 1)
)
(defrule
    (true)
=>
    (set-goal 89 0)
    (disable-self)
)
(defrule
    (can-research-with-escrow ri-ring-archer-armor)
    (goal 89 1)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-ring-archer-armor)
    (set-goal 89 0)
)
(defrule
    (can-research-with-escrow ri-bracer)
    (goal 89 0)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-bracer)
    (set-goal 89 1)
)
(defrule
    (can-research-with-escrow ri-ballistics)
    (unit-type-count-total ranged-unit-class > max-basic-units)
=>
    (release-escrow wood)
    (release-escrow gold)
    (research ri-ballistics)
)
(defrule
    (can-research-with-escrow ri-thumb-ring)
    (unit-type-count-total ranged-unit-class > max-basic-units)
=>
    (release-escrow food)
    (release-escrow wood)
    (research ri-thumb-ring)
)
(defrule
    (can-build-with-escrow archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < max-imperial-military-buildings)
    (or
      (current-age == imperial-age)
      (death-match-game)
    )
    (goal producing-ranged 1)
=>
    (release-escrow wood)
    (build archery-range)
)
(defrule
    (can-build-with-escrow archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < max-castle-military-buildings)
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (current-age == castle-age)
    (goal producing-ranged 1)
=>
    (release-escrow wood)
    (build archery-range)
)
(defrule
    (can-build-with-escrow archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (goal producing-cavalry 1)
    (building-type-count-total stable >= 2)
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (not
      (current-age == castle-age)
    )
    (goal producing-ranged 1)
=>
    (release-escrow wood)
    (build archery-range)
)
(defrule
    (can-build-with-escrow archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < 1)
    (nand
      (goal producing-cavalry 1)
      (building-type-count-total stable >= 2)
    )
    (goal producing-infantry 1)
    (building-type-count-total barracks >= 2)
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (not
      (current-age == castle-age)
    )
    (goal producing-ranged 1)
=>
    (release-escrow wood)
    (build archery-range)
)
(defrule
    (can-build-with-escrow archery-range)
    (up-pending-objects c: archery-range < 5)
    (building-type-count-total archery-range < max-feudal-military-buildings)
    (nand
      (goal producing-cavalry 1)
      (building-type-count-total stable >= 2)
    )
    (nand
      (goal producing-infantry 1)
      (building-type-count-total barracks >= 2)
    )
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (not
      (current-age == castle-age)
    )
    (goal producing-ranged 1)
=>
    (release-escrow wood)
    (build archery-range)
)
(defrule
    (nor
      (goal producing-cavalry 1)
      (unit-type-count cavalry-unit-class >= max-basic-units)
    )
=>
    (up-jump-rule 20)
)
(defrule
    (can-research-with-escrow ri-cavalier)
    (or
      (goal produce-knights 1)
      (unit-type-count knight-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-cavalier)
)
(defrule
    (can-research-with-escrow ri-paladin)
    (or
      (goal produce-knights 1)
      (unit-type-count knight-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-paladin)
)
(defrule
    (can-research-with-escrow ri-light-cavalry)
    (or
      (goal produce-scouts 1)
      (unit-type-count scout-cavalry-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-light-cavalry)
)
(defrule
    (can-research-with-escrow ri-hussar)
    (or
      (goal produce-scouts 1)
      (unit-type-count scout-cavalry-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-hussar)
)
(defrule
    (can-research-with-escrow ri-elite-battle-elephant)
    (or
      (goal produce-battle-elephants 1)
      (unit-type-count battle-elephant-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-elite-battle-elephant)
)
(defrule
    (can-research-with-escrow ri-heavy-camel)
    (or
      (goal produce-camels 1)
      (unit-type-count camel-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-heavy-camel)
)
(defrule
    (can-research-with-escrow ri-imperial-camel)
    (or
      (goal produce-camels 1)
      (unit-type-count camel-line >= max-basic-units)
    )
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-imperial-camel)
)
(defrule
    (can-research-with-escrow ri-forging)
=>
    (release-escrow food)
    (research ri-forging)
)
(defrule
    (can-research-with-escrow ri-scale-barding)
=>
    (release-escrow food)
    (research ri-scale-barding)
)
(defrule
    (can-research-with-escrow ri-iron-casting)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-iron-casting)
)
(defrule
    (can-research-with-escrow ri-chain-barding)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-chain-barding)
)
(defrule
    (can-research-with-escrow ri-blast-furnace)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-blast-furnace)
)
(defrule
    (can-research-with-escrow ri-plate-barding)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-plate-barding)
)
(defrule
    (can-research-with-escrow ri-bloodlines)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-bloodlines)
)
(defrule
    (can-research-with-escrow ri-husbandry)
=>
    (release-escrow food)
    (research ri-husbandry)
)
(defrule
    (can-build-with-escrow stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < max-imperial-military-buildings)
    (or
      (current-age == imperial-age)
      (death-match-game)
    )
    (goal producing-cavalry 1)
=>
    (release-escrow wood)
    (build stable)
)
(defrule
    (can-build-with-escrow stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < max-castle-military-buildings)
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (current-age == castle-age)
    (goal producing-cavalry 1)
=>
    (release-escrow wood)
    (build stable)
)
(defrule
    (can-build-with-escrow stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (goal producing-infantry 1)
    (building-type-count-total barracks >= 2)
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (not
      (current-age == castle-age)
    )
    (goal producing-cavalry 1)
=>
    (release-escrow wood)
    (build stable)
)
(defrule
    (can-build-with-escrow stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < 1)
    (nand
      (goal producing-infantry 1)
      (building-type-count-total barracks >= 2)
    )
    (goal producing-ranged 1)
    (building-type-count-total archery-range >= 2)
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (not
      (current-age == castle-age)
    )
    (goal producing-cavalry 1)
=>
    (release-escrow wood)
    (build stable)
)
(defrule
    (can-build-with-escrow stable)
    (up-pending-objects c: stable < 5)
    (building-type-count-total stable < max-feudal-military-buildings)
    (nand
      (goal producing-infantry 1)
      (building-type-count-total barracks >= 2)
    )
    (nand
      (goal producing-ranged 1)
      (building-type-count-total archery-range >= 2)
    )
    (not
      (current-age == imperial-age)
    )
    (not
      (death-match-game)
    )
    (not
      (current-age == castle-age)
    )
    (goal producing-cavalry 1)
=>
    (release-escrow wood)
    (build stable)
)
(defrule
    (not
      (goal producing-siege 1)
    )
=>
    (up-jump-rule 8)
)
(defrule
    (can-research-with-escrow ri-capped-ram)
    (goal produce-rams 1)
=>
    (release-escrow food)
    (research ri-capped-ram)
)
(defrule
    (can-research-with-escrow ri-siege-ram)
    (goal produce-rams 1)
=>
    (release-escrow food)
    (research ri-siege-ram)
)
(defrule
    (can-research-with-escrow ri-onager)
    (goal produce-mangonels 1)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-onager)
)
(defrule
    (can-research-with-escrow ri-siege-onager)
    (goal produce-mangonels 1)
=>
    (release-escrow food)
    (release-escrow gold)
    (research ri-siege-onager)
)
(defrule
    (can-research-with-escrow ri-heavy-scorpion)
    (goal produce-scorpions 1)
=>
    (release-escrow food)
    (release-escrow wood)
    (research ri-heavy-scorpion)
)
(defrule
    (can-research-with-escrow ri-siege-engineers)
=>
    (release-escrow wood)
    (release-escrow food)
    (research ri-siege-engineers)
)
(defrule
    (can-build siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 2)
    (current-age == imperial-age)
=>
    (build siege-workshop)
)
(defrule
    (can-build-with-escrow siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
    (not
      (current-age == imperial-age)
    )
=>
    (release-escrow wood)
    (build siege-workshop)
)
(defrule
    (can-research-with-escrow ri-redemption)
    (goal produce-monks 1)
=>
    (release-escrow gold)
    (research ri-redemption)
)
(defrule
    (can-research-with-escrow ri-sanctity)
    (goal produce-monks 1)
=>
    (release-escrow gold)
    (research ri-sanctity)
)
(defrule
    (can-research-with-escrow ri-fervor)
    (goal produce-monks 1)
=>
    (release-escrow gold)
    (research ri-fervor)
)
(defrule
    (can-research-with-escrow ri-illumination)
    (goal produce-monks 1)
=>
    (release-escrow gold)
    (research ri-illumination)
)
(defrule
    (can-research-with-escrow ri-block-printing)
    (goal produce-monks 1)
=>
    (release-escrow gold)
    (research ri-block-printing)
)
(defrule
    (can-research-with-escrow ri-theocracy)
    (goal produce-monks 1)
=>
    (release-escrow gold)
    (research ri-theocracy)
)
(defrule
    (can-research-with-escrow ri-atonement)
    (players-unit-type-count any-enemy monk >= 1)
    (goal produce-monks 1)
=>
    (release-escrow gold)
    (research ri-atonement)
)
(defrule
    (can-build monastery)
    (up-pending-objects c: monastery < 5)
    (building-type-count-total monastery < max-castle-military-buildings)
    (goal produce-monks 1)
=>
    (build monastery)
)
(defrule
    (can-research-with-escrow my-unique-unit-upgrade)
    (goal produce-unique-unit 1)
=>
    (release-escrow wood)
    (release-escrow food)
    (release-escrow gold)
    (research my-unique-unit-upgrade)
)
(defrule
    (not
      (military-population < max-army)
    )
=>
    (up-jump-rule 33)
)
(defrule
    (or
      (up-compare-goal non-escrowed-wood > 100)
      (or
        (military-population < min-army)
        (or
          (town-under-attack)
          (goal attacking 1)
        )
      )
    )
=>
    (set-goal make-wood-unit 1)
)
(defrule
    (not
      (up-compare-goal non-escrowed-wood > 100)
    )
    (nor
      (military-population < min-army)
      (or
        (town-under-attack)
        (goal attacking 1)
      )
    )
=>
    (set-goal make-wood-unit 0)
)
(defrule
    (or
      (up-compare-goal non-escrowed-food > 100)
      (or
        (military-population < min-army)
        (or
          (town-under-attack)
          (goal attacking 1)
        )
      )
    )
=>
    (set-goal make-food-unit 1)
)
(defrule
    (not
      (up-compare-goal non-escrowed-food > 100)
    )
    (nor
      (military-population < min-army)
      (or
        (town-under-attack)
        (goal attacking 1)
      )
    )
=>
    (set-goal make-food-unit 0)
)
(defrule
    (goal producing-trash 0)
    (building-type-count castle >= 1)
    (unit-type-count-total trebuchet-set < 1)
    (goal produce-trebuchets 1)
    (military-population >= min-army)
=>
    (chat-local-to-self chat-11db29c3fa2e13c26abc575755f05e11aa166df5)
)
(defrule
    (up-compare-goal escrowed-wood < 200)
    (goal producing-trash 0)
    (building-type-count castle >= 1)
    (unit-type-count-total trebuchet-set < 1)
    (goal produce-trebuchets 1)
    (military-population >= min-army)
=>
    (set-escrow-percentage wood 100)
)
(defrule
    (up-compare-goal escrowed-gold < 200)
    (goal producing-trash 0)
    (building-type-count castle >= 1)
    (unit-type-count-total trebuchet-set < 1)
    (goal produce-trebuchets 1)
    (military-population >= min-army)
=>
    (set-escrow-percentage gold 100)
)
(defrule
    (can-train-with-escrow trebuchet)
    (unit-type-count-total trebuchet-set < 1)
    (goal produce-trebuchets 1)
    (military-population >= min-army)
=>
    (release-escrow wood)
    (release-escrow gold)
    (train trebuchet)
)
(defrule
    (can-train trebuchet)
    (unit-type-count-total trebuchet-set < max-trebuchets)
    (goal make-wood-unit 1)
    (goal produce-trebuchets 1)
    (military-population >= min-army)
=>
    (train trebuchet)
)
(defrule
    (goal producing-trash 0)
    (building-type-count siege-workshop >= 1)
    (or
      (goal military-superiority 1)
      (and
        (town-under-attack)
        (enemy-buildings-in-town)
      )
    )
    (unit-type-count-total battering-ram-line < 2)
    (goal produce-rams 1)
    (military-population >= min-army)
=>
    (chat-local-to-self chat-7144911e198ce84066e1af2d8d11c90306e746e3)
)
(defrule
    (up-compare-goal escrowed-wood < 200)
    (goal producing-trash 0)
    (building-type-count siege-workshop >= 1)
    (or
      (goal military-superiority 1)
      (and
        (town-under-attack)
        (enemy-buildings-in-town)
      )
    )
    (unit-type-count-total battering-ram-line < 2)
    (goal produce-rams 1)
    (military-population >= min-army)
=>
    (set-escrow-percentage wood 100)
)
(defrule
    (up-compare-goal escrowed-gold < 200)
    (goal producing-trash 0)
    (building-type-count siege-workshop >= 1)
    (or
      (goal military-superiority 1)
      (and
        (town-under-attack)
        (enemy-buildings-in-town)
      )
    )
    (unit-type-count-total battering-ram-line < 2)
    (goal produce-rams 1)
    (military-population >= min-army)
=>
    (set-escrow-percentage gold 100)
)
(defrule
    (can-train-with-escrow battering-ram-line)
    (unit-type-count-total battering-ram-line < 2)
    (goal produce-rams 1)
    (military-population >= min-army)
=>
    (release-escrow wood)
    (release-escrow gold)
    (train battering-ram-line)
)
(defrule
    (can-train battering-ram-line)
    (unit-type-count-total battering-ram-line < max-rams)
    (goal make-wood-unit 1)
    (goal produce-rams 1)
    (military-population >= min-army)
=>
    (train battering-ram-line)
)
(defrule
    (can-train monk)
    (goal produce-monks 1)
=>
    (train monk)
)
(defrule
    (can-train militiaman-line)
    (unit-type-count-total militiaman-line < max-basic-units)
    (current-age == feudal-age)
    (not
      (research-completed ri-man-at-arms)
    )
    (goal produce-militia 1)
    (goal make-food-unit 1)
=>
    (train militiaman-line)
)
(defrule
    (can-train militiaman-line)
    (nand
      (current-age == feudal-age)
      (not
        (research-completed ri-man-at-arms)
      )
    )
    (goal produce-militia 1)
    (goal make-food-unit 1)
=>
    (train militiaman-line)
)
(defrule
    (can-train spearman-line)
    (unit-type-count-total spearman-line < max-basic-units)
    (current-age == castle-age)
    (not
      (research-completed ri-pikeman)
    )
    (goal produce-spearmen 1)
    (goal make-wood-unit 1)
    (goal make-food-unit 1)
=>
    (train spearman-line)
)
(defrule
    (can-train spearman-line)
    (nand
      (current-age == castle-age)
      (not
        (research-completed ri-pikeman)
      )
    )
    (goal produce-spearmen 1)
    (goal make-wood-unit 1)
    (goal make-food-unit 1)
=>
    (train spearman-line)
)
(defrule
    (can-train skirmisher-line)
    (goal produce-skirmishers 1)
    (goal make-wood-unit 1)
    (goal make-food-unit 1)
=>
    (train skirmisher-line)
)
(defrule
    (can-train knight-line)
    (goal produce-knights 1)
    (goal make-food-unit 1)
=>
    (train knight-line)
)
(defrule
    (can-train scout-cavalry-line)
    (goal produce-scouts 1)
    (goal make-food-unit 1)
=>
    (train scout-cavalry-line)
)
(defrule
    (can-train my-unique-unit)
    (goal produce-unique-unit 1)
    (goal make-food-unit 1)
=>
    (train my-unique-unit)
)
(defrule
    (can-train battle-elephant-line)
    (goal produce-battle-elephants 1)
    (goal make-food-unit 1)
=>
    (train battle-elephant-line)
)
(defrule
    (can-train camel-line)
    (goal produce-camels 1)
    (goal make-food-unit 1)
=>
    (train camel-line)
)
(defrule
    (can-train eagle-warrior-line)
    (goal produce-eagles 1)
    (goal make-food-unit 1)
=>
    (train eagle-warrior-line)
)
(defrule
    (can-train hand-cannoneer)
    (goal produce-hand-cannoneers 1)
    (goal make-food-unit 1)
=>
    (train hand-cannoneer)
)
(defrule
    (can-train condottiero)
    (goal produce-condottiero 1)
    (goal make-food-unit 1)
=>
    (train condottiero)
)
(defrule
    (can-train archer-line)
    (goal produce-archers 1)
    (goal make-wood-unit 1)
=>
    (train archer-line)
)
(defrule
    (can-train mangonel-line)
    (goal produce-mangonels 1)
    (goal make-wood-unit 1)
=>
    (train mangonel-line)
)
(defrule
    (can-train scorpion-line)
    (goal produce-scorpions 1)
    (goal make-wood-unit 1)
=>
    (train scorpion-line)
)
(defrule
    (can-train cavalry-archer-line)
    (goal produce-cavalry-archers 1)
    (goal make-wood-unit 1)
=>
    (train cavalry-archer-line)
)
(defrule
    (can-train bombard-cannon)
    (goal produce-bombard-cannons 1)
    (goal make-wood-unit 1)
=>
    (train bombard-cannon)
)
(defrule
    (building-type-count-total barracks == 0)
=>
    (set-escrow-percentage wood 100)
)
(defrule
    (can-build-with-escrow barracks)
    (up-pending-objects c: barracks < 5)
    (building-type-count-total barracks < 1)
=>
    (release-escrow wood)
    (build barracks)
)
(defrule
    (can-build-with-escrow blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (or
      (building-type-count-total barracks >= 2)
      (or
        (building-type-count-total stable >= 2)
        (building-type-count-total archery-range >= 2)
      )
    )
=>
    (release-escrow wood)
    (build blacksmith)
)
(defrule
    (or
      (building-type-count-total barracks >= 2)
      (or
        (building-type-count-total stable >= 2)
        (building-type-count-total archery-range >= 2)
      )
    )
=>
    (set-goal research-economy-upgrades 1)
    (disable-self)
)
(defrule
    (or
      (goal producing-infantry 1)
      (or
        (goal producing-ranged 1)
        (goal producing-cavalry 1)
      )
    )
    (not
      (building-type-count-total barracks >= 2)
    )
    (nor
      (building-type-count-total stable >= 2)
      (building-type-count-total archery-range >= 2)
    )
    (up-research-status c: feudal-age >= research-pending)
    (civilian-population >= 20)
=>
    (set-escrow-percentage wood 100)
)
(defrule
    (or
      (goal producing-infantry 1)
      (or
        (goal producing-ranged 1)
        (goal producing-cavalry 1)
      )
    )
    (not
      (building-type-count-total barracks >= 2)
    )
    (nor
      (building-type-count-total stable >= 2)
      (building-type-count-total archery-range >= 2)
    )
    (up-research-status c: feudal-age >= research-pending)
    (civilian-population >= 20)
=>
    (set-goal research-economy-upgrades 0)
    (disable-self)
)
(defrule
    (goal producing-infantry 1)
    (building-type-count-total barracks < 1)
    (not
      (town-under-attack)
    )
    (civilian-population >= 20)
=>
    (set-escrow-percentage wood 100)
)
(defrule
    (goal producing-cavalry 1)
    (building-type-count-total stable < 1)
    (not
      (town-under-attack)
    )
    (civilian-population >= 20)
=>
    (set-escrow-percentage wood 100)
)
(defrule
    (goal producing-ranged 1)
    (building-type-count-total archery-range < 1)
    (not
      (town-under-attack)
    )
    (civilian-population >= 20)
=>
    (set-escrow-percentage wood 100)
)
(defrule
    (can-build-with-escrow siege-workshop)
    (up-pending-objects c: siege-workshop < 5)
    (building-type-count-total siege-workshop < 1)
=>
    (release-escrow wood)
    (build siege-workshop)
)
(defrule
    (true)
=>
    (enable-timer 4 300)
    (disable-self)
)
(defrule
    (not
      (timer-triggered 4)
    )
=>
    (up-jump-rule 29)
)
(defrule
    (true)
=>
    (set-strategic-number sn-enable-training-queue 1)
)
(defrule
    (or
      (not
        (research-completed ri-loom)
      )
      (not
        (research-completed feudal-age)
      )
    )
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (or
      (not
        (research-completed castle-age)
      )
      (not
        (research-completed ri-wheel-barrow)
      )
    )
    (up-research-status c: feudal-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal producing-infantry 1)
    (not
      (research-completed ri-tracking)
    )
    (up-research-status c: feudal-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-militia 1)
    (not
      (research-completed ri-man-at-arms)
    )
    (up-research-status c: feudal-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal producing-cavalry 1)
    (not
      (research-completed ri-bloodlines)
    )
    (research-available ri-bloodlines)
    (up-research-status c: feudal-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (or
      (not
        (research-completed imperial-age)
      )
      (not
        (research-completed ri-hand-cart)
      )
    )
    (up-research-status c: castle-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal producing-ranged 1)
    (not
      (research-completed ri-thumb-ring)
    )
    (up-research-status c: castle-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (not
      (research-completed ri-crossbow)
    )
    (research-available ri-crossbow)
    (goal produce-archers 1)
    (up-research-status c: castle-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (not
      (research-completed ri-elite-skirmisher)
    )
    (research-available ri-elite-skirmisher)
    (goal produce-skirmishers 1)
    (up-research-status c: castle-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (or
      (and
        (not
          (research-completed ri-squires)
        )
        (research-available ri-squires)
      )
      (and
        (not
          (research-completed ri-arson)
        )
        (research-available ri-arson)
      )
    )
    (goal producing-infantry 1)
    (up-research-status c: castle-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-militia 1)
    (not
      (research-completed ri-long-swordsman)
    )
    (up-research-status c: castle-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-spearmen 1)
    (not
      (research-completed ri-pikeman)
    )
    (research-available ri-pikeman)
    (up-research-status c: castle-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-eagles 1)
    (not
      (research-completed ri-eagle-warrior)
    )
    (up-research-status c: castle-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal producing-cavalry 1)
    (not
      (research-completed ri-husbandry)
    )
    (research-available ri-husbandry)
    (up-research-status c: castle-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-scouts 1)
    (not
      (research-completed ri-light-cavalry)
    )
    (research-available ri-light-cavalry)
    (up-research-status c: castle-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (not
      (research-completed ri-arbalest)
    )
    (research-available ri-arbalest)
    (goal produce-archers 1)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (not
      (research-completed ri-imperial-skirmisher)
    )
    (research-available ri-imperial-skirmisher)
    (goal produce-skirmishers 1)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (or
      (and
        (not
          (research-completed ri-heavy-cavalry-archer)
        )
        (research-available ri-heavy-cavalry-archer)
      )
      (and
        (not
          (research-completed ri-parthian-tactics)
        )
        (research-available ri-parthian-tactics)
      )
    )
    (goal produce-cavalry-archers 1)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (or
      (and
        (not
          (research-completed ri-two-handed-swordsman)
        )
        (research-available ri-two-handed-swordsman)
      )
      (and
        (not
          (research-completed ri-champion)
        )
        (research-available ri-champion)
      )
    )
    (goal produce-militia 1)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-spearmen 1)
    (not
      (research-completed ri-halberdier)
    )
    (research-available ri-halberdier)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-eagles 1)
    (not
      (research-completed ri-elite-eagle-warrior)
    )
    (research-available ri-elite-eagle-warrior)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-scouts 1)
    (not
      (research-completed ri-hussar)
    )
    (research-available ri-hussar)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (or
      (and
        (not
          (research-completed ri-cavalier)
        )
        (research-available ri-cavalier)
      )
      (and
        (not
          (research-completed ri-paladin)
        )
        (research-available ri-paladin)
      )
    )
    (goal produce-knights 1)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-camels 1)
    (not
      (research-completed ri-heavy-camel)
    )
    (research-available ri-heavy-camel)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-battle-elephants 1)
    (not
      (research-completed ri-elite-battle-elephant)
    )
    (research-available ri-elite-battle-elephant)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (or
      (and
        (not
          (research-completed ri-capped-ram)
        )
        (research-available ri-capped-ram)
      )
      (and
        (not
          (research-completed ri-siege-ram)
        )
        (research-available ri-siege-ram)
      )
    )
    (goal produce-rams 1)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (or
      (and
        (not
          (research-completed ri-onager)
        )
        (research-available ri-onager)
      )
      (and
        (not
          (research-completed ri-siege-onager)
        )
        (research-available ri-siege-onager)
      )
    )
    (goal produce-mangonels 1)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (goal produce-scorpions 1)
    (not
      (research-completed ri-heavy-scorpion)
    )
    (research-available ri-heavy-scorpion)
    (up-research-status c: imperial-age >= research-pending)
    (strategic-number sn-enable-training-queue == 1)
=>
    (set-strategic-number sn-enable-training-queue 0)
)
(defrule
    (timer-triggered 4)
=>
    (disable-timer 4)
    (enable-timer 4 300)
)
(defrule
    (not
      (true)
    )
=>
    (up-jump-rule 20)
)
(defrule
    (true)
=>
    (set-goal attacking 0)
    (set-goal retarget 0)
)
(defrule
    (true)
=>
    (set-goal retarget 1)
    (enable-timer 5 600)
    (disable-self)
)
(defrule
    (timer-triggered 5)
=>
    (set-goal retarget 1)
    (disable-timer 5)
    (enable-timer 5 600)
)
(defrule
    (or
      (goal retarget 1)
      (not
        (player-valid target-player)
      )
    )
=>
    (up-find-player enemy find-closest 8)
    (up-modify-sn sn-target-player-number g:= 8)
)
(defrule
    (or
      (military-population >= max-army)
      (and
        (population-headroom == 0)
        (housing-headroom == 0)
      )
    )
    (goal turtle 1)
    (building-type-count castle < 3)
=>
    (chat-local-to-self chat-9d97f0c3c952c2083d7923fbea71fc38d4222e6c)
    (set-goal attacking 1)
)
(defrule
    (nand
      (goal turtle 1)
      (building-type-count castle < 3)
    )
    (population >= 195)
=>
    (chat-local-to-self chat-43b2b04ac6a028b687a2f0015de89e6fdd73d5ea)
    (set-goal attacking 1)
)
(defrule
    (military-population >= 5)
    (up-research-status c: feudal-age < research-pending)
    (current-age == dark-age)
    (nand
      (goal turtle 1)
      (building-type-count castle < 3)
    )
    (not
      (population >= 195)
    )
=>
    (chat-local-to-self chat-65e17d4a9c1b0cd4fe790dbd64cea93a769e3eef)
    (set-goal attacking 1)
)
(defrule
    (or
      (goal producing-ranged 0)
      (and
        (goal producing-ranged 1)
        (up-research-status c: ri-fletching >= research-pending)
      )
    )
    (military-population >= 12)
    (goal military-superiority 1)
    (nand
      (up-research-status c: feudal-age < research-pending)
      (current-age == dark-age)
    )
    (up-research-status c: feudal-age >= research-pending)
    (up-research-status c: castle-age < research-pending)
    (current-age == feudal-age)
    (nand
      (goal turtle 1)
      (building-type-count castle < 3)
    )
    (not
      (population >= 195)
    )
=>
    (chat-local-to-self chat-5b8ed1ce7b1125332594a31fe95db897ec0f2827)
    (set-goal attacking 1)
)
(defrule
    (military-population >= 30)
    (or
      (goal military-superiority 1)
      (players-current-age every-enemy < current-age)
    )
    (nand
      (up-research-status c: feudal-age < research-pending)
      (current-age == dark-age)
    )
    (nand
      (up-research-status c: feudal-age >= research-pending)
      (and
        (up-research-status c: castle-age < research-pending)
        (current-age == feudal-age)
      )
    )
    (nand
      (goal turtle 1)
      (building-type-count castle < 3)
    )
    (not
      (population >= 195)
    )
=>
    (chat-local-to-self chat-3fc7599d2e3bfc62aba20780800052d4ecb7ef29)
    (set-goal attacking 1)
)
(defrule
    (or
      (goal threat-source town-center)
      (goal threat-source castle)
    )
    (unit-type-count battering-ram-line == 0)
    (unit-type-count trebuchet-set == 0)
    (unit-type-count bombard-cannon == 0)
    (or
      (cc-players-unit-type-count any-enemy tc-arrow > 0)
      (or
        (cc-players-unit-type-count any-enemy castle-arrow > 0)
        (or
          (cc-players-unit-type-count any-enemy castle-arrow-chemistry > 0)
          (cc-players-unit-type-count any-enemy watch-tower-arrow > 0)
        )
      )
    )
    (goal attacking 1)
    (goal use-town-size-attack 1)
=>
    (up-retreat-now)
    (set-goal attacking 0)
)
(defrule
    (goal attacking 1)
    (strategic-number sn-gather-defense-units == 1)
=>
    (set-strategic-number sn-gather-defense-units 0)
)
(defrule
    (nand
      (goal attacking 1)
      (strategic-number sn-gather-defense-units == 1)
    )
    (goal attacking 0)
    (strategic-number sn-gather-defense-units == 0)
=>
    (set-strategic-number sn-gather-defense-units 1)
)
(defrule
    (goal attacking 1)
    (goal use-town-size-attack 1)
=>
    (chat-local-to-self chat-3c63d67d023806b728662d5e75da4320a513e54b)
    (set-strategic-number sn-maximum-town-size 255)
)
(defrule
    (up-research-status c: imperial-age >= research-pending)
    (not
      (goal attacking 1)
    )
    (strategic-number sn-maximum-town-size == 255)
    (goal use-town-size-attack 1)
=>
    (set-strategic-number sn-maximum-town-size imperial-age-town-size)
)
(defrule
    (not
      (up-research-status c: imperial-age >= research-pending)
    )
    (up-research-status c: castle-age >= research-pending)
    (not
      (goal attacking 1)
    )
    (strategic-number sn-maximum-town-size == 255)
    (goal use-town-size-attack 1)
=>
    (set-strategic-number sn-maximum-town-size castle-age-town-size)
)
(defrule
    (not
      (up-research-status c: imperial-age >= research-pending)
    )
    (not
      (up-research-status c: castle-age >= research-pending)
    )
    (up-research-status c: feudal-age >= research-pending)
    (not
      (goal attacking 1)
    )
    (strategic-number sn-maximum-town-size == 255)
    (goal use-town-size-attack 1)
=>
    (set-strategic-number sn-maximum-town-size feudal-age-town-size)
)
(defrule
    (not
      (up-research-status c: imperial-age >= research-pending)
    )
    (not
      (up-research-status c: castle-age >= research-pending)
    )
    (not
      (up-research-status c: feudal-age >= research-pending)
    )
    (not
      (goal attacking 1)
    )
    (strategic-number sn-maximum-town-size == 255)
    (goal use-town-size-attack 1)
=>
    (set-strategic-number sn-maximum-town-size dark-age-town-size)
)
(defrule
    (town-under-attack)
    (not
      (goal use-town-size-attack 1)
    )
=>
    (set-goal attacking 0)
)
(defrule
    (goal attacking 1)
    (not
      (goal use-town-size-attack 1)
    )
=>
    (enable-timer 6 60)
    (disable-self)
)
(defrule
    (timer-triggered 6)
    (goal attacking 1)
    (not
      (goal use-town-size-attack 1)
    )
=>
    (set-goal taunt-allies 31)
    (attack-now)
    (chat-local-to-self chat-73c3942e655022a22106ca880be2cf0d33b8d6c9)
    (disable-timer 6)
    (enable-timer 6 60)
)
(defrule
    (not
      (goal militant 1)
    )
=>
    (up-jump-rule 65)
)
(defrule
    (up-allied-resource-amount any-ally wood < max-wood)
    (wood-amount > max-wood)
    (goal team-game 1)
    (gold-amount > max-gold)
=>
    (tribute-to-player this-any-ally wood 100)
)
(defrule
    (gold-amount < max-gold)
    (can-sell-commodity wood)
    (not
      (up-allied-resource-amount any-ally wood < max-wood)
    )
    (wood-amount > max-wood)
    (goal team-game 1)
    (gold-amount > max-gold)
=>
    (sell-commodity wood)
)
(defrule
    (up-allied-resource-amount any-ally food < max-food)
    (food-amount > max-food)
    (goal team-game 1)
    (gold-amount > max-gold)
=>
    (tribute-to-player this-any-ally food 100)
)
(defrule
    (gold-amount < max-gold)
    (can-sell-commodity food)
    (not
      (up-allied-resource-amount any-ally food < max-food)
    )
    (food-amount > max-food)
    (goal team-game 1)
    (gold-amount > max-gold)
=>
    (sell-commodity food)
)
(defrule
    (up-allied-resource-amount any-ally gold < max-gold)
    (goal team-game 1)
    (gold-amount > max-gold)
=>
    (tribute-to-player this-any-ally gold 100)
)
(defrule
    (wood-amount > max-wood)
    (can-sell-commodity wood)
    (nand
      (goal team-game 1)
      (gold-amount > max-gold)
    )
    (gold-amount < max-gold)
=>
    (sell-commodity wood)
)
(defrule
    (food-amount > max-food)
    (can-sell-commodity food)
    (nand
      (goal team-game 1)
      (gold-amount > max-gold)
    )
    (gold-amount < max-gold)
=>
    (sell-commodity food)
)
(defrule
    (stone-amount > max-stone)
    (can-sell-commodity stone)
=>
    (sell-commodity stone)
)
(defrule
    (true)
=>
    (set-goal total-score 0)
    (set-goal wood-score 0)
    (set-goal food-score 0)
    (set-goal gold-score 0)
)
(defrule
    (true)
=>
    (set-goal creation-time 0)
    (set-goal current-score 0)
    (set-goal resource-multiplier 1000)
    (set-goal multiplier 0)
    (set-goal temp 0)
    (disable-self)
)
(defrule
    (true)
=>
    (up-get-fact building-type-count town-center multiplier)
    (set-goal wood-score-subtotal 0)
    (set-goal food-score-subtotal 0)
    (set-goal gold-score-subtotal 0)
    (set-goal score-additions-count 0)
)
(defrule
    (goal should-make-villagers 1)
=>
    (set-goal creation-time 25)
    (set-goal current-score 50)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (true)
=>
    (up-modify-goal wood-score-subtotal g:/ score-additions-count)
    (up-modify-goal food-score-subtotal g:/ score-additions-count)
    (up-modify-goal gold-score-subtotal g:/ score-additions-count)
    (up-modify-goal wood-score g:+ wood-score-subtotal)
    (up-modify-goal food-score g:+ food-score-subtotal)
    (up-modify-goal gold-score g:+ gold-score-subtotal)
    (up-get-fact building-type-count-total barracks multiplier)
    (set-goal wood-score-subtotal 0)
    (set-goal food-score-subtotal 0)
    (set-goal gold-score-subtotal 0)
    (set-goal score-additions-count 0)
)
(defrule
    (goal produce-militia 1)
=>
    (set-goal creation-time 21)
    (set-goal current-score 60)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (set-goal current-score 20)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (goal produce-spearmen 1)
=>
    (set-goal creation-time 22)
    (set-goal current-score 35)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (set-goal current-score 25)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal wood-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (goal produce-condottiero 1)
=>
    (set-goal creation-time 18)
    (set-goal current-score 50)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (set-goal current-score 35)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (research-completed ri-elite-eagle-warrior)
    (goal produce-eagles 1)
=>
    (set-goal creation-time 20)
)
(defrule
    (not
      (research-completed ri-elite-eagle-warrior)
    )
    (research-completed ri-eagle-warrior)
    (goal produce-eagles 1)
=>
    (set-goal creation-time 35)
)
(defrule
    (not
      (research-completed ri-elite-eagle-warrior)
    )
    (not
      (research-completed ri-eagle-warrior)
    )
    (goal produce-eagles 1)
=>
    (set-goal creation-time 60)
)
(defrule
    (goal produce-eagles 1)
=>
    (set-goal current-score 20)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (set-goal current-score 50)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (true)
=>
    (up-modify-goal wood-score-subtotal g:/ score-additions-count)
    (up-modify-goal food-score-subtotal g:/ score-additions-count)
    (up-modify-goal gold-score-subtotal g:/ score-additions-count)
    (up-modify-goal wood-score g:+ wood-score-subtotal)
    (up-modify-goal food-score g:+ food-score-subtotal)
    (up-modify-goal gold-score g:+ gold-score-subtotal)
    (up-get-fact building-type-count-total archery-range multiplier)
    (set-goal wood-score-subtotal 0)
    (set-goal food-score-subtotal 0)
    (set-goal gold-score-subtotal 0)
    (set-goal score-additions-count 0)
)
(defrule
    (research-completed ri-crossbow)
    (goal produce-archers 1)
=>
    (set-goal creation-time 27)
)
(defrule
    (not
      (research-completed ri-crossbow)
    )
    (goal produce-archers 1)
=>
    (set-goal creation-time 35)
)
(defrule
    (goal produce-archers 1)
=>
    (set-goal current-score 25)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal wood-score-subtotal g:+ current-score)
    (set-goal current-score 45)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (goal produce-skirmishers 1)
=>
    (set-goal creation-time 22)
    (set-goal current-score 25)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (set-goal current-score 35)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal wood-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (research-completed ri-heavy-cavalry-archer)
    (goal produce-cavalry-archers 1)
=>
    (set-goal creation-time 27)
)
(defrule
    (not
      (research-completed ri-heavy-cavalry-archer)
    )
    (goal produce-cavalry-archers 1)
=>
    (set-goal creation-time 34)
)
(defrule
    (goal produce-cavalry-archers 1)
=>
    (set-goal current-score 40)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal wood-score-subtotal g:+ current-score)
    (set-goal current-score 60)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (goal produce-hand-cannoneers 1)
=>
    (set-goal creation-time 34)
    (set-goal current-score 45)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (set-goal current-score 50)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (true)
=>
    (up-modify-goal wood-score-subtotal g:/ score-additions-count)
    (up-modify-goal food-score-subtotal g:/ score-additions-count)
    (up-modify-goal gold-score-subtotal g:/ score-additions-count)
    (up-modify-goal wood-score g:+ wood-score-subtotal)
    (up-modify-goal food-score g:+ food-score-subtotal)
    (up-modify-goal gold-score g:+ gold-score-subtotal)
    (up-get-fact building-type-count-total stable multiplier)
    (set-goal wood-score-subtotal 0)
    (set-goal food-score-subtotal 0)
    (set-goal gold-score-subtotal 0)
    (set-goal score-additions-count 0)
)
(defrule
    (goal produce-scouts 1)
=>
    (set-goal creation-time 30)
    (set-goal current-score 80)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (goal produce-knights 1)
=>
    (set-goal creation-time 30)
    (set-goal current-score 60)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (set-goal current-score 75)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (research-completed ri-imperial-camel)
    (goal produce-camels 1)
=>
    (set-goal creation-time 20)
)
(defrule
    (not
      (research-completed ri-imperial-camel)
    )
    (goal produce-camels 1)
=>
    (set-goal creation-time 22)
)
(defrule
    (goal produce-camels 1)
=>
    (set-goal current-score 60)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (set-goal current-score 75)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (goal produce-battle-elephants 1)
=>
    (set-goal creation-time 28)
    (set-goal current-score 120)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal food-score-subtotal g:+ current-score)
    (set-goal current-score 70)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (true)
=>
    (up-modify-goal wood-score-subtotal g:/ score-additions-count)
    (up-modify-goal food-score-subtotal g:/ score-additions-count)
    (up-modify-goal gold-score-subtotal g:/ score-additions-count)
    (up-modify-goal wood-score g:+ wood-score-subtotal)
    (up-modify-goal food-score g:+ food-score-subtotal)
    (up-modify-goal gold-score g:+ gold-score-subtotal)
    (up-get-fact building-type-count-total siege-workshop multiplier)
    (set-goal wood-score-subtotal 0)
    (set-goal food-score-subtotal 0)
    (set-goal gold-score-subtotal 0)
    (set-goal score-additions-count 0)
)
(defrule
    (goal produce-rams 1)
=>
    (set-goal creation-time 36)
    (set-goal current-score 160)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal wood-score-subtotal g:+ current-score)
    (set-goal current-score 75)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (goal produce-mangonels 1)
=>
    (set-goal creation-time 46)
    (set-goal current-score 160)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal wood-score-subtotal g:+ current-score)
    (set-goal current-score 135)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (goal produce-scorpions 1)
=>
    (set-goal creation-time 30)
    (set-goal current-score 75)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal wood-score-subtotal g:+ current-score)
    (set-goal current-score 75)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (goal produce-bombard-cannons 1)
=>
    (set-goal creation-time 56)
    (set-goal current-score 225)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal wood-score-subtotal g:+ current-score)
    (set-goal current-score 225)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (true)
=>
    (up-modify-goal wood-score-subtotal g:/ score-additions-count)
    (up-modify-goal food-score-subtotal g:/ score-additions-count)
    (up-modify-goal gold-score-subtotal g:/ score-additions-count)
    (up-modify-goal wood-score g:+ wood-score-subtotal)
    (up-modify-goal food-score g:+ food-score-subtotal)
    (up-modify-goal gold-score g:+ gold-score-subtotal)
    (up-get-fact building-type-count-total castle multiplier)
    (set-goal wood-score-subtotal 0)
    (set-goal food-score-subtotal 0)
    (set-goal gold-score-subtotal 0)
    (set-goal score-additions-count 0)
)
(defrule
    (goal produce-trebuchets 1)
=>
    (set-goal creation-time 50)
    (set-goal current-score 200)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal wood-score-subtotal g:+ current-score)
    (set-goal current-score 200)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (true)
=>
    (up-modify-goal wood-score-subtotal g:/ score-additions-count)
    (up-modify-goal food-score-subtotal g:/ score-additions-count)
    (up-modify-goal gold-score-subtotal g:/ score-additions-count)
    (up-modify-goal wood-score g:+ wood-score-subtotal)
    (up-modify-goal food-score g:+ food-score-subtotal)
    (up-modify-goal gold-score g:+ gold-score-subtotal)
    (up-get-fact building-type-count-total monastery multiplier)
    (set-goal wood-score-subtotal 0)
    (set-goal food-score-subtotal 0)
    (set-goal gold-score-subtotal 0)
    (set-goal score-additions-count 0)
)
(defrule
    (goal produce-monks 1)
=>
    (set-goal creation-time 51)
    (set-goal current-score 100)
    (up-modify-goal current-score g:* resource-multiplier)
    (up-modify-goal current-score g:/ creation-time)
    (up-modify-goal current-score g:* multiplier)
    (up-modify-goal gold-score-subtotal g:+ current-score)
    (up-modify-goal score-additions-count c:+ 1)
)
(defrule
    (true)
=>
    (up-modify-goal wood-score-subtotal g:/ score-additions-count)
    (up-modify-goal food-score-subtotal g:/ score-additions-count)
    (up-modify-goal gold-score-subtotal g:/ score-additions-count)
    (up-modify-goal wood-score g:+ wood-score-subtotal)
    (up-modify-goal food-score g:+ food-score-subtotal)
    (up-modify-goal gold-score g:+ gold-score-subtotal)
    (up-modify-goal total-score g:+ wood-score)
    (up-modify-goal total-score g:+ food-score)
    (up-modify-goal total-score g:+ gold-score)
    (up-modify-goal temp g:= wood-score)
    (up-modify-goal temp c:* 100)
    (up-modify-goal temp g:/ total-score)
    (up-modify-sn sn-wood-gatherer-percentage g:= temp)
    (up-modify-goal temp g:= food-score)
    (up-modify-goal temp c:* 100)
    (up-modify-goal temp g:/ total-score)
    (up-modify-sn sn-food-gatherer-percentage g:= temp)
    (up-modify-goal temp g:= gold-score)
    (up-modify-goal temp c:* 100)
    (up-modify-goal temp g:/ total-score)
    (up-modify-sn sn-gold-gatherer-percentage g:= temp)
    (set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
    (strategic-number sn-wood-gatherer-percentage >= 2)
    (strategic-number sn-food-gatherer-percentage >= 2)
    (strategic-number sn-gold-gatherer-percentage >= 2)
    (strategic-number sn-stone-gatherer-percentage <= 94)
    (up-research-status c: castle-age >= research-pending)
=>
    (up-modify-sn sn-wood-gatherer-percentage c:- 2)
    (up-modify-sn sn-food-gatherer-percentage c:- 2)
    (up-modify-sn sn-gold-gatherer-percentage c:- 2)
    (up-modify-sn sn-stone-gatherer-percentage c:+ 6)
)
(defrule
    (up-compare-goal total-wood-gatherer-percentage < min-wood-percentage)
=>
    (up-modify-goal food-modifier-percentage c:- 1)
    (up-modify-goal gold-modifier-percentage c:- 1)
    (up-modify-goal wood-modifier-percentage c:+ 2)
)
(defrule
    (up-compare-goal total-food-gatherer-percentage < min-food-percentage)
=>
    (up-modify-goal wood-modifier-percentage c:- 1)
    (up-modify-goal gold-modifier-percentage c:- 1)
    (up-modify-goal food-modifier-percentage c:+ 2)
)
(defrule
    (up-compare-goal total-gold-gatherer-percentage < min-gold-percentage)
=>
    (up-modify-goal wood-modifier-percentage c:- 1)
    (up-modify-goal food-modifier-percentage c:- 1)
    (up-modify-goal gold-modifier-percentage c:+ 2)
)
(defrule
    (true)
=>
    (enable-timer 7 30)
    (disable-self)
)
(defrule
    (up-compare-goal total-gold-gatherer-percentage > min-gold-percentage)
    (up-compare-goal non-escrowed-gold >= high-gold)
    (up-compare-goal non-escrowed-food <= low-food)
    (up-compare-goal non-escrowed-wood <= low-wood)
    (timer-triggered 7)
=>
    (up-modify-goal gold-modifier-percentage c:- 4)
    (up-modify-goal wood-modifier-percentage c:+ 2)
    (up-modify-goal food-modifier-percentage c:+ 2)
)
(defrule
    (up-compare-goal total-food-gatherer-percentage > min-food-percentage)
    (up-compare-goal non-escrowed-gold <= low-gold)
    (goal producing-trash 0)
    (not
      (up-compare-goal non-escrowed-food <= low-food)
    )
    (up-compare-goal non-escrowed-food >= high-food)
    (up-compare-goal non-escrowed-wood <= low-wood)
    (timer-triggered 7)
=>
    (up-modify-goal food-modifier-percentage c:- 4)
    (up-modify-goal wood-modifier-percentage c:+ 2)
    (up-modify-goal gold-modifier-percentage c:+ 2)
)
(defrule
    (up-compare-goal total-food-gatherer-percentage > min-food-percentage)
    (up-compare-goal total-gold-gatherer-percentage > min-gold-percentage)
    (nand
      (up-compare-goal non-escrowed-gold <= low-gold)
      (goal producing-trash 0)
    )
    (up-compare-goal non-escrowed-gold >= high-gold)
    (not
      (up-compare-goal non-escrowed-food <= low-food)
    )
    (up-compare-goal non-escrowed-food >= high-food)
    (up-compare-goal non-escrowed-wood <= low-wood)
    (timer-triggered 7)
=>
    (up-modify-goal food-modifier-percentage c:- 2)
    (up-modify-goal gold-modifier-percentage c:- 2)
    (up-modify-goal wood-modifier-percentage c:+ 4)
)
(defrule
    (up-compare-goal total-food-gatherer-percentage > min-food-percentage)
    (nand
      (up-compare-goal non-escrowed-gold <= low-gold)
      (goal producing-trash 0)
    )
    (not
      (up-compare-goal non-escrowed-gold >= high-gold)
    )
    (not
      (up-compare-goal non-escrowed-food <= low-food)
    )
    (up-compare-goal non-escrowed-food >= high-food)
    (up-compare-goal non-escrowed-wood <= low-wood)
    (timer-triggered 7)
=>
    (up-modify-goal food-modifier-percentage c:- 4)
    (up-modify-goal wood-modifier-percentage c:+ 4)
)
(defrule
    (up-compare-goal total-gold-gatherer-percentage > min-gold-percentage)
    (up-compare-goal non-escrowed-gold >= high-gold)
    (not
      (up-compare-goal non-escrowed-food <= low-food)
    )
    (not
      (up-compare-goal non-escrowed-food >= high-food)
    )
    (up-compare-goal non-escrowed-wood <= low-wood)
    (timer-triggered 7)
=>
    (up-modify-goal gold-modifier-percentage c:- 4)
    (up-modify-goal wood-modifier-percentage c:+ 4)
)
(defrule
    (up-compare-goal total-wood-gatherer-percentage > min-wood-percentage)
    (up-compare-goal non-escrowed-gold <= low-gold)
    (goal producing-trash 0)
    (up-compare-goal non-escrowed-food <= low-food)
    (not
      (up-compare-goal non-escrowed-wood <= low-wood)
    )
    (up-compare-goal non-escrowed-wood >= high-wood)
    (timer-triggered 7)
=>
    (up-modify-goal wood-modifier-percentage c:- 4)
    (up-modify-goal food-modifier-percentage c:+ 2)
    (up-modify-goal gold-modifier-percentage c:+ 2)
)
(defrule
    (up-compare-goal total-wood-gatherer-percentage > min-wood-percentage)
    (up-compare-goal total-gold-gatherer-percentage > min-gold-percentage)
    (nand
      (up-compare-goal non-escrowed-gold <= low-gold)
      (goal producing-trash 0)
    )
    (up-compare-goal non-escrowed-gold >= high-gold)
    (up-compare-goal non-escrowed-food <= low-food)
    (not
      (up-compare-goal non-escrowed-wood <= low-wood)
    )
    (up-compare-goal non-escrowed-wood >= high-wood)
    (timer-triggered 7)
=>
    (up-modify-goal wood-modifier-percentage c:- 2)
    (up-modify-goal gold-modifier-percentage c:- 2)
    (up-modify-goal food-modifier-percentage c:+ 4)
)
(defrule
    (up-compare-goal total-wood-gatherer-percentage > min-wood-percentage)
    (nand
      (up-compare-goal non-escrowed-gold <= low-gold)
      (goal producing-trash 0)
    )
    (not
      (up-compare-goal non-escrowed-gold >= high-gold)
    )
    (up-compare-goal non-escrowed-food <= low-food)
    (not
      (up-compare-goal non-escrowed-wood <= low-wood)
    )
    (up-compare-goal non-escrowed-wood >= high-wood)
    (timer-triggered 7)
=>
    (up-modify-goal wood-modifier-percentage c:- 4)
    (up-modify-goal food-modifier-percentage c:+ 4)
)
(defrule
    (up-compare-goal total-wood-gatherer-percentage > min-wood-percentage)
    (up-compare-goal total-food-gatherer-percentage > min-food-percentage)
    (up-compare-goal non-escrowed-gold <= low-gold)
    (goal producing-trash 0)
    (not
      (up-compare-goal non-escrowed-food <= low-food)
    )
    (up-compare-goal non-escrowed-food >= high-food)
    (not
      (up-compare-goal non-escrowed-wood <= low-wood)
    )
    (up-compare-goal non-escrowed-wood >= high-wood)
    (timer-triggered 7)
=>
    (up-modify-goal wood-modifier-percentage c:- 2)
    (up-modify-goal food-modifier-percentage c:- 2)
    (up-modify-goal gold-modifier-percentage c:+ 4)
)
(defrule
    (up-compare-goal total-wood-gatherer-percentage > min-wood-percentage)
    (up-compare-goal non-escrowed-gold <= low-gold)
    (goal producing-trash 0)
    (not
      (up-compare-goal non-escrowed-food <= low-food)
    )
    (not
      (up-compare-goal non-escrowed-food >= high-food)
    )
    (not
      (up-compare-goal non-escrowed-wood <= low-wood)
    )
    (up-compare-goal non-escrowed-wood >= high-wood)
    (timer-triggered 7)
=>
    (up-modify-goal wood-modifier-percentage c:- 4)
    (up-modify-goal food-modifier-percentage c:+ 4)
)
(defrule
    (up-compare-goal total-gold-gatherer-percentage > min-gold-percentage)
    (up-compare-goal non-escrowed-gold >= high-gold)
    (up-compare-goal non-escrowed-food <= low-food)
    (not
      (up-compare-goal non-escrowed-wood <= low-wood)
    )
    (not
      (up-compare-goal non-escrowed-wood >= high-wood)
    )
    (timer-triggered 7)
=>
    (up-modify-goal gold-modifier-percentage c:- 4)
    (up-modify-goal food-modifier-percentage c:+ 4)
)
(defrule
    (up-compare-goal total-food-gatherer-percentage > min-food-percentage)
    (up-compare-goal non-escrowed-gold <= low-gold)
    (goal producing-trash 0)
    (not
      (up-compare-goal non-escrowed-food <= low-food)
    )
    (up-compare-goal non-escrowed-food >= high-food)
    (not
      (up-compare-goal non-escrowed-wood <= low-wood)
    )
    (not
      (up-compare-goal non-escrowed-wood >= high-wood)
    )
    (timer-triggered 7)
=>
    (up-modify-goal food-modifier-percentage c:- 4)
    (up-modify-goal gold-modifier-percentage c:+ 4)
)
(defrule
    (timer-triggered 7)
=>
    (disable-timer 7)
    (enable-timer 7 30)
)
(defrule
    (false)
=>
    (up-chat-data-to-all "wood: %d" g: total-wood-gatherer-percentage)
    (up-chat-data-to-all "food: %d" g: total-food-gatherer-percentage)
    (up-chat-data-to-all "gold: %d" g: total-gold-gatherer-percentage)
    (up-chat-data-to-all "stone: %d" g: total-stone-gatherer-percentage)
)
(defrule
    (not
      (current-age == dark-age)
    )
=>
    (up-jump-rule 2)
)
(defrule
    (civilian-population <= 8)
=>
    (set-strategic-number sn-wood-gatherer-percentage 0)
    (set-strategic-number sn-food-gatherer-percentage 100)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (set-strategic-number sn-enable-boar-hunting 2)
    (set-strategic-number sn-minimum-number-hunters 3)
    (set-strategic-number sn-minimum-boar-lure-group-size 3)
    (set-strategic-number sn-minimum-boar-hunt-group-size 3)
    (set-strategic-number sn-preferred-mill-placement 0)
)
(defrule
    (not
      (civilian-population <= 8)
    )
    (civilian-population <= 12)
=>
    (set-strategic-number sn-wood-gatherer-percentage 30)
    (set-strategic-number sn-food-gatherer-percentage 70)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
    (nand
      (building-type-count stone-wall-line == 0)
      (and
        (goal initial-age dark-age)
        (and
          (current-age <= feudal-age)
          (and
            (population-cap == 200)
            (not
              (death-match-game)
            )
          )
        )
      )
    )
=>
    (up-jump-rule 10)
)
(defrule
    (true)
=>
    (chat-to-allies chat-30f1aaa162016aa62cc384655607a7cdd32a399c)
    (set-strategic-number sn-wood-gatherer-percentage 20)
    (set-strategic-number sn-food-gatherer-percentage 80)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (set-goal age-up 0)
    (set-strategic-number sn-enable-training-queue 1)
    (disable-self)
)
(defrule
    (civilian-population >= 20)
    (current-age == dark-age)
=>
    (set-strategic-number sn-enable-training-queue 0)
    (disable-self)
)
(defrule
    (civilian-population >= 21)
    (current-age == dark-age)
=>
    (set-goal age-up 1)
    (disable-self)
)
(defrule
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-goal militant 1)
    (disable-self)
)
(defrule
    (false)
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-goal choose-initial-balance 1)
    (enable-timer 8 120)
    (disable-self)
)
(defrule
    (timer-triggered 8)
    (false)
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-goal choose-initial-balance 0)
    (disable-self)
)
(defrule
    (goal produce-archers 1)
    (goal choose-initial-balance 1)
    (false)
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-strategic-number sn-wood-gatherer-percentage 40)
    (set-strategic-number sn-food-gatherer-percentage 35)
    (set-strategic-number sn-gold-gatherer-percentage 25)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (not
      (goal produce-archers 1)
    )
    (goal produce-eagles 1)
    (goal choose-initial-balance 1)
    (false)
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-strategic-number sn-wood-gatherer-percentage 35)
    (set-strategic-number sn-food-gatherer-percentage 35)
    (set-strategic-number sn-gold-gatherer-percentage 30)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (not
      (goal produce-archers 1)
    )
    (not
      (goal produce-eagles 1)
    )
    (or
      (goal produce-militia 1)
      (goal produce-scouts 1)
    )
    (goal choose-initial-balance 1)
    (false)
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-strategic-number sn-wood-gatherer-percentage 35)
    (set-strategic-number sn-food-gatherer-percentage 55)
    (set-strategic-number sn-gold-gatherer-percentage 10)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (not
      (goal produce-archers 1)
    )
    (not
      (goal produce-eagles 1)
    )
    (not
      (goal produce-militia 1)
    )
    (not
      (goal produce-scouts 1)
    )
    (goal choose-initial-balance 1)
    (false)
    (up-research-status c: feudal-age >= research-pending)
=>
    (set-strategic-number sn-wood-gatherer-percentage 40)
    (set-strategic-number sn-food-gatherer-percentage 45)
    (set-strategic-number sn-gold-gatherer-percentage 15)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (nand
      (not
        (building-type-count stone-wall-line == 0)
      )
      (and
        (goal initial-age dark-age)
        (and
          (current-age <= feudal-age)
          (and
            (population-cap == 200)
            (not
              (death-match-game)
            )
          )
        )
      )
    )
=>
    (up-jump-rule 10)
)
(defrule
    (true)
=>
    (chat-to-allies chat-60a59a7fdeaf805a4de0f4ea30b4769001485d1a)
    (set-strategic-number sn-wood-gatherer-percentage 20)
    (set-strategic-number sn-food-gatherer-percentage 80)
    (set-strategic-number sn-gold-gatherer-percentage 0)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (set-goal age-up 0)
    (set-strategic-number sn-enable-training-queue 1)
    (disable-self)
)
(defrule
    (civilian-population >= 24)
    (current-age == dark-age)
=>
    (set-strategic-number sn-enable-training-queue 0)
    (disable-self)
)
(defrule
    (civilian-population >= 25)
    (current-age == dark-age)
=>
    (set-goal age-up 1)
    (disable-self)
)
(defrule
    (up-research-status c: castle-age >= research-pending)
=>
    (set-goal militant 1)
    (set-goal research-economy-upgrades 1)
    (disable-self)
)
(defrule
    (current-age >= feudal-age)
=>
    (set-strategic-number sn-wood-gatherer-percentage 50)
    (set-strategic-number sn-food-gatherer-percentage 40)
    (set-strategic-number sn-gold-gatherer-percentage 10)
    (set-strategic-number sn-stone-gatherer-percentage 0)
    (disable-self)
)
(defrule
    (can-build-with-escrow mining-camp)
    (up-pending-objects c: mining-camp < 5)
    (building-type-count-total mining-camp < 1)
    (up-research-status c: feudal-age >= research-pending)
=>
    (release-escrow wood)
    (build mining-camp)
)
(defrule
    (or
      (building-type-count-total market == 0)
      (building-type-count-total blacksmith == 0)
    )
    (current-age == feudal-age)
=>
    (set-escrow-percentage wood 90)
    (disable-self)
)
(defrule
    (current-age == feudal-age)
=>
    (set-goal research-economy-upgrades 0)
    (disable-self)
)
(defrule
    (can-build-with-escrow market)
    (up-pending-objects c: market < 5)
    (building-type-count-total market < 1)
    (current-age == feudal-age)
=>
    (release-escrow wood)
    (build market)
)
(defrule
    (can-build-with-escrow blacksmith)
    (up-pending-objects c: blacksmith < 5)
    (building-type-count-total blacksmith < 1)
    (current-age == feudal-age)
=>
    (release-escrow wood)
    (build blacksmith)
)
(defrule
    (nand
      (goal team-game 1)
      (goal help-allies 1)
    )
=>
    (up-jump-rule 5)
)
(defrule
    (players-current-age any-ally == dark-age)
    (game-time >= 900)
=>
    (chat-to-player this-any-ally chat-1bdc740b6e6a6d27628421f83dfdbed0019e2727)
    (chat-to-player this-any-ally chat-7118be8f4c86bdb22b6178df62b3eeb689caad1f)
    (disable-self)
)
(defrule
    (food-amount > 200)
    (up-allied-resource-amount this-any-ally food < 500)
    (players-current-age any-ally == dark-age)
    (game-time >= 900)
=>
    (tribute-to-player this-any-ally food 100)
)
(defrule
    (players-current-age any-ally == feudal-age)
    (game-time >= 1800)
    (current-age >= castle-age)
=>
    (chat-to-player this-any-ally chat-56fa240f99d527be4b92227d77ebaff75b9e3bdb)
    (chat-to-player this-any-ally chat-d408512c600b7751f46e4fa791cc438e7de5f1c9)
    (chat-to-player this-any-ally chat-d2dfe5867d53126e1c87cdffd0244fcf6b10f961)
    (disable-self)
)
(defrule
    (food-amount > 200)
    (up-allied-resource-amount this-any-ally food < 800)
    (players-current-age any-ally == feudal-age)
    (game-time >= 1800)
    (current-age >= castle-age)
=>
    (tribute-to-player this-any-ally food 100)
)
(defrule
    (gold-amount > 200)
    (up-allied-resource-amount this-any-ally gold < 200)
    (players-current-age any-ally == feudal-age)
    (game-time >= 1800)
    (current-age >= castle-age)
=>
    (tribute-to-player this-any-ally gold 100)
)
(defrule
    (not
      (goal team-game 1)
    )
=>
    (up-jump-rule 19)
)
(defrule
    (taunt-detected any-ally 31)
    (false)
=>
    (set-strategic-number sn-target-player-number 0)
)
(defrule
    (goal attacking 1)
    (taunt-detected any-ally 31)
    (false)
=>
    (chat-to-allies chat-d5c5dbfd928deef533a0d03fee5d0b1f95ff70a2)
)
(defrule
    (not
      (goal attacking 1)
    )
    (goal militant 1)
    (military-population > 5)
    (goal use-town-size-attack 0)
    (taunt-detected any-ally 31)
    (false)
=>
    (set-goal taunt-allies 1)
    (attack-now)
)
(defrule
    (not
      (goal attacking 1)
    )
    (nand
      (goal militant 1)
      (and
        (military-population > 5)
        (goal use-town-size-attack 0)
      )
    )
    (taunt-detected any-ally 31)
    (false)
=>
    (set-goal taunt-allies 2)
)
(defrule
    (taunt-detected any-ally 31)
    (false)
=>
    (acknowledge-taunt this-any-ally 31)
)
(defrule
    (taunt-detected any-ally 12)
    (false)
=>
    (set-strategic-number sn-target-player-number -1)
    (attack-now)
    (chat-to-allies chat-0cccec670386b467c91aa785be1da8c93b2df9a6)
    (acknowledge-taunt this-any-ally 12)
)
(defrule
    (strategic-number sn-target-player-number == -1)
=>
    (set-strategic-number sn-target-player-number 0)
)
(defrule
    (building-type-count market > 0)
    (food-amount > 100)
    (taunt-detected any-ally 3)
=>
    (tribute-to-player this-any-ally food 100)
    (set-goal taunt-allies 1)
)
(defrule
    (nand
      (building-type-count market > 0)
      (food-amount > 100)
    )
    (taunt-detected any-ally 3)
=>
    (set-goal taunt-allies 2)
)
(defrule
    (taunt-detected any-ally 3)
=>
    (acknowledge-taunt this-any-ally 3)
)
(defrule
    (building-type-count market > 0)
    (wood-amount > 100)
    (taunt-detected any-ally 4)
=>
    (tribute-to-player this-any-ally wood 100)
    (set-goal taunt-allies 1)
)
(defrule
    (nand
      (building-type-count market > 0)
      (wood-amount > 100)
    )
    (taunt-detected any-ally 4)
=>
    (set-goal taunt-allies 2)
)
(defrule
    (taunt-detected any-ally 4)
=>
    (acknowledge-taunt this-any-ally 4)
)
(defrule
    (building-type-count market > 0)
    (gold-amount > 100)
    (taunt-detected any-ally 5)
=>
    (tribute-to-player this-any-ally gold 100)
    (set-goal taunt-allies 1)
)
(defrule
    (nand
      (building-type-count market > 0)
      (gold-amount > 100)
    )
    (taunt-detected any-ally 5)
=>
    (set-goal taunt-allies 2)
)
(defrule
    (taunt-detected any-ally 5)
=>
    (acknowledge-taunt this-any-ally 5)
)
(defrule
    (building-type-count market > 0)
    (stone-amount > 100)
    (taunt-detected any-ally 6)
=>
    (tribute-to-player this-any-ally stone 100)
    (set-goal taunt-allies 1)
)
(defrule
    (nand
      (building-type-count market > 0)
      (stone-amount > 100)
    )
    (taunt-detected any-ally 6)
=>
    (set-goal taunt-allies 2)
)
(defrule
    (taunt-detected any-ally 6)
=>
    (acknowledge-taunt this-any-ally 6)
)
(defrule
    (goal resign 1)
=>
    (chat-to-all chat-1e68557cb3a751e4168c0ab38b3b4e96a5a8d303)
    (disable-self)
)
(defrule
    (game-time < 5)
=>
    (set-goal 106 0)
    (disable-self)
    (generate-random-number 8)
    (up-get-fact random-number 0 106)
    (up-get-precise-time 0 8)
    (up-modify-goal 106 g:+ 8)
    (up-modify-goal 106 c:mod 8)
    (up-modify-goal 106 c:+ 8)
    (up-modify-goal 106 c:mod 8)
    (up-modify-goal 106 c:+ 1)
)
(defrule
    (goal 106 1)
    (game-time < 5)
=>
    (chat-to-all chat-9e302f1435b6dcace320e320d120b98920c4a95f)
    (disable-self)
)
(defrule
    (goal 106 2)
    (game-time < 5)
=>
    (chat-to-all chat-a6e3a0111582b61f846fa4e86c9595da7dcc09fb)
    (disable-self)
)
(defrule
    (goal 106 3)
    (game-time < 5)
=>
    (chat-to-all chat-012a48b2b42594bd076f129ed65d30e1d7536aee)
    (disable-self)
)
(defrule
    (goal 106 4)
    (game-time < 5)
=>
    (chat-to-all chat-862fae72355bf64d3f65ce410f26d4325e562b89)
    (disable-self)
)
(defrule
    (goal 106 5)
    (game-time < 5)
=>
    (chat-to-all chat-25810c507aa83718313838dce1f1d34fb688d19f)
    (disable-self)
)
(defrule
    (goal 106 6)
    (game-time < 5)
=>
    (chat-to-all chat-63539ed9156eb6843685979d45e9c9f61eceed91)
    (disable-self)
)
(defrule
    (goal 106 7)
    (game-time < 5)
=>
    (chat-to-all chat-eec0222a3c2635db93e2edb9f489caf901393185)
    (disable-self)
)
(defrule
    (goal 106 8)
    (game-time < 5)
=>
    (chat-to-all chat-7f15733a1a6b905879663b619d9c6b412049e596)
    (disable-self)
)
(defrule
    (true)
=>
    (set-goal taunt-allies 0)
    (set-goal taunt-enemies 0)
    (enable-timer 9 7200)
    (disable-self)
)
(defrule
    (timer-triggered 9)
=>
    (set-goal 108 0)
    (disable-self)
    (generate-random-number 4)
    (up-get-fact random-number 0 108)
    (up-get-precise-time 0 8)
    (up-modify-goal 108 g:+ 8)
    (up-modify-goal 108 c:mod 4)
    (up-modify-goal 108 c:+ 4)
    (up-modify-goal 108 c:mod 4)
    (up-modify-goal 108 c:+ 1)
)
(defrule
    (goal 108 1)
    (timer-triggered 9)
=>
    (chat-to-all chat-46ac43f7e6b0ae5ce5f964045b04c1abb08f6fc0)
    (disable-self)
)
(defrule
    (goal 108 2)
    (timer-triggered 9)
=>
    (chat-to-all chat-e5aca3c0d428ea629876fa092922bd3133be5112)
    (disable-self)
)
(defrule
    (goal 108 3)
    (timer-triggered 9)
=>
    (chat-to-all chat-196f5c1d91dc8099050c5a736992d83b356240cc)
    (disable-self)
)
(defrule
    (goal 108 4)
    (timer-triggered 9)
=>
    (chat-to-all chat-ab5edeaef630d8d7b56fefef47876cc2d39c98ef)
    (disable-self)
)
(defrule
    (goal taunt-allies 1)
=>
    (set-goal 109 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 109)
    (up-get-precise-time 0 8)
    (up-modify-goal 109 g:+ 8)
    (up-modify-goal 109 c:mod 3)
    (up-modify-goal 109 c:+ 3)
    (up-modify-goal 109 c:mod 3)
    (up-modify-goal 109 c:+ 1)
)
(defrule
    (goal 109 1)
    (goal taunt-allies 1)
=>
    (chat-to-allies chat-573d07f054e25c6a1be98dd3d019f7d849be5b30)
)
(defrule
    (goal 109 2)
    (goal taunt-allies 1)
=>
    (chat-to-allies chat-a18a4ebf9551792441f2d56574ecfdbf4c2822fe)
)
(defrule
    (goal 109 3)
    (goal taunt-allies 1)
=>
    (chat-to-allies chat-49d8263a5eb48a6b02521202b3379cc2ab1073f5)
)
(defrule
    (goal taunt-allies 1)
=>
    (set-goal taunt-allies 0)
)
(defrule
    (goal taunt-allies 2)
=>
    (set-goal 110 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 110)
    (up-get-precise-time 0 8)
    (up-modify-goal 110 g:+ 8)
    (up-modify-goal 110 c:mod 3)
    (up-modify-goal 110 c:+ 3)
    (up-modify-goal 110 c:mod 3)
    (up-modify-goal 110 c:+ 1)
)
(defrule
    (goal 110 1)
    (goal taunt-allies 2)
=>
    (chat-to-allies chat-7951e682d99349849c0b8f6d532792ec7b5389ba)
)
(defrule
    (goal 110 2)
    (goal taunt-allies 2)
=>
    (chat-to-allies chat-21c103fc315890be4685378e0edcf2bb22385bb9)
)
(defrule
    (goal 110 3)
    (goal taunt-allies 2)
=>
    (chat-to-allies chat-1ef6222feb6bfe03b756638e78b0747130db8e83)
)
(defrule
    (goal taunt-allies 2)
=>
    (set-goal taunt-allies 0)
)
(defrule
    (goal taunt-allies 3)
=>
    (set-goal 111 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 111)
    (up-get-precise-time 0 8)
    (up-modify-goal 111 g:+ 8)
    (up-modify-goal 111 c:mod 3)
    (up-modify-goal 111 c:+ 3)
    (up-modify-goal 111 c:mod 3)
    (up-modify-goal 111 c:+ 1)
)
(defrule
    (goal 111 1)
    (goal taunt-allies 3)
=>
    (chat-to-allies chat-5f18ff15fb2138ca9ab6ecee8f84bac629110faa)
)
(defrule
    (goal 111 2)
    (goal taunt-allies 3)
=>
    (chat-to-allies chat-629f862c9fd71b8356bf949e19483e04af96b574)
)
(defrule
    (goal 111 3)
    (goal taunt-allies 3)
=>
    (chat-to-allies chat-07a0584dd72d68f6e200d8e43946ad111b6e46b5)
)
(defrule
    (goal taunt-allies 3)
=>
    (set-goal taunt-allies 0)
)
(defrule
    (goal taunt-allies 4)
=>
    (set-goal 112 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 112)
    (up-get-precise-time 0 8)
    (up-modify-goal 112 g:+ 8)
    (up-modify-goal 112 c:mod 2)
    (up-modify-goal 112 c:+ 2)
    (up-modify-goal 112 c:mod 2)
    (up-modify-goal 112 c:+ 1)
)
(defrule
    (goal 112 1)
    (goal taunt-allies 4)
=>
    (chat-to-allies chat-87894780931fdc90a726966caf654f2c3fc10033)
)
(defrule
    (goal 112 2)
    (goal taunt-allies 4)
=>
    (chat-to-allies chat-ceb2461dd026c94f28b8f86064c9c8f79872b642)
)
(defrule
    (goal taunt-allies 4)
=>
    (set-goal taunt-allies 0)
)
(defrule
    (goal taunt-allies 5)
=>
    (set-goal 113 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 113)
    (up-get-precise-time 0 8)
    (up-modify-goal 113 g:+ 8)
    (up-modify-goal 113 c:mod 2)
    (up-modify-goal 113 c:+ 2)
    (up-modify-goal 113 c:mod 2)
    (up-modify-goal 113 c:+ 1)
)
(defrule
    (goal 113 1)
    (goal taunt-allies 5)
=>
    (chat-to-allies chat-1d362d276f7bb069d51ac82a19f6fc1d4eea2cfd)
)
(defrule
    (goal 113 2)
    (goal taunt-allies 5)
=>
    (chat-to-allies chat-180538df85fb5e56c743d34a9c719f1477c36732)
)
(defrule
    (goal taunt-allies 5)
=>
    (set-goal taunt-allies 0)
)
(defrule
    (goal taunt-allies 6)
=>
    (set-goal 114 0)
    (generate-random-number 2)
    (up-get-fact random-number 0 114)
    (up-get-precise-time 0 8)
    (up-modify-goal 114 g:+ 8)
    (up-modify-goal 114 c:mod 2)
    (up-modify-goal 114 c:+ 2)
    (up-modify-goal 114 c:mod 2)
    (up-modify-goal 114 c:+ 1)
)
(defrule
    (goal 114 1)
    (goal taunt-allies 6)
=>
    (chat-to-allies chat-97ba38f1af74fae61f04901af4f855f5d8a7b48a)
)
(defrule
    (goal 114 2)
    (goal taunt-allies 6)
=>
    (chat-to-allies chat-89357b8f665602afc596212a534517a76ca18b07)
)
(defrule
    (goal taunt-allies 6)
=>
    (set-goal taunt-allies 0)
)
(defrule
    (goal taunt-allies 12)
=>
    (set-goal 115 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 115)
    (up-get-precise-time 0 8)
    (up-modify-goal 115 g:+ 8)
    (up-modify-goal 115 c:mod 3)
    (up-modify-goal 115 c:+ 3)
    (up-modify-goal 115 c:mod 3)
    (up-modify-goal 115 c:+ 1)
)
(defrule
    (goal 115 1)
    (goal taunt-allies 12)
=>
    (chat-to-allies chat-965a0f00cfd0bf1021c398e6319d0076f86aa350)
)
(defrule
    (goal 115 2)
    (goal taunt-allies 12)
=>
    (chat-to-allies chat-b2230605d3679d364f8a43049ab880d9a03ac391)
)
(defrule
    (goal 115 3)
    (goal taunt-allies 12)
=>
    (chat-to-allies chat-dcbac7d6f6f5a6201591400f7044386b6e5367c0)
)
(defrule
    (goal taunt-allies 12)
=>
    (set-goal taunt-allies 0)
)
(defrule
    (goal taunt-allies 31)
=>
    (set-goal 116 0)
    (generate-random-number 3)
    (up-get-fact random-number 0 116)
    (up-get-precise-time 0 8)
    (up-modify-goal 116 g:+ 8)
    (up-modify-goal 116 c:mod 3)
    (up-modify-goal 116 c:+ 3)
    (up-modify-goal 116 c:mod 3)
    (up-modify-goal 116 c:+ 1)
)
(defrule
    (goal 116 1)
    (goal taunt-allies 31)
=>
    (chat-to-allies chat-16b1f5319bb20e80b6daae909b196f9fee2cad2f)
)
(defrule
    (goal 116 2)
    (goal taunt-allies 31)
=>
    (chat-to-allies chat-73a552cc05bd0ea09568e916b9be1b9c3ffae505)
)
(defrule
    (goal 116 3)
    (goal taunt-allies 31)
=>
    (chat-to-allies chat-6f5d7483f2a3888a96a984d93f24813260cc1920)
)
(defrule
    (goal taunt-allies 31)
=>
    (set-goal taunt-allies 0)
)
(defrule
    (false)
=>
    (set-goal out-count 0)
    (disable-self)
)
(defrule
    (up-pending-objects c: villager == 0)
    (civilian-population < 100)
    (false)
=>
    (up-modify-goal out-count c:+ 1)
)
(defrule
    (nand
      (up-pending-objects c: villager == 0)
      (civilian-population < 100)
    )
    (false)
=>
    (set-goal out-count 0)
)
(defrule
    (up-compare-goal out-count >= 2)
    (false)
=>
    (chat-to-all chat-d7012f8470b17ca97ea6cffc5ab124bd893c9226)
)
(defrule
    (true)
=>
    (up-modify-sn sn-wood-gatherer-percentage g:+ wood-modifier-percentage)
    (up-modify-sn sn-food-gatherer-percentage g:+ food-modifier-percentage)
    (up-modify-sn sn-gold-gatherer-percentage g:+ gold-modifier-percentage)
)
